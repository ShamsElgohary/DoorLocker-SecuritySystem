
FinalProject_MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ea4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009c  00800060  00002ea4  00002f38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  008000fc  008000fc  00002fd4  2**0
                  ALLOC
  3 .stab         0000249c  00000000  00000000  00002fd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f41  00000000  00000000  00005470  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000063b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000064f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006661  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000082aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009195  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009f44  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a0a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a331  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000aaff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
       2:	00 00       	nop
       4:	43 c0       	rjmp	.+134    	; 0x8c <__bad_interrupt>
       6:	00 00       	nop
       8:	41 c0       	rjmp	.+130    	; 0x8c <__bad_interrupt>
       a:	00 00       	nop
       c:	3f c0       	rjmp	.+126    	; 0x8c <__bad_interrupt>
       e:	00 00       	nop
      10:	3d c0       	rjmp	.+122    	; 0x8c <__bad_interrupt>
      12:	00 00       	nop
      14:	3b c0       	rjmp	.+118    	; 0x8c <__bad_interrupt>
      16:	00 00       	nop
      18:	0c 94 e0 15 	jmp	0x2bc0	; 0x2bc0 <__vector_6>
      1c:	37 c0       	rjmp	.+110    	; 0x8c <__bad_interrupt>
      1e:	00 00       	nop
      20:	0c 94 a2 15 	jmp	0x2b44	; 0x2b44 <__vector_8>
      24:	0c 94 4c 15 	jmp	0x2a98	; 0x2a98 <__vector_9>
      28:	31 c0       	rjmp	.+98     	; 0x8c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2f c0       	rjmp	.+94     	; 0x8c <__bad_interrupt>
      2e:	00 00       	nop
      30:	2d c0       	rjmp	.+90     	; 0x8c <__bad_interrupt>
      32:	00 00       	nop
      34:	2b c0       	rjmp	.+86     	; 0x8c <__bad_interrupt>
      36:	00 00       	nop
      38:	29 c0       	rjmp	.+82     	; 0x8c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	27 c0       	rjmp	.+78     	; 0x8c <__bad_interrupt>
      3e:	00 00       	nop
      40:	25 c0       	rjmp	.+74     	; 0x8c <__bad_interrupt>
      42:	00 00       	nop
      44:	23 c0       	rjmp	.+70     	; 0x8c <__bad_interrupt>
      46:	00 00       	nop
      48:	21 c0       	rjmp	.+66     	; 0x8c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	0c 94 77 15 	jmp	0x2aee	; 0x2aee <__vector_19>
      50:	1d c0       	rjmp	.+58     	; 0x8c <__bad_interrupt>
	...

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ea       	ldi	r30, 0xA4	; 164
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3f       	cpi	r26, 0xFC	; 252
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac ef       	ldi	r26, 0xFC	; 252
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 30       	cpi	r26, 0x08	; 8
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	44 d5       	rcall	.+2696   	; 0xb10 <main>
      88:	0c 94 50 17 	jmp	0x2ea0	; 0x2ea0 <_exit>

0000008c <__bad_interrupt>:
      8c:	b9 cf       	rjmp	.-142    	; 0x0 <__vectors>

0000008e <__fixunssfsi>:
      8e:	ef 92       	push	r14
      90:	ff 92       	push	r15
      92:	0f 93       	push	r16
      94:	1f 93       	push	r17
      96:	7b 01       	movw	r14, r22
      98:	8c 01       	movw	r16, r24
      9a:	20 e0       	ldi	r18, 0x00	; 0
      9c:	30 e0       	ldi	r19, 0x00	; 0
      9e:	40 e0       	ldi	r20, 0x00	; 0
      a0:	5f e4       	ldi	r21, 0x4F	; 79
      a2:	e3 d2       	rcall	.+1478   	; 0x66a <__gesf2>
      a4:	88 23       	and	r24, r24
      a6:	7c f0       	brlt	.+30     	; 0xc6 <__fixunssfsi+0x38>
      a8:	c8 01       	movw	r24, r16
      aa:	b7 01       	movw	r22, r14
      ac:	20 e0       	ldi	r18, 0x00	; 0
      ae:	30 e0       	ldi	r19, 0x00	; 0
      b0:	40 e0       	ldi	r20, 0x00	; 0
      b2:	5f e4       	ldi	r21, 0x4F	; 79
      b4:	60 d1       	rcall	.+704    	; 0x376 <__subsf3>
      b6:	33 d3       	rcall	.+1638   	; 0x71e <__fixsfsi>
      b8:	9b 01       	movw	r18, r22
      ba:	ac 01       	movw	r20, r24
      bc:	20 50       	subi	r18, 0x00	; 0
      be:	30 40       	sbci	r19, 0x00	; 0
      c0:	40 40       	sbci	r20, 0x00	; 0
      c2:	50 48       	sbci	r21, 0x80	; 128
      c4:	05 c0       	rjmp	.+10     	; 0xd0 <__fixunssfsi+0x42>
      c6:	c8 01       	movw	r24, r16
      c8:	b7 01       	movw	r22, r14
      ca:	29 d3       	rcall	.+1618   	; 0x71e <__fixsfsi>
      cc:	9b 01       	movw	r18, r22
      ce:	ac 01       	movw	r20, r24
      d0:	b9 01       	movw	r22, r18
      d2:	ca 01       	movw	r24, r20
      d4:	1f 91       	pop	r17
      d6:	0f 91       	pop	r16
      d8:	ff 90       	pop	r15
      da:	ef 90       	pop	r14
      dc:	08 95       	ret

000000de <_fpadd_parts>:
      de:	a0 e0       	ldi	r26, 0x00	; 0
      e0:	b0 e0       	ldi	r27, 0x00	; 0
      e2:	e5 e7       	ldi	r30, 0x75	; 117
      e4:	f0 e0       	ldi	r31, 0x00	; 0
      e6:	0c 94 19 17 	jmp	0x2e32	; 0x2e32 <__prologue_saves__>
      ea:	dc 01       	movw	r26, r24
      ec:	2b 01       	movw	r4, r22
      ee:	fa 01       	movw	r30, r20
      f0:	9c 91       	ld	r25, X
      f2:	92 30       	cpi	r25, 0x02	; 2
      f4:	08 f4       	brcc	.+2      	; 0xf8 <_fpadd_parts+0x1a>
      f6:	39 c1       	rjmp	.+626    	; 0x36a <_fpadd_parts+0x28c>
      f8:	eb 01       	movw	r28, r22
      fa:	88 81       	ld	r24, Y
      fc:	82 30       	cpi	r24, 0x02	; 2
      fe:	08 f4       	brcc	.+2      	; 0x102 <_fpadd_parts+0x24>
     100:	33 c1       	rjmp	.+614    	; 0x368 <_fpadd_parts+0x28a>
     102:	94 30       	cpi	r25, 0x04	; 4
     104:	69 f4       	brne	.+26     	; 0x120 <_fpadd_parts+0x42>
     106:	84 30       	cpi	r24, 0x04	; 4
     108:	09 f0       	breq	.+2      	; 0x10c <_fpadd_parts+0x2e>
     10a:	2f c1       	rjmp	.+606    	; 0x36a <_fpadd_parts+0x28c>
     10c:	11 96       	adiw	r26, 0x01	; 1
     10e:	9c 91       	ld	r25, X
     110:	11 97       	sbiw	r26, 0x01	; 1
     112:	89 81       	ldd	r24, Y+1	; 0x01
     114:	98 17       	cp	r25, r24
     116:	09 f4       	brne	.+2      	; 0x11a <_fpadd_parts+0x3c>
     118:	28 c1       	rjmp	.+592    	; 0x36a <_fpadd_parts+0x28c>
     11a:	ab ee       	ldi	r26, 0xEB	; 235
     11c:	b0 e0       	ldi	r27, 0x00	; 0
     11e:	25 c1       	rjmp	.+586    	; 0x36a <_fpadd_parts+0x28c>
     120:	84 30       	cpi	r24, 0x04	; 4
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x48>
     124:	21 c1       	rjmp	.+578    	; 0x368 <_fpadd_parts+0x28a>
     126:	82 30       	cpi	r24, 0x02	; 2
     128:	a9 f4       	brne	.+42     	; 0x154 <_fpadd_parts+0x76>
     12a:	92 30       	cpi	r25, 0x02	; 2
     12c:	09 f0       	breq	.+2      	; 0x130 <_fpadd_parts+0x52>
     12e:	1d c1       	rjmp	.+570    	; 0x36a <_fpadd_parts+0x28c>
     130:	9a 01       	movw	r18, r20
     132:	ad 01       	movw	r20, r26
     134:	88 e0       	ldi	r24, 0x08	; 8
     136:	ea 01       	movw	r28, r20
     138:	09 90       	ld	r0, Y+
     13a:	ae 01       	movw	r20, r28
     13c:	e9 01       	movw	r28, r18
     13e:	09 92       	st	Y+, r0
     140:	9e 01       	movw	r18, r28
     142:	81 50       	subi	r24, 0x01	; 1
     144:	c1 f7       	brne	.-16     	; 0x136 <_fpadd_parts+0x58>
     146:	e2 01       	movw	r28, r4
     148:	89 81       	ldd	r24, Y+1	; 0x01
     14a:	11 96       	adiw	r26, 0x01	; 1
     14c:	9c 91       	ld	r25, X
     14e:	89 23       	and	r24, r25
     150:	81 83       	std	Z+1, r24	; 0x01
     152:	08 c1       	rjmp	.+528    	; 0x364 <_fpadd_parts+0x286>
     154:	92 30       	cpi	r25, 0x02	; 2
     156:	09 f4       	brne	.+2      	; 0x15a <_fpadd_parts+0x7c>
     158:	07 c1       	rjmp	.+526    	; 0x368 <_fpadd_parts+0x28a>
     15a:	12 96       	adiw	r26, 0x02	; 2
     15c:	2d 90       	ld	r2, X+
     15e:	3c 90       	ld	r3, X
     160:	13 97       	sbiw	r26, 0x03	; 3
     162:	eb 01       	movw	r28, r22
     164:	8a 81       	ldd	r24, Y+2	; 0x02
     166:	9b 81       	ldd	r25, Y+3	; 0x03
     168:	14 96       	adiw	r26, 0x04	; 4
     16a:	ad 90       	ld	r10, X+
     16c:	bd 90       	ld	r11, X+
     16e:	cd 90       	ld	r12, X+
     170:	dc 90       	ld	r13, X
     172:	17 97       	sbiw	r26, 0x07	; 7
     174:	ec 80       	ldd	r14, Y+4	; 0x04
     176:	fd 80       	ldd	r15, Y+5	; 0x05
     178:	0e 81       	ldd	r16, Y+6	; 0x06
     17a:	1f 81       	ldd	r17, Y+7	; 0x07
     17c:	91 01       	movw	r18, r2
     17e:	28 1b       	sub	r18, r24
     180:	39 0b       	sbc	r19, r25
     182:	b9 01       	movw	r22, r18
     184:	37 ff       	sbrs	r19, 7
     186:	04 c0       	rjmp	.+8      	; 0x190 <_fpadd_parts+0xb2>
     188:	66 27       	eor	r22, r22
     18a:	77 27       	eor	r23, r23
     18c:	62 1b       	sub	r22, r18
     18e:	73 0b       	sbc	r23, r19
     190:	60 32       	cpi	r22, 0x20	; 32
     192:	71 05       	cpc	r23, r1
     194:	0c f0       	brlt	.+2      	; 0x198 <_fpadd_parts+0xba>
     196:	61 c0       	rjmp	.+194    	; 0x25a <_fpadd_parts+0x17c>
     198:	12 16       	cp	r1, r18
     19a:	13 06       	cpc	r1, r19
     19c:	6c f5       	brge	.+90     	; 0x1f8 <_fpadd_parts+0x11a>
     19e:	37 01       	movw	r6, r14
     1a0:	48 01       	movw	r8, r16
     1a2:	06 2e       	mov	r0, r22
     1a4:	04 c0       	rjmp	.+8      	; 0x1ae <_fpadd_parts+0xd0>
     1a6:	96 94       	lsr	r9
     1a8:	87 94       	ror	r8
     1aa:	77 94       	ror	r7
     1ac:	67 94       	ror	r6
     1ae:	0a 94       	dec	r0
     1b0:	d2 f7       	brpl	.-12     	; 0x1a6 <_fpadd_parts+0xc8>
     1b2:	21 e0       	ldi	r18, 0x01	; 1
     1b4:	30 e0       	ldi	r19, 0x00	; 0
     1b6:	40 e0       	ldi	r20, 0x00	; 0
     1b8:	50 e0       	ldi	r21, 0x00	; 0
     1ba:	04 c0       	rjmp	.+8      	; 0x1c4 <_fpadd_parts+0xe6>
     1bc:	22 0f       	add	r18, r18
     1be:	33 1f       	adc	r19, r19
     1c0:	44 1f       	adc	r20, r20
     1c2:	55 1f       	adc	r21, r21
     1c4:	6a 95       	dec	r22
     1c6:	d2 f7       	brpl	.-12     	; 0x1bc <_fpadd_parts+0xde>
     1c8:	21 50       	subi	r18, 0x01	; 1
     1ca:	30 40       	sbci	r19, 0x00	; 0
     1cc:	40 40       	sbci	r20, 0x00	; 0
     1ce:	50 40       	sbci	r21, 0x00	; 0
     1d0:	2e 21       	and	r18, r14
     1d2:	3f 21       	and	r19, r15
     1d4:	40 23       	and	r20, r16
     1d6:	51 23       	and	r21, r17
     1d8:	21 15       	cp	r18, r1
     1da:	31 05       	cpc	r19, r1
     1dc:	41 05       	cpc	r20, r1
     1de:	51 05       	cpc	r21, r1
     1e0:	21 f0       	breq	.+8      	; 0x1ea <_fpadd_parts+0x10c>
     1e2:	21 e0       	ldi	r18, 0x01	; 1
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	40 e0       	ldi	r20, 0x00	; 0
     1e8:	50 e0       	ldi	r21, 0x00	; 0
     1ea:	79 01       	movw	r14, r18
     1ec:	8a 01       	movw	r16, r20
     1ee:	e6 28       	or	r14, r6
     1f0:	f7 28       	or	r15, r7
     1f2:	08 29       	or	r16, r8
     1f4:	19 29       	or	r17, r9
     1f6:	3c c0       	rjmp	.+120    	; 0x270 <_fpadd_parts+0x192>
     1f8:	23 2b       	or	r18, r19
     1fa:	d1 f1       	breq	.+116    	; 0x270 <_fpadd_parts+0x192>
     1fc:	26 0e       	add	r2, r22
     1fe:	37 1e       	adc	r3, r23
     200:	35 01       	movw	r6, r10
     202:	46 01       	movw	r8, r12
     204:	06 2e       	mov	r0, r22
     206:	04 c0       	rjmp	.+8      	; 0x210 <_fpadd_parts+0x132>
     208:	96 94       	lsr	r9
     20a:	87 94       	ror	r8
     20c:	77 94       	ror	r7
     20e:	67 94       	ror	r6
     210:	0a 94       	dec	r0
     212:	d2 f7       	brpl	.-12     	; 0x208 <_fpadd_parts+0x12a>
     214:	21 e0       	ldi	r18, 0x01	; 1
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	40 e0       	ldi	r20, 0x00	; 0
     21a:	50 e0       	ldi	r21, 0x00	; 0
     21c:	04 c0       	rjmp	.+8      	; 0x226 <_fpadd_parts+0x148>
     21e:	22 0f       	add	r18, r18
     220:	33 1f       	adc	r19, r19
     222:	44 1f       	adc	r20, r20
     224:	55 1f       	adc	r21, r21
     226:	6a 95       	dec	r22
     228:	d2 f7       	brpl	.-12     	; 0x21e <_fpadd_parts+0x140>
     22a:	21 50       	subi	r18, 0x01	; 1
     22c:	30 40       	sbci	r19, 0x00	; 0
     22e:	40 40       	sbci	r20, 0x00	; 0
     230:	50 40       	sbci	r21, 0x00	; 0
     232:	2a 21       	and	r18, r10
     234:	3b 21       	and	r19, r11
     236:	4c 21       	and	r20, r12
     238:	5d 21       	and	r21, r13
     23a:	21 15       	cp	r18, r1
     23c:	31 05       	cpc	r19, r1
     23e:	41 05       	cpc	r20, r1
     240:	51 05       	cpc	r21, r1
     242:	21 f0       	breq	.+8      	; 0x24c <_fpadd_parts+0x16e>
     244:	21 e0       	ldi	r18, 0x01	; 1
     246:	30 e0       	ldi	r19, 0x00	; 0
     248:	40 e0       	ldi	r20, 0x00	; 0
     24a:	50 e0       	ldi	r21, 0x00	; 0
     24c:	59 01       	movw	r10, r18
     24e:	6a 01       	movw	r12, r20
     250:	a6 28       	or	r10, r6
     252:	b7 28       	or	r11, r7
     254:	c8 28       	or	r12, r8
     256:	d9 28       	or	r13, r9
     258:	0b c0       	rjmp	.+22     	; 0x270 <_fpadd_parts+0x192>
     25a:	82 15       	cp	r24, r2
     25c:	93 05       	cpc	r25, r3
     25e:	2c f0       	brlt	.+10     	; 0x26a <_fpadd_parts+0x18c>
     260:	1c 01       	movw	r2, r24
     262:	aa 24       	eor	r10, r10
     264:	bb 24       	eor	r11, r11
     266:	65 01       	movw	r12, r10
     268:	03 c0       	rjmp	.+6      	; 0x270 <_fpadd_parts+0x192>
     26a:	ee 24       	eor	r14, r14
     26c:	ff 24       	eor	r15, r15
     26e:	87 01       	movw	r16, r14
     270:	11 96       	adiw	r26, 0x01	; 1
     272:	9c 91       	ld	r25, X
     274:	d2 01       	movw	r26, r4
     276:	11 96       	adiw	r26, 0x01	; 1
     278:	8c 91       	ld	r24, X
     27a:	98 17       	cp	r25, r24
     27c:	09 f4       	brne	.+2      	; 0x280 <_fpadd_parts+0x1a2>
     27e:	45 c0       	rjmp	.+138    	; 0x30a <_fpadd_parts+0x22c>
     280:	99 23       	and	r25, r25
     282:	39 f0       	breq	.+14     	; 0x292 <_fpadd_parts+0x1b4>
     284:	a8 01       	movw	r20, r16
     286:	97 01       	movw	r18, r14
     288:	2a 19       	sub	r18, r10
     28a:	3b 09       	sbc	r19, r11
     28c:	4c 09       	sbc	r20, r12
     28e:	5d 09       	sbc	r21, r13
     290:	06 c0       	rjmp	.+12     	; 0x29e <_fpadd_parts+0x1c0>
     292:	a6 01       	movw	r20, r12
     294:	95 01       	movw	r18, r10
     296:	2e 19       	sub	r18, r14
     298:	3f 09       	sbc	r19, r15
     29a:	40 0b       	sbc	r20, r16
     29c:	51 0b       	sbc	r21, r17
     29e:	57 fd       	sbrc	r21, 7
     2a0:	08 c0       	rjmp	.+16     	; 0x2b2 <_fpadd_parts+0x1d4>
     2a2:	11 82       	std	Z+1, r1	; 0x01
     2a4:	33 82       	std	Z+3, r3	; 0x03
     2a6:	22 82       	std	Z+2, r2	; 0x02
     2a8:	24 83       	std	Z+4, r18	; 0x04
     2aa:	35 83       	std	Z+5, r19	; 0x05
     2ac:	46 83       	std	Z+6, r20	; 0x06
     2ae:	57 83       	std	Z+7, r21	; 0x07
     2b0:	1d c0       	rjmp	.+58     	; 0x2ec <_fpadd_parts+0x20e>
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	81 83       	std	Z+1, r24	; 0x01
     2b6:	33 82       	std	Z+3, r3	; 0x03
     2b8:	22 82       	std	Z+2, r2	; 0x02
     2ba:	88 27       	eor	r24, r24
     2bc:	99 27       	eor	r25, r25
     2be:	dc 01       	movw	r26, r24
     2c0:	82 1b       	sub	r24, r18
     2c2:	93 0b       	sbc	r25, r19
     2c4:	a4 0b       	sbc	r26, r20
     2c6:	b5 0b       	sbc	r27, r21
     2c8:	84 83       	std	Z+4, r24	; 0x04
     2ca:	95 83       	std	Z+5, r25	; 0x05
     2cc:	a6 83       	std	Z+6, r26	; 0x06
     2ce:	b7 83       	std	Z+7, r27	; 0x07
     2d0:	0d c0       	rjmp	.+26     	; 0x2ec <_fpadd_parts+0x20e>
     2d2:	22 0f       	add	r18, r18
     2d4:	33 1f       	adc	r19, r19
     2d6:	44 1f       	adc	r20, r20
     2d8:	55 1f       	adc	r21, r21
     2da:	24 83       	std	Z+4, r18	; 0x04
     2dc:	35 83       	std	Z+5, r19	; 0x05
     2de:	46 83       	std	Z+6, r20	; 0x06
     2e0:	57 83       	std	Z+7, r21	; 0x07
     2e2:	82 81       	ldd	r24, Z+2	; 0x02
     2e4:	93 81       	ldd	r25, Z+3	; 0x03
     2e6:	01 97       	sbiw	r24, 0x01	; 1
     2e8:	93 83       	std	Z+3, r25	; 0x03
     2ea:	82 83       	std	Z+2, r24	; 0x02
     2ec:	24 81       	ldd	r18, Z+4	; 0x04
     2ee:	35 81       	ldd	r19, Z+5	; 0x05
     2f0:	46 81       	ldd	r20, Z+6	; 0x06
     2f2:	57 81       	ldd	r21, Z+7	; 0x07
     2f4:	da 01       	movw	r26, r20
     2f6:	c9 01       	movw	r24, r18
     2f8:	01 97       	sbiw	r24, 0x01	; 1
     2fa:	a1 09       	sbc	r26, r1
     2fc:	b1 09       	sbc	r27, r1
     2fe:	8f 5f       	subi	r24, 0xFF	; 255
     300:	9f 4f       	sbci	r25, 0xFF	; 255
     302:	af 4f       	sbci	r26, 0xFF	; 255
     304:	bf 43       	sbci	r27, 0x3F	; 63
     306:	28 f3       	brcs	.-54     	; 0x2d2 <_fpadd_parts+0x1f4>
     308:	0b c0       	rjmp	.+22     	; 0x320 <_fpadd_parts+0x242>
     30a:	91 83       	std	Z+1, r25	; 0x01
     30c:	33 82       	std	Z+3, r3	; 0x03
     30e:	22 82       	std	Z+2, r2	; 0x02
     310:	ea 0c       	add	r14, r10
     312:	fb 1c       	adc	r15, r11
     314:	0c 1d       	adc	r16, r12
     316:	1d 1d       	adc	r17, r13
     318:	e4 82       	std	Z+4, r14	; 0x04
     31a:	f5 82       	std	Z+5, r15	; 0x05
     31c:	06 83       	std	Z+6, r16	; 0x06
     31e:	17 83       	std	Z+7, r17	; 0x07
     320:	83 e0       	ldi	r24, 0x03	; 3
     322:	80 83       	st	Z, r24
     324:	24 81       	ldd	r18, Z+4	; 0x04
     326:	35 81       	ldd	r19, Z+5	; 0x05
     328:	46 81       	ldd	r20, Z+6	; 0x06
     32a:	57 81       	ldd	r21, Z+7	; 0x07
     32c:	57 ff       	sbrs	r21, 7
     32e:	1a c0       	rjmp	.+52     	; 0x364 <_fpadd_parts+0x286>
     330:	c9 01       	movw	r24, r18
     332:	aa 27       	eor	r26, r26
     334:	97 fd       	sbrc	r25, 7
     336:	a0 95       	com	r26
     338:	ba 2f       	mov	r27, r26
     33a:	81 70       	andi	r24, 0x01	; 1
     33c:	90 70       	andi	r25, 0x00	; 0
     33e:	a0 70       	andi	r26, 0x00	; 0
     340:	b0 70       	andi	r27, 0x00	; 0
     342:	56 95       	lsr	r21
     344:	47 95       	ror	r20
     346:	37 95       	ror	r19
     348:	27 95       	ror	r18
     34a:	82 2b       	or	r24, r18
     34c:	93 2b       	or	r25, r19
     34e:	a4 2b       	or	r26, r20
     350:	b5 2b       	or	r27, r21
     352:	84 83       	std	Z+4, r24	; 0x04
     354:	95 83       	std	Z+5, r25	; 0x05
     356:	a6 83       	std	Z+6, r26	; 0x06
     358:	b7 83       	std	Z+7, r27	; 0x07
     35a:	82 81       	ldd	r24, Z+2	; 0x02
     35c:	93 81       	ldd	r25, Z+3	; 0x03
     35e:	01 96       	adiw	r24, 0x01	; 1
     360:	93 83       	std	Z+3, r25	; 0x03
     362:	82 83       	std	Z+2, r24	; 0x02
     364:	df 01       	movw	r26, r30
     366:	01 c0       	rjmp	.+2      	; 0x36a <_fpadd_parts+0x28c>
     368:	d2 01       	movw	r26, r4
     36a:	cd 01       	movw	r24, r26
     36c:	cd b7       	in	r28, 0x3d	; 61
     36e:	de b7       	in	r29, 0x3e	; 62
     370:	e2 e1       	ldi	r30, 0x12	; 18
     372:	0c 94 35 17 	jmp	0x2e6a	; 0x2e6a <__epilogue_restores__>

00000376 <__subsf3>:
     376:	a0 e2       	ldi	r26, 0x20	; 32
     378:	b0 e0       	ldi	r27, 0x00	; 0
     37a:	e1 ec       	ldi	r30, 0xC1	; 193
     37c:	f1 e0       	ldi	r31, 0x01	; 1
     37e:	0c 94 25 17 	jmp	0x2e4a	; 0x2e4a <__prologue_saves__+0x18>
     382:	69 83       	std	Y+1, r22	; 0x01
     384:	7a 83       	std	Y+2, r23	; 0x02
     386:	8b 83       	std	Y+3, r24	; 0x03
     388:	9c 83       	std	Y+4, r25	; 0x04
     38a:	2d 83       	std	Y+5, r18	; 0x05
     38c:	3e 83       	std	Y+6, r19	; 0x06
     38e:	4f 83       	std	Y+7, r20	; 0x07
     390:	58 87       	std	Y+8, r21	; 0x08
     392:	e9 e0       	ldi	r30, 0x09	; 9
     394:	ee 2e       	mov	r14, r30
     396:	f1 2c       	mov	r15, r1
     398:	ec 0e       	add	r14, r28
     39a:	fd 1e       	adc	r15, r29
     39c:	ce 01       	movw	r24, r28
     39e:	01 96       	adiw	r24, 0x01	; 1
     3a0:	b7 01       	movw	r22, r14
     3a2:	e5 d2       	rcall	.+1482   	; 0x96e <__unpack_f>
     3a4:	8e 01       	movw	r16, r28
     3a6:	0f 5e       	subi	r16, 0xEF	; 239
     3a8:	1f 4f       	sbci	r17, 0xFF	; 255
     3aa:	ce 01       	movw	r24, r28
     3ac:	05 96       	adiw	r24, 0x05	; 5
     3ae:	b8 01       	movw	r22, r16
     3b0:	de d2       	rcall	.+1468   	; 0x96e <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	8c de       	rcall	.-744    	; 0xde <_fpadd_parts>
     3c6:	fe d1       	rcall	.+1020   	; 0x7c4 <__pack_f>
     3c8:	a0 96       	adiw	r28, 0x20	; 32
     3ca:	e6 e0       	ldi	r30, 0x06	; 6
     3cc:	0c 94 41 17 	jmp	0x2e82	; 0x2e82 <__epilogue_restores__+0x18>

000003d0 <__addsf3>:
     3d0:	a0 e2       	ldi	r26, 0x20	; 32
     3d2:	b0 e0       	ldi	r27, 0x00	; 0
     3d4:	ee ee       	ldi	r30, 0xEE	; 238
     3d6:	f1 e0       	ldi	r31, 0x01	; 1
     3d8:	0c 94 25 17 	jmp	0x2e4a	; 0x2e4a <__prologue_saves__+0x18>
     3dc:	69 83       	std	Y+1, r22	; 0x01
     3de:	7a 83       	std	Y+2, r23	; 0x02
     3e0:	8b 83       	std	Y+3, r24	; 0x03
     3e2:	9c 83       	std	Y+4, r25	; 0x04
     3e4:	2d 83       	std	Y+5, r18	; 0x05
     3e6:	3e 83       	std	Y+6, r19	; 0x06
     3e8:	4f 83       	std	Y+7, r20	; 0x07
     3ea:	58 87       	std	Y+8, r21	; 0x08
     3ec:	f9 e0       	ldi	r31, 0x09	; 9
     3ee:	ef 2e       	mov	r14, r31
     3f0:	f1 2c       	mov	r15, r1
     3f2:	ec 0e       	add	r14, r28
     3f4:	fd 1e       	adc	r15, r29
     3f6:	ce 01       	movw	r24, r28
     3f8:	01 96       	adiw	r24, 0x01	; 1
     3fa:	b7 01       	movw	r22, r14
     3fc:	b8 d2       	rcall	.+1392   	; 0x96e <__unpack_f>
     3fe:	8e 01       	movw	r16, r28
     400:	0f 5e       	subi	r16, 0xEF	; 239
     402:	1f 4f       	sbci	r17, 0xFF	; 255
     404:	ce 01       	movw	r24, r28
     406:	05 96       	adiw	r24, 0x05	; 5
     408:	b8 01       	movw	r22, r16
     40a:	b1 d2       	rcall	.+1378   	; 0x96e <__unpack_f>
     40c:	c7 01       	movw	r24, r14
     40e:	b8 01       	movw	r22, r16
     410:	ae 01       	movw	r20, r28
     412:	47 5e       	subi	r20, 0xE7	; 231
     414:	5f 4f       	sbci	r21, 0xFF	; 255
     416:	63 de       	rcall	.-826    	; 0xde <_fpadd_parts>
     418:	d5 d1       	rcall	.+938    	; 0x7c4 <__pack_f>
     41a:	a0 96       	adiw	r28, 0x20	; 32
     41c:	e6 e0       	ldi	r30, 0x06	; 6
     41e:	0c 94 41 17 	jmp	0x2e82	; 0x2e82 <__epilogue_restores__+0x18>

00000422 <__mulsf3>:
     422:	a0 e2       	ldi	r26, 0x20	; 32
     424:	b0 e0       	ldi	r27, 0x00	; 0
     426:	e7 e1       	ldi	r30, 0x17	; 23
     428:	f2 e0       	ldi	r31, 0x02	; 2
     42a:	0c 94 19 17 	jmp	0x2e32	; 0x2e32 <__prologue_saves__>
     42e:	69 83       	std	Y+1, r22	; 0x01
     430:	7a 83       	std	Y+2, r23	; 0x02
     432:	8b 83       	std	Y+3, r24	; 0x03
     434:	9c 83       	std	Y+4, r25	; 0x04
     436:	2d 83       	std	Y+5, r18	; 0x05
     438:	3e 83       	std	Y+6, r19	; 0x06
     43a:	4f 83       	std	Y+7, r20	; 0x07
     43c:	58 87       	std	Y+8, r21	; 0x08
     43e:	ce 01       	movw	r24, r28
     440:	01 96       	adiw	r24, 0x01	; 1
     442:	be 01       	movw	r22, r28
     444:	67 5f       	subi	r22, 0xF7	; 247
     446:	7f 4f       	sbci	r23, 0xFF	; 255
     448:	92 d2       	rcall	.+1316   	; 0x96e <__unpack_f>
     44a:	ce 01       	movw	r24, r28
     44c:	05 96       	adiw	r24, 0x05	; 5
     44e:	be 01       	movw	r22, r28
     450:	6f 5e       	subi	r22, 0xEF	; 239
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	8c d2       	rcall	.+1304   	; 0x96e <__unpack_f>
     456:	99 85       	ldd	r25, Y+9	; 0x09
     458:	92 30       	cpi	r25, 0x02	; 2
     45a:	88 f0       	brcs	.+34     	; 0x47e <__stack+0x1f>
     45c:	89 89       	ldd	r24, Y+17	; 0x11
     45e:	82 30       	cpi	r24, 0x02	; 2
     460:	c8 f0       	brcs	.+50     	; 0x494 <__stack+0x35>
     462:	94 30       	cpi	r25, 0x04	; 4
     464:	19 f4       	brne	.+6      	; 0x46c <__stack+0xd>
     466:	82 30       	cpi	r24, 0x02	; 2
     468:	51 f4       	brne	.+20     	; 0x47e <__stack+0x1f>
     46a:	04 c0       	rjmp	.+8      	; 0x474 <__stack+0x15>
     46c:	84 30       	cpi	r24, 0x04	; 4
     46e:	29 f4       	brne	.+10     	; 0x47a <__stack+0x1b>
     470:	92 30       	cpi	r25, 0x02	; 2
     472:	81 f4       	brne	.+32     	; 0x494 <__stack+0x35>
     474:	8b ee       	ldi	r24, 0xEB	; 235
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	c6 c0       	rjmp	.+396    	; 0x606 <__stack+0x1a7>
     47a:	92 30       	cpi	r25, 0x02	; 2
     47c:	49 f4       	brne	.+18     	; 0x490 <__stack+0x31>
     47e:	20 e0       	ldi	r18, 0x00	; 0
     480:	9a 85       	ldd	r25, Y+10	; 0x0a
     482:	8a 89       	ldd	r24, Y+18	; 0x12
     484:	98 13       	cpse	r25, r24
     486:	21 e0       	ldi	r18, 0x01	; 1
     488:	2a 87       	std	Y+10, r18	; 0x0a
     48a:	ce 01       	movw	r24, r28
     48c:	09 96       	adiw	r24, 0x09	; 9
     48e:	bb c0       	rjmp	.+374    	; 0x606 <__stack+0x1a7>
     490:	82 30       	cpi	r24, 0x02	; 2
     492:	49 f4       	brne	.+18     	; 0x4a6 <__stack+0x47>
     494:	20 e0       	ldi	r18, 0x00	; 0
     496:	9a 85       	ldd	r25, Y+10	; 0x0a
     498:	8a 89       	ldd	r24, Y+18	; 0x12
     49a:	98 13       	cpse	r25, r24
     49c:	21 e0       	ldi	r18, 0x01	; 1
     49e:	2a 8b       	std	Y+18, r18	; 0x12
     4a0:	ce 01       	movw	r24, r28
     4a2:	41 96       	adiw	r24, 0x11	; 17
     4a4:	b0 c0       	rjmp	.+352    	; 0x606 <__stack+0x1a7>
     4a6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4a8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4aa:	4f 84       	ldd	r4, Y+15	; 0x0f
     4ac:	58 88       	ldd	r5, Y+16	; 0x10
     4ae:	6d 88       	ldd	r6, Y+21	; 0x15
     4b0:	7e 88       	ldd	r7, Y+22	; 0x16
     4b2:	8f 88       	ldd	r8, Y+23	; 0x17
     4b4:	98 8c       	ldd	r9, Y+24	; 0x18
     4b6:	ee 24       	eor	r14, r14
     4b8:	ff 24       	eor	r15, r15
     4ba:	87 01       	movw	r16, r14
     4bc:	aa 24       	eor	r10, r10
     4be:	bb 24       	eor	r11, r11
     4c0:	65 01       	movw	r12, r10
     4c2:	40 e0       	ldi	r20, 0x00	; 0
     4c4:	50 e0       	ldi	r21, 0x00	; 0
     4c6:	60 e0       	ldi	r22, 0x00	; 0
     4c8:	70 e0       	ldi	r23, 0x00	; 0
     4ca:	e0 e0       	ldi	r30, 0x00	; 0
     4cc:	f0 e0       	ldi	r31, 0x00	; 0
     4ce:	c1 01       	movw	r24, r2
     4d0:	81 70       	andi	r24, 0x01	; 1
     4d2:	90 70       	andi	r25, 0x00	; 0
     4d4:	89 2b       	or	r24, r25
     4d6:	e9 f0       	breq	.+58     	; 0x512 <__stack+0xb3>
     4d8:	e6 0c       	add	r14, r6
     4da:	f7 1c       	adc	r15, r7
     4dc:	08 1d       	adc	r16, r8
     4de:	19 1d       	adc	r17, r9
     4e0:	9a 01       	movw	r18, r20
     4e2:	ab 01       	movw	r20, r22
     4e4:	2a 0d       	add	r18, r10
     4e6:	3b 1d       	adc	r19, r11
     4e8:	4c 1d       	adc	r20, r12
     4ea:	5d 1d       	adc	r21, r13
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	a0 e0       	ldi	r26, 0x00	; 0
     4f2:	b0 e0       	ldi	r27, 0x00	; 0
     4f4:	e6 14       	cp	r14, r6
     4f6:	f7 04       	cpc	r15, r7
     4f8:	08 05       	cpc	r16, r8
     4fa:	19 05       	cpc	r17, r9
     4fc:	20 f4       	brcc	.+8      	; 0x506 <__stack+0xa7>
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	a0 e0       	ldi	r26, 0x00	; 0
     504:	b0 e0       	ldi	r27, 0x00	; 0
     506:	ba 01       	movw	r22, r20
     508:	a9 01       	movw	r20, r18
     50a:	48 0f       	add	r20, r24
     50c:	59 1f       	adc	r21, r25
     50e:	6a 1f       	adc	r22, r26
     510:	7b 1f       	adc	r23, r27
     512:	aa 0c       	add	r10, r10
     514:	bb 1c       	adc	r11, r11
     516:	cc 1c       	adc	r12, r12
     518:	dd 1c       	adc	r13, r13
     51a:	97 fe       	sbrs	r9, 7
     51c:	08 c0       	rjmp	.+16     	; 0x52e <__stack+0xcf>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	a8 2a       	or	r10, r24
     528:	b9 2a       	or	r11, r25
     52a:	ca 2a       	or	r12, r26
     52c:	db 2a       	or	r13, r27
     52e:	31 96       	adiw	r30, 0x01	; 1
     530:	e0 32       	cpi	r30, 0x20	; 32
     532:	f1 05       	cpc	r31, r1
     534:	49 f0       	breq	.+18     	; 0x548 <__stack+0xe9>
     536:	66 0c       	add	r6, r6
     538:	77 1c       	adc	r7, r7
     53a:	88 1c       	adc	r8, r8
     53c:	99 1c       	adc	r9, r9
     53e:	56 94       	lsr	r5
     540:	47 94       	ror	r4
     542:	37 94       	ror	r3
     544:	27 94       	ror	r2
     546:	c3 cf       	rjmp	.-122    	; 0x4ce <__stack+0x6f>
     548:	fa 85       	ldd	r31, Y+10	; 0x0a
     54a:	ea 89       	ldd	r30, Y+18	; 0x12
     54c:	2b 89       	ldd	r18, Y+19	; 0x13
     54e:	3c 89       	ldd	r19, Y+20	; 0x14
     550:	8b 85       	ldd	r24, Y+11	; 0x0b
     552:	9c 85       	ldd	r25, Y+12	; 0x0c
     554:	28 0f       	add	r18, r24
     556:	39 1f       	adc	r19, r25
     558:	2e 5f       	subi	r18, 0xFE	; 254
     55a:	3f 4f       	sbci	r19, 0xFF	; 255
     55c:	17 c0       	rjmp	.+46     	; 0x58c <__stack+0x12d>
     55e:	ca 01       	movw	r24, r20
     560:	81 70       	andi	r24, 0x01	; 1
     562:	90 70       	andi	r25, 0x00	; 0
     564:	89 2b       	or	r24, r25
     566:	61 f0       	breq	.+24     	; 0x580 <__stack+0x121>
     568:	16 95       	lsr	r17
     56a:	07 95       	ror	r16
     56c:	f7 94       	ror	r15
     56e:	e7 94       	ror	r14
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	a0 e0       	ldi	r26, 0x00	; 0
     576:	b0 e8       	ldi	r27, 0x80	; 128
     578:	e8 2a       	or	r14, r24
     57a:	f9 2a       	or	r15, r25
     57c:	0a 2b       	or	r16, r26
     57e:	1b 2b       	or	r17, r27
     580:	76 95       	lsr	r23
     582:	67 95       	ror	r22
     584:	57 95       	ror	r21
     586:	47 95       	ror	r20
     588:	2f 5f       	subi	r18, 0xFF	; 255
     58a:	3f 4f       	sbci	r19, 0xFF	; 255
     58c:	77 fd       	sbrc	r23, 7
     58e:	e7 cf       	rjmp	.-50     	; 0x55e <__stack+0xff>
     590:	0c c0       	rjmp	.+24     	; 0x5aa <__stack+0x14b>
     592:	44 0f       	add	r20, r20
     594:	55 1f       	adc	r21, r21
     596:	66 1f       	adc	r22, r22
     598:	77 1f       	adc	r23, r23
     59a:	17 fd       	sbrc	r17, 7
     59c:	41 60       	ori	r20, 0x01	; 1
     59e:	ee 0c       	add	r14, r14
     5a0:	ff 1c       	adc	r15, r15
     5a2:	00 1f       	adc	r16, r16
     5a4:	11 1f       	adc	r17, r17
     5a6:	21 50       	subi	r18, 0x01	; 1
     5a8:	30 40       	sbci	r19, 0x00	; 0
     5aa:	40 30       	cpi	r20, 0x00	; 0
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	59 07       	cpc	r21, r25
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	69 07       	cpc	r22, r25
     5b4:	90 e4       	ldi	r25, 0x40	; 64
     5b6:	79 07       	cpc	r23, r25
     5b8:	60 f3       	brcs	.-40     	; 0x592 <__stack+0x133>
     5ba:	2b 8f       	std	Y+27, r18	; 0x1b
     5bc:	3c 8f       	std	Y+28, r19	; 0x1c
     5be:	db 01       	movw	r26, r22
     5c0:	ca 01       	movw	r24, r20
     5c2:	8f 77       	andi	r24, 0x7F	; 127
     5c4:	90 70       	andi	r25, 0x00	; 0
     5c6:	a0 70       	andi	r26, 0x00	; 0
     5c8:	b0 70       	andi	r27, 0x00	; 0
     5ca:	80 34       	cpi	r24, 0x40	; 64
     5cc:	91 05       	cpc	r25, r1
     5ce:	a1 05       	cpc	r26, r1
     5d0:	b1 05       	cpc	r27, r1
     5d2:	61 f4       	brne	.+24     	; 0x5ec <__stack+0x18d>
     5d4:	47 fd       	sbrc	r20, 7
     5d6:	0a c0       	rjmp	.+20     	; 0x5ec <__stack+0x18d>
     5d8:	e1 14       	cp	r14, r1
     5da:	f1 04       	cpc	r15, r1
     5dc:	01 05       	cpc	r16, r1
     5de:	11 05       	cpc	r17, r1
     5e0:	29 f0       	breq	.+10     	; 0x5ec <__stack+0x18d>
     5e2:	40 5c       	subi	r20, 0xC0	; 192
     5e4:	5f 4f       	sbci	r21, 0xFF	; 255
     5e6:	6f 4f       	sbci	r22, 0xFF	; 255
     5e8:	7f 4f       	sbci	r23, 0xFF	; 255
     5ea:	40 78       	andi	r20, 0x80	; 128
     5ec:	1a 8e       	std	Y+26, r1	; 0x1a
     5ee:	fe 17       	cp	r31, r30
     5f0:	11 f0       	breq	.+4      	; 0x5f6 <__stack+0x197>
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	8a 8f       	std	Y+26, r24	; 0x1a
     5f6:	4d 8f       	std	Y+29, r20	; 0x1d
     5f8:	5e 8f       	std	Y+30, r21	; 0x1e
     5fa:	6f 8f       	std	Y+31, r22	; 0x1f
     5fc:	78 a3       	std	Y+32, r23	; 0x20
     5fe:	83 e0       	ldi	r24, 0x03	; 3
     600:	89 8f       	std	Y+25, r24	; 0x19
     602:	ce 01       	movw	r24, r28
     604:	49 96       	adiw	r24, 0x19	; 25
     606:	de d0       	rcall	.+444    	; 0x7c4 <__pack_f>
     608:	a0 96       	adiw	r28, 0x20	; 32
     60a:	e2 e1       	ldi	r30, 0x12	; 18
     60c:	0c 94 35 17 	jmp	0x2e6a	; 0x2e6a <__epilogue_restores__>

00000610 <__gtsf2>:
     610:	a8 e1       	ldi	r26, 0x18	; 24
     612:	b0 e0       	ldi	r27, 0x00	; 0
     614:	ee e0       	ldi	r30, 0x0E	; 14
     616:	f3 e0       	ldi	r31, 0x03	; 3
     618:	0c 94 25 17 	jmp	0x2e4a	; 0x2e4a <__prologue_saves__+0x18>
     61c:	69 83       	std	Y+1, r22	; 0x01
     61e:	7a 83       	std	Y+2, r23	; 0x02
     620:	8b 83       	std	Y+3, r24	; 0x03
     622:	9c 83       	std	Y+4, r25	; 0x04
     624:	2d 83       	std	Y+5, r18	; 0x05
     626:	3e 83       	std	Y+6, r19	; 0x06
     628:	4f 83       	std	Y+7, r20	; 0x07
     62a:	58 87       	std	Y+8, r21	; 0x08
     62c:	89 e0       	ldi	r24, 0x09	; 9
     62e:	e8 2e       	mov	r14, r24
     630:	f1 2c       	mov	r15, r1
     632:	ec 0e       	add	r14, r28
     634:	fd 1e       	adc	r15, r29
     636:	ce 01       	movw	r24, r28
     638:	01 96       	adiw	r24, 0x01	; 1
     63a:	b7 01       	movw	r22, r14
     63c:	98 d1       	rcall	.+816    	; 0x96e <__unpack_f>
     63e:	8e 01       	movw	r16, r28
     640:	0f 5e       	subi	r16, 0xEF	; 239
     642:	1f 4f       	sbci	r17, 0xFF	; 255
     644:	ce 01       	movw	r24, r28
     646:	05 96       	adiw	r24, 0x05	; 5
     648:	b8 01       	movw	r22, r16
     64a:	91 d1       	rcall	.+802    	; 0x96e <__unpack_f>
     64c:	89 85       	ldd	r24, Y+9	; 0x09
     64e:	82 30       	cpi	r24, 0x02	; 2
     650:	38 f0       	brcs	.+14     	; 0x660 <__gtsf2+0x50>
     652:	89 89       	ldd	r24, Y+17	; 0x11
     654:	82 30       	cpi	r24, 0x02	; 2
     656:	20 f0       	brcs	.+8      	; 0x660 <__gtsf2+0x50>
     658:	c7 01       	movw	r24, r14
     65a:	b8 01       	movw	r22, r16
     65c:	00 d2       	rcall	.+1024   	; 0xa5e <__fpcmp_parts_f>
     65e:	01 c0       	rjmp	.+2      	; 0x662 <__gtsf2+0x52>
     660:	8f ef       	ldi	r24, 0xFF	; 255
     662:	68 96       	adiw	r28, 0x18	; 24
     664:	e6 e0       	ldi	r30, 0x06	; 6
     666:	0c 94 41 17 	jmp	0x2e82	; 0x2e82 <__epilogue_restores__+0x18>

0000066a <__gesf2>:
     66a:	a8 e1       	ldi	r26, 0x18	; 24
     66c:	b0 e0       	ldi	r27, 0x00	; 0
     66e:	eb e3       	ldi	r30, 0x3B	; 59
     670:	f3 e0       	ldi	r31, 0x03	; 3
     672:	0c 94 25 17 	jmp	0x2e4a	; 0x2e4a <__prologue_saves__+0x18>
     676:	69 83       	std	Y+1, r22	; 0x01
     678:	7a 83       	std	Y+2, r23	; 0x02
     67a:	8b 83       	std	Y+3, r24	; 0x03
     67c:	9c 83       	std	Y+4, r25	; 0x04
     67e:	2d 83       	std	Y+5, r18	; 0x05
     680:	3e 83       	std	Y+6, r19	; 0x06
     682:	4f 83       	std	Y+7, r20	; 0x07
     684:	58 87       	std	Y+8, r21	; 0x08
     686:	89 e0       	ldi	r24, 0x09	; 9
     688:	e8 2e       	mov	r14, r24
     68a:	f1 2c       	mov	r15, r1
     68c:	ec 0e       	add	r14, r28
     68e:	fd 1e       	adc	r15, r29
     690:	ce 01       	movw	r24, r28
     692:	01 96       	adiw	r24, 0x01	; 1
     694:	b7 01       	movw	r22, r14
     696:	6b d1       	rcall	.+726    	; 0x96e <__unpack_f>
     698:	8e 01       	movw	r16, r28
     69a:	0f 5e       	subi	r16, 0xEF	; 239
     69c:	1f 4f       	sbci	r17, 0xFF	; 255
     69e:	ce 01       	movw	r24, r28
     6a0:	05 96       	adiw	r24, 0x05	; 5
     6a2:	b8 01       	movw	r22, r16
     6a4:	64 d1       	rcall	.+712    	; 0x96e <__unpack_f>
     6a6:	89 85       	ldd	r24, Y+9	; 0x09
     6a8:	82 30       	cpi	r24, 0x02	; 2
     6aa:	38 f0       	brcs	.+14     	; 0x6ba <__gesf2+0x50>
     6ac:	89 89       	ldd	r24, Y+17	; 0x11
     6ae:	82 30       	cpi	r24, 0x02	; 2
     6b0:	20 f0       	brcs	.+8      	; 0x6ba <__gesf2+0x50>
     6b2:	c7 01       	movw	r24, r14
     6b4:	b8 01       	movw	r22, r16
     6b6:	d3 d1       	rcall	.+934    	; 0xa5e <__fpcmp_parts_f>
     6b8:	01 c0       	rjmp	.+2      	; 0x6bc <__gesf2+0x52>
     6ba:	8f ef       	ldi	r24, 0xFF	; 255
     6bc:	68 96       	adiw	r28, 0x18	; 24
     6be:	e6 e0       	ldi	r30, 0x06	; 6
     6c0:	0c 94 41 17 	jmp	0x2e82	; 0x2e82 <__epilogue_restores__+0x18>

000006c4 <__ltsf2>:
     6c4:	a8 e1       	ldi	r26, 0x18	; 24
     6c6:	b0 e0       	ldi	r27, 0x00	; 0
     6c8:	e8 e6       	ldi	r30, 0x68	; 104
     6ca:	f3 e0       	ldi	r31, 0x03	; 3
     6cc:	0c 94 25 17 	jmp	0x2e4a	; 0x2e4a <__prologue_saves__+0x18>
     6d0:	69 83       	std	Y+1, r22	; 0x01
     6d2:	7a 83       	std	Y+2, r23	; 0x02
     6d4:	8b 83       	std	Y+3, r24	; 0x03
     6d6:	9c 83       	std	Y+4, r25	; 0x04
     6d8:	2d 83       	std	Y+5, r18	; 0x05
     6da:	3e 83       	std	Y+6, r19	; 0x06
     6dc:	4f 83       	std	Y+7, r20	; 0x07
     6de:	58 87       	std	Y+8, r21	; 0x08
     6e0:	89 e0       	ldi	r24, 0x09	; 9
     6e2:	e8 2e       	mov	r14, r24
     6e4:	f1 2c       	mov	r15, r1
     6e6:	ec 0e       	add	r14, r28
     6e8:	fd 1e       	adc	r15, r29
     6ea:	ce 01       	movw	r24, r28
     6ec:	01 96       	adiw	r24, 0x01	; 1
     6ee:	b7 01       	movw	r22, r14
     6f0:	3e d1       	rcall	.+636    	; 0x96e <__unpack_f>
     6f2:	8e 01       	movw	r16, r28
     6f4:	0f 5e       	subi	r16, 0xEF	; 239
     6f6:	1f 4f       	sbci	r17, 0xFF	; 255
     6f8:	ce 01       	movw	r24, r28
     6fa:	05 96       	adiw	r24, 0x05	; 5
     6fc:	b8 01       	movw	r22, r16
     6fe:	37 d1       	rcall	.+622    	; 0x96e <__unpack_f>
     700:	89 85       	ldd	r24, Y+9	; 0x09
     702:	82 30       	cpi	r24, 0x02	; 2
     704:	38 f0       	brcs	.+14     	; 0x714 <__ltsf2+0x50>
     706:	89 89       	ldd	r24, Y+17	; 0x11
     708:	82 30       	cpi	r24, 0x02	; 2
     70a:	20 f0       	brcs	.+8      	; 0x714 <__ltsf2+0x50>
     70c:	c7 01       	movw	r24, r14
     70e:	b8 01       	movw	r22, r16
     710:	a6 d1       	rcall	.+844    	; 0xa5e <__fpcmp_parts_f>
     712:	01 c0       	rjmp	.+2      	; 0x716 <__ltsf2+0x52>
     714:	81 e0       	ldi	r24, 0x01	; 1
     716:	68 96       	adiw	r28, 0x18	; 24
     718:	e6 e0       	ldi	r30, 0x06	; 6
     71a:	0c 94 41 17 	jmp	0x2e82	; 0x2e82 <__epilogue_restores__+0x18>

0000071e <__fixsfsi>:
     71e:	ac e0       	ldi	r26, 0x0C	; 12
     720:	b0 e0       	ldi	r27, 0x00	; 0
     722:	e5 e9       	ldi	r30, 0x95	; 149
     724:	f3 e0       	ldi	r31, 0x03	; 3
     726:	0c 94 29 17 	jmp	0x2e52	; 0x2e52 <__prologue_saves__+0x20>
     72a:	69 83       	std	Y+1, r22	; 0x01
     72c:	7a 83       	std	Y+2, r23	; 0x02
     72e:	8b 83       	std	Y+3, r24	; 0x03
     730:	9c 83       	std	Y+4, r25	; 0x04
     732:	ce 01       	movw	r24, r28
     734:	01 96       	adiw	r24, 0x01	; 1
     736:	be 01       	movw	r22, r28
     738:	6b 5f       	subi	r22, 0xFB	; 251
     73a:	7f 4f       	sbci	r23, 0xFF	; 255
     73c:	18 d1       	rcall	.+560    	; 0x96e <__unpack_f>
     73e:	8d 81       	ldd	r24, Y+5	; 0x05
     740:	82 30       	cpi	r24, 0x02	; 2
     742:	61 f1       	breq	.+88     	; 0x79c <__fixsfsi+0x7e>
     744:	82 30       	cpi	r24, 0x02	; 2
     746:	50 f1       	brcs	.+84     	; 0x79c <__fixsfsi+0x7e>
     748:	84 30       	cpi	r24, 0x04	; 4
     74a:	21 f4       	brne	.+8      	; 0x754 <__fixsfsi+0x36>
     74c:	8e 81       	ldd	r24, Y+6	; 0x06
     74e:	88 23       	and	r24, r24
     750:	51 f1       	breq	.+84     	; 0x7a6 <__fixsfsi+0x88>
     752:	2e c0       	rjmp	.+92     	; 0x7b0 <__fixsfsi+0x92>
     754:	2f 81       	ldd	r18, Y+7	; 0x07
     756:	38 85       	ldd	r19, Y+8	; 0x08
     758:	37 fd       	sbrc	r19, 7
     75a:	20 c0       	rjmp	.+64     	; 0x79c <__fixsfsi+0x7e>
     75c:	6e 81       	ldd	r22, Y+6	; 0x06
     75e:	2f 31       	cpi	r18, 0x1F	; 31
     760:	31 05       	cpc	r19, r1
     762:	1c f0       	brlt	.+6      	; 0x76a <__fixsfsi+0x4c>
     764:	66 23       	and	r22, r22
     766:	f9 f0       	breq	.+62     	; 0x7a6 <__fixsfsi+0x88>
     768:	23 c0       	rjmp	.+70     	; 0x7b0 <__fixsfsi+0x92>
     76a:	8e e1       	ldi	r24, 0x1E	; 30
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	82 1b       	sub	r24, r18
     770:	93 0b       	sbc	r25, r19
     772:	29 85       	ldd	r18, Y+9	; 0x09
     774:	3a 85       	ldd	r19, Y+10	; 0x0a
     776:	4b 85       	ldd	r20, Y+11	; 0x0b
     778:	5c 85       	ldd	r21, Y+12	; 0x0c
     77a:	04 c0       	rjmp	.+8      	; 0x784 <__fixsfsi+0x66>
     77c:	56 95       	lsr	r21
     77e:	47 95       	ror	r20
     780:	37 95       	ror	r19
     782:	27 95       	ror	r18
     784:	8a 95       	dec	r24
     786:	d2 f7       	brpl	.-12     	; 0x77c <__fixsfsi+0x5e>
     788:	66 23       	and	r22, r22
     78a:	b1 f0       	breq	.+44     	; 0x7b8 <__fixsfsi+0x9a>
     78c:	50 95       	com	r21
     78e:	40 95       	com	r20
     790:	30 95       	com	r19
     792:	21 95       	neg	r18
     794:	3f 4f       	sbci	r19, 0xFF	; 255
     796:	4f 4f       	sbci	r20, 0xFF	; 255
     798:	5f 4f       	sbci	r21, 0xFF	; 255
     79a:	0e c0       	rjmp	.+28     	; 0x7b8 <__fixsfsi+0x9a>
     79c:	20 e0       	ldi	r18, 0x00	; 0
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	40 e0       	ldi	r20, 0x00	; 0
     7a2:	50 e0       	ldi	r21, 0x00	; 0
     7a4:	09 c0       	rjmp	.+18     	; 0x7b8 <__fixsfsi+0x9a>
     7a6:	2f ef       	ldi	r18, 0xFF	; 255
     7a8:	3f ef       	ldi	r19, 0xFF	; 255
     7aa:	4f ef       	ldi	r20, 0xFF	; 255
     7ac:	5f e7       	ldi	r21, 0x7F	; 127
     7ae:	04 c0       	rjmp	.+8      	; 0x7b8 <__fixsfsi+0x9a>
     7b0:	20 e0       	ldi	r18, 0x00	; 0
     7b2:	30 e0       	ldi	r19, 0x00	; 0
     7b4:	40 e0       	ldi	r20, 0x00	; 0
     7b6:	50 e8       	ldi	r21, 0x80	; 128
     7b8:	b9 01       	movw	r22, r18
     7ba:	ca 01       	movw	r24, r20
     7bc:	2c 96       	adiw	r28, 0x0c	; 12
     7be:	e2 e0       	ldi	r30, 0x02	; 2
     7c0:	0c 94 45 17 	jmp	0x2e8a	; 0x2e8a <__epilogue_restores__+0x20>

000007c4 <__pack_f>:
     7c4:	df 92       	push	r13
     7c6:	ef 92       	push	r14
     7c8:	ff 92       	push	r15
     7ca:	0f 93       	push	r16
     7cc:	1f 93       	push	r17
     7ce:	fc 01       	movw	r30, r24
     7d0:	e4 80       	ldd	r14, Z+4	; 0x04
     7d2:	f5 80       	ldd	r15, Z+5	; 0x05
     7d4:	06 81       	ldd	r16, Z+6	; 0x06
     7d6:	17 81       	ldd	r17, Z+7	; 0x07
     7d8:	d1 80       	ldd	r13, Z+1	; 0x01
     7da:	80 81       	ld	r24, Z
     7dc:	82 30       	cpi	r24, 0x02	; 2
     7de:	48 f4       	brcc	.+18     	; 0x7f2 <__pack_f+0x2e>
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	a0 e1       	ldi	r26, 0x10	; 16
     7e6:	b0 e0       	ldi	r27, 0x00	; 0
     7e8:	e8 2a       	or	r14, r24
     7ea:	f9 2a       	or	r15, r25
     7ec:	0a 2b       	or	r16, r26
     7ee:	1b 2b       	or	r17, r27
     7f0:	a5 c0       	rjmp	.+330    	; 0x93c <__pack_f+0x178>
     7f2:	84 30       	cpi	r24, 0x04	; 4
     7f4:	09 f4       	brne	.+2      	; 0x7f8 <__pack_f+0x34>
     7f6:	9f c0       	rjmp	.+318    	; 0x936 <__pack_f+0x172>
     7f8:	82 30       	cpi	r24, 0x02	; 2
     7fa:	21 f4       	brne	.+8      	; 0x804 <__pack_f+0x40>
     7fc:	ee 24       	eor	r14, r14
     7fe:	ff 24       	eor	r15, r15
     800:	87 01       	movw	r16, r14
     802:	05 c0       	rjmp	.+10     	; 0x80e <__pack_f+0x4a>
     804:	e1 14       	cp	r14, r1
     806:	f1 04       	cpc	r15, r1
     808:	01 05       	cpc	r16, r1
     80a:	11 05       	cpc	r17, r1
     80c:	19 f4       	brne	.+6      	; 0x814 <__pack_f+0x50>
     80e:	e0 e0       	ldi	r30, 0x00	; 0
     810:	f0 e0       	ldi	r31, 0x00	; 0
     812:	96 c0       	rjmp	.+300    	; 0x940 <__pack_f+0x17c>
     814:	62 81       	ldd	r22, Z+2	; 0x02
     816:	73 81       	ldd	r23, Z+3	; 0x03
     818:	9f ef       	ldi	r25, 0xFF	; 255
     81a:	62 38       	cpi	r22, 0x82	; 130
     81c:	79 07       	cpc	r23, r25
     81e:	0c f0       	brlt	.+2      	; 0x822 <__pack_f+0x5e>
     820:	5b c0       	rjmp	.+182    	; 0x8d8 <__pack_f+0x114>
     822:	22 e8       	ldi	r18, 0x82	; 130
     824:	3f ef       	ldi	r19, 0xFF	; 255
     826:	26 1b       	sub	r18, r22
     828:	37 0b       	sbc	r19, r23
     82a:	2a 31       	cpi	r18, 0x1A	; 26
     82c:	31 05       	cpc	r19, r1
     82e:	2c f0       	brlt	.+10     	; 0x83a <__pack_f+0x76>
     830:	20 e0       	ldi	r18, 0x00	; 0
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	40 e0       	ldi	r20, 0x00	; 0
     836:	50 e0       	ldi	r21, 0x00	; 0
     838:	2a c0       	rjmp	.+84     	; 0x88e <__pack_f+0xca>
     83a:	b8 01       	movw	r22, r16
     83c:	a7 01       	movw	r20, r14
     83e:	02 2e       	mov	r0, r18
     840:	04 c0       	rjmp	.+8      	; 0x84a <__pack_f+0x86>
     842:	76 95       	lsr	r23
     844:	67 95       	ror	r22
     846:	57 95       	ror	r21
     848:	47 95       	ror	r20
     84a:	0a 94       	dec	r0
     84c:	d2 f7       	brpl	.-12     	; 0x842 <__pack_f+0x7e>
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	a0 e0       	ldi	r26, 0x00	; 0
     854:	b0 e0       	ldi	r27, 0x00	; 0
     856:	04 c0       	rjmp	.+8      	; 0x860 <__pack_f+0x9c>
     858:	88 0f       	add	r24, r24
     85a:	99 1f       	adc	r25, r25
     85c:	aa 1f       	adc	r26, r26
     85e:	bb 1f       	adc	r27, r27
     860:	2a 95       	dec	r18
     862:	d2 f7       	brpl	.-12     	; 0x858 <__pack_f+0x94>
     864:	01 97       	sbiw	r24, 0x01	; 1
     866:	a1 09       	sbc	r26, r1
     868:	b1 09       	sbc	r27, r1
     86a:	8e 21       	and	r24, r14
     86c:	9f 21       	and	r25, r15
     86e:	a0 23       	and	r26, r16
     870:	b1 23       	and	r27, r17
     872:	00 97       	sbiw	r24, 0x00	; 0
     874:	a1 05       	cpc	r26, r1
     876:	b1 05       	cpc	r27, r1
     878:	21 f0       	breq	.+8      	; 0x882 <__pack_f+0xbe>
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	a0 e0       	ldi	r26, 0x00	; 0
     880:	b0 e0       	ldi	r27, 0x00	; 0
     882:	9a 01       	movw	r18, r20
     884:	ab 01       	movw	r20, r22
     886:	28 2b       	or	r18, r24
     888:	39 2b       	or	r19, r25
     88a:	4a 2b       	or	r20, r26
     88c:	5b 2b       	or	r21, r27
     88e:	da 01       	movw	r26, r20
     890:	c9 01       	movw	r24, r18
     892:	8f 77       	andi	r24, 0x7F	; 127
     894:	90 70       	andi	r25, 0x00	; 0
     896:	a0 70       	andi	r26, 0x00	; 0
     898:	b0 70       	andi	r27, 0x00	; 0
     89a:	80 34       	cpi	r24, 0x40	; 64
     89c:	91 05       	cpc	r25, r1
     89e:	a1 05       	cpc	r26, r1
     8a0:	b1 05       	cpc	r27, r1
     8a2:	39 f4       	brne	.+14     	; 0x8b2 <__pack_f+0xee>
     8a4:	27 ff       	sbrs	r18, 7
     8a6:	09 c0       	rjmp	.+18     	; 0x8ba <__pack_f+0xf6>
     8a8:	20 5c       	subi	r18, 0xC0	; 192
     8aa:	3f 4f       	sbci	r19, 0xFF	; 255
     8ac:	4f 4f       	sbci	r20, 0xFF	; 255
     8ae:	5f 4f       	sbci	r21, 0xFF	; 255
     8b0:	04 c0       	rjmp	.+8      	; 0x8ba <__pack_f+0xf6>
     8b2:	21 5c       	subi	r18, 0xC1	; 193
     8b4:	3f 4f       	sbci	r19, 0xFF	; 255
     8b6:	4f 4f       	sbci	r20, 0xFF	; 255
     8b8:	5f 4f       	sbci	r21, 0xFF	; 255
     8ba:	e0 e0       	ldi	r30, 0x00	; 0
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	20 30       	cpi	r18, 0x00	; 0
     8c0:	a0 e0       	ldi	r26, 0x00	; 0
     8c2:	3a 07       	cpc	r19, r26
     8c4:	a0 e0       	ldi	r26, 0x00	; 0
     8c6:	4a 07       	cpc	r20, r26
     8c8:	a0 e4       	ldi	r26, 0x40	; 64
     8ca:	5a 07       	cpc	r21, r26
     8cc:	10 f0       	brcs	.+4      	; 0x8d2 <__pack_f+0x10e>
     8ce:	e1 e0       	ldi	r30, 0x01	; 1
     8d0:	f0 e0       	ldi	r31, 0x00	; 0
     8d2:	79 01       	movw	r14, r18
     8d4:	8a 01       	movw	r16, r20
     8d6:	27 c0       	rjmp	.+78     	; 0x926 <__pack_f+0x162>
     8d8:	60 38       	cpi	r22, 0x80	; 128
     8da:	71 05       	cpc	r23, r1
     8dc:	64 f5       	brge	.+88     	; 0x936 <__pack_f+0x172>
     8de:	fb 01       	movw	r30, r22
     8e0:	e1 58       	subi	r30, 0x81	; 129
     8e2:	ff 4f       	sbci	r31, 0xFF	; 255
     8e4:	d8 01       	movw	r26, r16
     8e6:	c7 01       	movw	r24, r14
     8e8:	8f 77       	andi	r24, 0x7F	; 127
     8ea:	90 70       	andi	r25, 0x00	; 0
     8ec:	a0 70       	andi	r26, 0x00	; 0
     8ee:	b0 70       	andi	r27, 0x00	; 0
     8f0:	80 34       	cpi	r24, 0x40	; 64
     8f2:	91 05       	cpc	r25, r1
     8f4:	a1 05       	cpc	r26, r1
     8f6:	b1 05       	cpc	r27, r1
     8f8:	39 f4       	brne	.+14     	; 0x908 <__pack_f+0x144>
     8fa:	e7 fe       	sbrs	r14, 7
     8fc:	0d c0       	rjmp	.+26     	; 0x918 <__pack_f+0x154>
     8fe:	80 e4       	ldi	r24, 0x40	; 64
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	a0 e0       	ldi	r26, 0x00	; 0
     904:	b0 e0       	ldi	r27, 0x00	; 0
     906:	04 c0       	rjmp	.+8      	; 0x910 <__pack_f+0x14c>
     908:	8f e3       	ldi	r24, 0x3F	; 63
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	e8 0e       	add	r14, r24
     912:	f9 1e       	adc	r15, r25
     914:	0a 1f       	adc	r16, r26
     916:	1b 1f       	adc	r17, r27
     918:	17 ff       	sbrs	r17, 7
     91a:	05 c0       	rjmp	.+10     	; 0x926 <__pack_f+0x162>
     91c:	16 95       	lsr	r17
     91e:	07 95       	ror	r16
     920:	f7 94       	ror	r15
     922:	e7 94       	ror	r14
     924:	31 96       	adiw	r30, 0x01	; 1
     926:	87 e0       	ldi	r24, 0x07	; 7
     928:	16 95       	lsr	r17
     92a:	07 95       	ror	r16
     92c:	f7 94       	ror	r15
     92e:	e7 94       	ror	r14
     930:	8a 95       	dec	r24
     932:	d1 f7       	brne	.-12     	; 0x928 <__pack_f+0x164>
     934:	05 c0       	rjmp	.+10     	; 0x940 <__pack_f+0x17c>
     936:	ee 24       	eor	r14, r14
     938:	ff 24       	eor	r15, r15
     93a:	87 01       	movw	r16, r14
     93c:	ef ef       	ldi	r30, 0xFF	; 255
     93e:	f0 e0       	ldi	r31, 0x00	; 0
     940:	6e 2f       	mov	r22, r30
     942:	67 95       	ror	r22
     944:	66 27       	eor	r22, r22
     946:	67 95       	ror	r22
     948:	90 2f       	mov	r25, r16
     94a:	9f 77       	andi	r25, 0x7F	; 127
     94c:	d7 94       	ror	r13
     94e:	dd 24       	eor	r13, r13
     950:	d7 94       	ror	r13
     952:	8e 2f       	mov	r24, r30
     954:	86 95       	lsr	r24
     956:	49 2f       	mov	r20, r25
     958:	46 2b       	or	r20, r22
     95a:	58 2f       	mov	r21, r24
     95c:	5d 29       	or	r21, r13
     95e:	b7 01       	movw	r22, r14
     960:	ca 01       	movw	r24, r20
     962:	1f 91       	pop	r17
     964:	0f 91       	pop	r16
     966:	ff 90       	pop	r15
     968:	ef 90       	pop	r14
     96a:	df 90       	pop	r13
     96c:	08 95       	ret

0000096e <__unpack_f>:
     96e:	fc 01       	movw	r30, r24
     970:	db 01       	movw	r26, r22
     972:	40 81       	ld	r20, Z
     974:	51 81       	ldd	r21, Z+1	; 0x01
     976:	22 81       	ldd	r18, Z+2	; 0x02
     978:	62 2f       	mov	r22, r18
     97a:	6f 77       	andi	r22, 0x7F	; 127
     97c:	70 e0       	ldi	r23, 0x00	; 0
     97e:	22 1f       	adc	r18, r18
     980:	22 27       	eor	r18, r18
     982:	22 1f       	adc	r18, r18
     984:	93 81       	ldd	r25, Z+3	; 0x03
     986:	89 2f       	mov	r24, r25
     988:	88 0f       	add	r24, r24
     98a:	82 2b       	or	r24, r18
     98c:	28 2f       	mov	r18, r24
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	99 1f       	adc	r25, r25
     992:	99 27       	eor	r25, r25
     994:	99 1f       	adc	r25, r25
     996:	11 96       	adiw	r26, 0x01	; 1
     998:	9c 93       	st	X, r25
     99a:	11 97       	sbiw	r26, 0x01	; 1
     99c:	21 15       	cp	r18, r1
     99e:	31 05       	cpc	r19, r1
     9a0:	a9 f5       	brne	.+106    	; 0xa0c <__unpack_f+0x9e>
     9a2:	41 15       	cp	r20, r1
     9a4:	51 05       	cpc	r21, r1
     9a6:	61 05       	cpc	r22, r1
     9a8:	71 05       	cpc	r23, r1
     9aa:	11 f4       	brne	.+4      	; 0x9b0 <__unpack_f+0x42>
     9ac:	82 e0       	ldi	r24, 0x02	; 2
     9ae:	37 c0       	rjmp	.+110    	; 0xa1e <__unpack_f+0xb0>
     9b0:	82 e8       	ldi	r24, 0x82	; 130
     9b2:	9f ef       	ldi	r25, 0xFF	; 255
     9b4:	13 96       	adiw	r26, 0x03	; 3
     9b6:	9c 93       	st	X, r25
     9b8:	8e 93       	st	-X, r24
     9ba:	12 97       	sbiw	r26, 0x02	; 2
     9bc:	9a 01       	movw	r18, r20
     9be:	ab 01       	movw	r20, r22
     9c0:	67 e0       	ldi	r22, 0x07	; 7
     9c2:	22 0f       	add	r18, r18
     9c4:	33 1f       	adc	r19, r19
     9c6:	44 1f       	adc	r20, r20
     9c8:	55 1f       	adc	r21, r21
     9ca:	6a 95       	dec	r22
     9cc:	d1 f7       	brne	.-12     	; 0x9c2 <__unpack_f+0x54>
     9ce:	83 e0       	ldi	r24, 0x03	; 3
     9d0:	8c 93       	st	X, r24
     9d2:	0d c0       	rjmp	.+26     	; 0x9ee <__unpack_f+0x80>
     9d4:	22 0f       	add	r18, r18
     9d6:	33 1f       	adc	r19, r19
     9d8:	44 1f       	adc	r20, r20
     9da:	55 1f       	adc	r21, r21
     9dc:	12 96       	adiw	r26, 0x02	; 2
     9de:	8d 91       	ld	r24, X+
     9e0:	9c 91       	ld	r25, X
     9e2:	13 97       	sbiw	r26, 0x03	; 3
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	13 96       	adiw	r26, 0x03	; 3
     9e8:	9c 93       	st	X, r25
     9ea:	8e 93       	st	-X, r24
     9ec:	12 97       	sbiw	r26, 0x02	; 2
     9ee:	20 30       	cpi	r18, 0x00	; 0
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	38 07       	cpc	r19, r24
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	48 07       	cpc	r20, r24
     9f8:	80 e4       	ldi	r24, 0x40	; 64
     9fa:	58 07       	cpc	r21, r24
     9fc:	58 f3       	brcs	.-42     	; 0x9d4 <__unpack_f+0x66>
     9fe:	14 96       	adiw	r26, 0x04	; 4
     a00:	2d 93       	st	X+, r18
     a02:	3d 93       	st	X+, r19
     a04:	4d 93       	st	X+, r20
     a06:	5c 93       	st	X, r21
     a08:	17 97       	sbiw	r26, 0x07	; 7
     a0a:	08 95       	ret
     a0c:	2f 3f       	cpi	r18, 0xFF	; 255
     a0e:	31 05       	cpc	r19, r1
     a10:	79 f4       	brne	.+30     	; 0xa30 <__unpack_f+0xc2>
     a12:	41 15       	cp	r20, r1
     a14:	51 05       	cpc	r21, r1
     a16:	61 05       	cpc	r22, r1
     a18:	71 05       	cpc	r23, r1
     a1a:	19 f4       	brne	.+6      	; 0xa22 <__unpack_f+0xb4>
     a1c:	84 e0       	ldi	r24, 0x04	; 4
     a1e:	8c 93       	st	X, r24
     a20:	08 95       	ret
     a22:	64 ff       	sbrs	r22, 4
     a24:	03 c0       	rjmp	.+6      	; 0xa2c <__unpack_f+0xbe>
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	8c 93       	st	X, r24
     a2a:	12 c0       	rjmp	.+36     	; 0xa50 <__unpack_f+0xe2>
     a2c:	1c 92       	st	X, r1
     a2e:	10 c0       	rjmp	.+32     	; 0xa50 <__unpack_f+0xe2>
     a30:	2f 57       	subi	r18, 0x7F	; 127
     a32:	30 40       	sbci	r19, 0x00	; 0
     a34:	13 96       	adiw	r26, 0x03	; 3
     a36:	3c 93       	st	X, r19
     a38:	2e 93       	st	-X, r18
     a3a:	12 97       	sbiw	r26, 0x02	; 2
     a3c:	83 e0       	ldi	r24, 0x03	; 3
     a3e:	8c 93       	st	X, r24
     a40:	87 e0       	ldi	r24, 0x07	; 7
     a42:	44 0f       	add	r20, r20
     a44:	55 1f       	adc	r21, r21
     a46:	66 1f       	adc	r22, r22
     a48:	77 1f       	adc	r23, r23
     a4a:	8a 95       	dec	r24
     a4c:	d1 f7       	brne	.-12     	; 0xa42 <__unpack_f+0xd4>
     a4e:	70 64       	ori	r23, 0x40	; 64
     a50:	14 96       	adiw	r26, 0x04	; 4
     a52:	4d 93       	st	X+, r20
     a54:	5d 93       	st	X+, r21
     a56:	6d 93       	st	X+, r22
     a58:	7c 93       	st	X, r23
     a5a:	17 97       	sbiw	r26, 0x07	; 7
     a5c:	08 95       	ret

00000a5e <__fpcmp_parts_f>:
     a5e:	1f 93       	push	r17
     a60:	dc 01       	movw	r26, r24
     a62:	fb 01       	movw	r30, r22
     a64:	9c 91       	ld	r25, X
     a66:	92 30       	cpi	r25, 0x02	; 2
     a68:	08 f4       	brcc	.+2      	; 0xa6c <__fpcmp_parts_f+0xe>
     a6a:	47 c0       	rjmp	.+142    	; 0xafa <__fpcmp_parts_f+0x9c>
     a6c:	80 81       	ld	r24, Z
     a6e:	82 30       	cpi	r24, 0x02	; 2
     a70:	08 f4       	brcc	.+2      	; 0xa74 <__fpcmp_parts_f+0x16>
     a72:	43 c0       	rjmp	.+134    	; 0xafa <__fpcmp_parts_f+0x9c>
     a74:	94 30       	cpi	r25, 0x04	; 4
     a76:	51 f4       	brne	.+20     	; 0xa8c <__fpcmp_parts_f+0x2e>
     a78:	11 96       	adiw	r26, 0x01	; 1
     a7a:	1c 91       	ld	r17, X
     a7c:	84 30       	cpi	r24, 0x04	; 4
     a7e:	99 f5       	brne	.+102    	; 0xae6 <__fpcmp_parts_f+0x88>
     a80:	81 81       	ldd	r24, Z+1	; 0x01
     a82:	68 2f       	mov	r22, r24
     a84:	70 e0       	ldi	r23, 0x00	; 0
     a86:	61 1b       	sub	r22, r17
     a88:	71 09       	sbc	r23, r1
     a8a:	3f c0       	rjmp	.+126    	; 0xb0a <__fpcmp_parts_f+0xac>
     a8c:	84 30       	cpi	r24, 0x04	; 4
     a8e:	21 f0       	breq	.+8      	; 0xa98 <__fpcmp_parts_f+0x3a>
     a90:	92 30       	cpi	r25, 0x02	; 2
     a92:	31 f4       	brne	.+12     	; 0xaa0 <__fpcmp_parts_f+0x42>
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	b9 f1       	breq	.+110    	; 0xb06 <__fpcmp_parts_f+0xa8>
     a98:	81 81       	ldd	r24, Z+1	; 0x01
     a9a:	88 23       	and	r24, r24
     a9c:	89 f1       	breq	.+98     	; 0xb00 <__fpcmp_parts_f+0xa2>
     a9e:	2d c0       	rjmp	.+90     	; 0xafa <__fpcmp_parts_f+0x9c>
     aa0:	11 96       	adiw	r26, 0x01	; 1
     aa2:	1c 91       	ld	r17, X
     aa4:	11 97       	sbiw	r26, 0x01	; 1
     aa6:	82 30       	cpi	r24, 0x02	; 2
     aa8:	f1 f0       	breq	.+60     	; 0xae6 <__fpcmp_parts_f+0x88>
     aaa:	81 81       	ldd	r24, Z+1	; 0x01
     aac:	18 17       	cp	r17, r24
     aae:	d9 f4       	brne	.+54     	; 0xae6 <__fpcmp_parts_f+0x88>
     ab0:	12 96       	adiw	r26, 0x02	; 2
     ab2:	2d 91       	ld	r18, X+
     ab4:	3c 91       	ld	r19, X
     ab6:	13 97       	sbiw	r26, 0x03	; 3
     ab8:	82 81       	ldd	r24, Z+2	; 0x02
     aba:	93 81       	ldd	r25, Z+3	; 0x03
     abc:	82 17       	cp	r24, r18
     abe:	93 07       	cpc	r25, r19
     ac0:	94 f0       	brlt	.+36     	; 0xae6 <__fpcmp_parts_f+0x88>
     ac2:	28 17       	cp	r18, r24
     ac4:	39 07       	cpc	r19, r25
     ac6:	bc f0       	brlt	.+46     	; 0xaf6 <__fpcmp_parts_f+0x98>
     ac8:	14 96       	adiw	r26, 0x04	; 4
     aca:	8d 91       	ld	r24, X+
     acc:	9d 91       	ld	r25, X+
     ace:	0d 90       	ld	r0, X+
     ad0:	bc 91       	ld	r27, X
     ad2:	a0 2d       	mov	r26, r0
     ad4:	24 81       	ldd	r18, Z+4	; 0x04
     ad6:	35 81       	ldd	r19, Z+5	; 0x05
     ad8:	46 81       	ldd	r20, Z+6	; 0x06
     ada:	57 81       	ldd	r21, Z+7	; 0x07
     adc:	28 17       	cp	r18, r24
     ade:	39 07       	cpc	r19, r25
     ae0:	4a 07       	cpc	r20, r26
     ae2:	5b 07       	cpc	r21, r27
     ae4:	18 f4       	brcc	.+6      	; 0xaec <__fpcmp_parts_f+0x8e>
     ae6:	11 23       	and	r17, r17
     ae8:	41 f0       	breq	.+16     	; 0xafa <__fpcmp_parts_f+0x9c>
     aea:	0a c0       	rjmp	.+20     	; 0xb00 <__fpcmp_parts_f+0xa2>
     aec:	82 17       	cp	r24, r18
     aee:	93 07       	cpc	r25, r19
     af0:	a4 07       	cpc	r26, r20
     af2:	b5 07       	cpc	r27, r21
     af4:	40 f4       	brcc	.+16     	; 0xb06 <__fpcmp_parts_f+0xa8>
     af6:	11 23       	and	r17, r17
     af8:	19 f0       	breq	.+6      	; 0xb00 <__fpcmp_parts_f+0xa2>
     afa:	61 e0       	ldi	r22, 0x01	; 1
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	05 c0       	rjmp	.+10     	; 0xb0a <__fpcmp_parts_f+0xac>
     b00:	6f ef       	ldi	r22, 0xFF	; 255
     b02:	7f ef       	ldi	r23, 0xFF	; 255
     b04:	02 c0       	rjmp	.+4      	; 0xb0a <__fpcmp_parts_f+0xac>
     b06:	60 e0       	ldi	r22, 0x00	; 0
     b08:	70 e0       	ldi	r23, 0x00	; 0
     b0a:	cb 01       	movw	r24, r22
     b0c:	1f 91       	pop	r17
     b0e:	08 95       	ret

00000b10 <main>:

void SendPW_UART( uint8 PW[] );


int main(void)
{
     b10:	0f 93       	push	r16
     b12:	1f 93       	push	r17
     b14:	df 93       	push	r29
     b16:	cf 93       	push	r28
     b18:	cd b7       	in	r28, 0x3d	; 61
     b1a:	de b7       	in	r29, 0x3e	; 62
     b1c:	c8 5b       	subi	r28, 0xB8	; 184
     b1e:	d0 40       	sbci	r29, 0x00	; 0
     b20:	0f b6       	in	r0, 0x3f	; 63
     b22:	f8 94       	cli
     b24:	de bf       	out	0x3e, r29	; 62
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	cd bf       	out	0x3d, r28	; 61
	uint8 confirm [4];
	uint8 command;
	volatile uint8 checkPW_Flag;


	LCD_init();
     b2a:	0e 94 b3 10 	call	0x2166	; 0x2166 <LCD_init>
    LCD_clearScreen();
     b2e:	0e 94 43 15 	call	0x2a86	; 0x2a86 <LCD_clearScreen>

	UART_Config UConfig = {ASYNCH,ENABLED_EVEN,BIT_1};
     b32:	ce 01       	movw	r24, r28
     b34:	8a 55       	subi	r24, 0x5A	; 90
     b36:	9f 4f       	sbci	r25, 0xFF	; 255
     b38:	c1 55       	subi	r28, 0x51	; 81
     b3a:	df 4f       	sbci	r29, 0xFF	; 255
     b3c:	99 83       	std	Y+1, r25	; 0x01
     b3e:	88 83       	st	Y, r24
     b40:	cf 5a       	subi	r28, 0xAF	; 175
     b42:	d0 40       	sbci	r29, 0x00	; 0
     b44:	89 ef       	ldi	r24, 0xF9	; 249
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	cf 54       	subi	r28, 0x4F	; 79
     b4a:	df 4f       	sbci	r29, 0xFF	; 255
     b4c:	99 83       	std	Y+1, r25	; 0x01
     b4e:	88 83       	st	Y, r24
     b50:	c1 5b       	subi	r28, 0xB1	; 177
     b52:	d0 40       	sbci	r29, 0x00	; 0
     b54:	93 e0       	ldi	r25, 0x03	; 3
     b56:	cd 54       	subi	r28, 0x4D	; 77
     b58:	df 4f       	sbci	r29, 0xFF	; 255
     b5a:	98 83       	st	Y, r25
     b5c:	c3 5b       	subi	r28, 0xB3	; 179
     b5e:	d0 40       	sbci	r29, 0x00	; 0
     b60:	cf 54       	subi	r28, 0x4F	; 79
     b62:	df 4f       	sbci	r29, 0xFF	; 255
     b64:	e8 81       	ld	r30, Y
     b66:	f9 81       	ldd	r31, Y+1	; 0x01
     b68:	c1 5b       	subi	r28, 0xB1	; 177
     b6a:	d0 40       	sbci	r29, 0x00	; 0
     b6c:	00 80       	ld	r0, Z
     b6e:	cf 54       	subi	r28, 0x4F	; 79
     b70:	df 4f       	sbci	r29, 0xFF	; 255
     b72:	88 81       	ld	r24, Y
     b74:	99 81       	ldd	r25, Y+1	; 0x01
     b76:	c1 5b       	subi	r28, 0xB1	; 177
     b78:	d0 40       	sbci	r29, 0x00	; 0
     b7a:	01 96       	adiw	r24, 0x01	; 1
     b7c:	cf 54       	subi	r28, 0x4F	; 79
     b7e:	df 4f       	sbci	r29, 0xFF	; 255
     b80:	99 83       	std	Y+1, r25	; 0x01
     b82:	88 83       	st	Y, r24
     b84:	c1 5b       	subi	r28, 0xB1	; 177
     b86:	d0 40       	sbci	r29, 0x00	; 0
     b88:	c1 55       	subi	r28, 0x51	; 81
     b8a:	df 4f       	sbci	r29, 0xFF	; 255
     b8c:	e8 81       	ld	r30, Y
     b8e:	f9 81       	ldd	r31, Y+1	; 0x01
     b90:	cf 5a       	subi	r28, 0xAF	; 175
     b92:	d0 40       	sbci	r29, 0x00	; 0
     b94:	00 82       	st	Z, r0
     b96:	c1 55       	subi	r28, 0x51	; 81
     b98:	df 4f       	sbci	r29, 0xFF	; 255
     b9a:	88 81       	ld	r24, Y
     b9c:	99 81       	ldd	r25, Y+1	; 0x01
     b9e:	cf 5a       	subi	r28, 0xAF	; 175
     ba0:	d0 40       	sbci	r29, 0x00	; 0
     ba2:	01 96       	adiw	r24, 0x01	; 1
     ba4:	c1 55       	subi	r28, 0x51	; 81
     ba6:	df 4f       	sbci	r29, 0xFF	; 255
     ba8:	99 83       	std	Y+1, r25	; 0x01
     baa:	88 83       	st	Y, r24
     bac:	cf 5a       	subi	r28, 0xAF	; 175
     bae:	d0 40       	sbci	r29, 0x00	; 0
     bb0:	cd 54       	subi	r28, 0x4D	; 77
     bb2:	df 4f       	sbci	r29, 0xFF	; 255
     bb4:	98 81       	ld	r25, Y
     bb6:	c3 5b       	subi	r28, 0xB3	; 179
     bb8:	d0 40       	sbci	r29, 0x00	; 0
     bba:	91 50       	subi	r25, 0x01	; 1
     bbc:	cd 54       	subi	r28, 0x4D	; 77
     bbe:	df 4f       	sbci	r29, 0xFF	; 255
     bc0:	98 83       	st	Y, r25
     bc2:	c3 5b       	subi	r28, 0xB3	; 179
     bc4:	d0 40       	sbci	r29, 0x00	; 0
     bc6:	cd 54       	subi	r28, 0x4D	; 77
     bc8:	df 4f       	sbci	r29, 0xFF	; 255
     bca:	e8 81       	ld	r30, Y
     bcc:	c3 5b       	subi	r28, 0xB3	; 179
     bce:	d0 40       	sbci	r29, 0x00	; 0
     bd0:	ee 23       	and	r30, r30
     bd2:	31 f6       	brne	.-116    	; 0xb60 <main+0x50>
	UART_init(&UConfig);
     bd4:	ce 01       	movw	r24, r28
     bd6:	8a 55       	subi	r24, 0x5A	; 90
     bd8:	9f 4f       	sbci	r25, 0xFF	; 255
     bda:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <UART_init>

	TimerConfig T1_Configuration={CTC,F_CPU_1024,0,7812};  // TIMER1 CONFIGURATIONS
     bde:	ce 01       	movw	r24, r28
     be0:	87 55       	subi	r24, 0x57	; 87
     be2:	9f 4f       	sbci	r25, 0xFF	; 255
     be4:	cc 54       	subi	r28, 0x4C	; 76
     be6:	df 4f       	sbci	r29, 0xFF	; 255
     be8:	99 83       	std	Y+1, r25	; 0x01
     bea:	88 83       	st	Y, r24
     bec:	c4 5b       	subi	r28, 0xB4	; 180
     bee:	d0 40       	sbci	r29, 0x00	; 0
     bf0:	83 ef       	ldi	r24, 0xF3	; 243
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	ca 54       	subi	r28, 0x4A	; 74
     bf6:	df 4f       	sbci	r29, 0xFF	; 255
     bf8:	99 83       	std	Y+1, r25	; 0x01
     bfa:	88 83       	st	Y, r24
     bfc:	c6 5b       	subi	r28, 0xB6	; 182
     bfe:	d0 40       	sbci	r29, 0x00	; 0
     c00:	96 e0       	ldi	r25, 0x06	; 6
     c02:	c8 54       	subi	r28, 0x48	; 72
     c04:	df 4f       	sbci	r29, 0xFF	; 255
     c06:	98 83       	st	Y, r25
     c08:	c8 5b       	subi	r28, 0xB8	; 184
     c0a:	d0 40       	sbci	r29, 0x00	; 0
     c0c:	ca 54       	subi	r28, 0x4A	; 74
     c0e:	df 4f       	sbci	r29, 0xFF	; 255
     c10:	e8 81       	ld	r30, Y
     c12:	f9 81       	ldd	r31, Y+1	; 0x01
     c14:	c6 5b       	subi	r28, 0xB6	; 182
     c16:	d0 40       	sbci	r29, 0x00	; 0
     c18:	00 80       	ld	r0, Z
     c1a:	ca 54       	subi	r28, 0x4A	; 74
     c1c:	df 4f       	sbci	r29, 0xFF	; 255
     c1e:	88 81       	ld	r24, Y
     c20:	99 81       	ldd	r25, Y+1	; 0x01
     c22:	c6 5b       	subi	r28, 0xB6	; 182
     c24:	d0 40       	sbci	r29, 0x00	; 0
     c26:	01 96       	adiw	r24, 0x01	; 1
     c28:	ca 54       	subi	r28, 0x4A	; 74
     c2a:	df 4f       	sbci	r29, 0xFF	; 255
     c2c:	99 83       	std	Y+1, r25	; 0x01
     c2e:	88 83       	st	Y, r24
     c30:	c6 5b       	subi	r28, 0xB6	; 182
     c32:	d0 40       	sbci	r29, 0x00	; 0
     c34:	cc 54       	subi	r28, 0x4C	; 76
     c36:	df 4f       	sbci	r29, 0xFF	; 255
     c38:	e8 81       	ld	r30, Y
     c3a:	f9 81       	ldd	r31, Y+1	; 0x01
     c3c:	c4 5b       	subi	r28, 0xB4	; 180
     c3e:	d0 40       	sbci	r29, 0x00	; 0
     c40:	00 82       	st	Z, r0
     c42:	cc 54       	subi	r28, 0x4C	; 76
     c44:	df 4f       	sbci	r29, 0xFF	; 255
     c46:	88 81       	ld	r24, Y
     c48:	99 81       	ldd	r25, Y+1	; 0x01
     c4a:	c4 5b       	subi	r28, 0xB4	; 180
     c4c:	d0 40       	sbci	r29, 0x00	; 0
     c4e:	01 96       	adiw	r24, 0x01	; 1
     c50:	cc 54       	subi	r28, 0x4C	; 76
     c52:	df 4f       	sbci	r29, 0xFF	; 255
     c54:	99 83       	std	Y+1, r25	; 0x01
     c56:	88 83       	st	Y, r24
     c58:	c4 5b       	subi	r28, 0xB4	; 180
     c5a:	d0 40       	sbci	r29, 0x00	; 0
     c5c:	c8 54       	subi	r28, 0x48	; 72
     c5e:	df 4f       	sbci	r29, 0xFF	; 255
     c60:	98 81       	ld	r25, Y
     c62:	c8 5b       	subi	r28, 0xB8	; 184
     c64:	d0 40       	sbci	r29, 0x00	; 0
     c66:	91 50       	subi	r25, 0x01	; 1
     c68:	c8 54       	subi	r28, 0x48	; 72
     c6a:	df 4f       	sbci	r29, 0xFF	; 255
     c6c:	98 83       	st	Y, r25
     c6e:	c8 5b       	subi	r28, 0xB8	; 184
     c70:	d0 40       	sbci	r29, 0x00	; 0
     c72:	c8 54       	subi	r28, 0x48	; 72
     c74:	df 4f       	sbci	r29, 0xFF	; 255
     c76:	e8 81       	ld	r30, Y
     c78:	c8 5b       	subi	r28, 0xB8	; 184
     c7a:	d0 40       	sbci	r29, 0x00	; 0
     c7c:	ee 23       	and	r30, r30
     c7e:	31 f6       	brne	.-116    	; 0xc0c <main+0xfc>
	Timer1_init(&T1_Configuration); 			 //Initialize timer1
     c80:	ce 01       	movw	r24, r28
     c82:	87 55       	subi	r24, 0x57	; 87
     c84:	9f 4f       	sbci	r25, 0xFF	; 255
     c86:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <Timer1_init>
	SREG |= (1<<7);
     c8a:	af e5       	ldi	r26, 0x5F	; 95
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	ef e5       	ldi	r30, 0x5F	; 95
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	80 68       	ori	r24, 0x80	; 128
     c96:	8c 93       	st	X, r24
 /////////////////////////////////////*  PHASE 1	*/////////////////////////////////////////////

        do{
        						//  ENTERING PASSWORD //

        LCD_clearScreen();
     c98:	0e 94 43 15 	call	0x2a86	; 0x2a86 <LCD_clearScreen>
    	LCD_displayString("Enter Password");
     c9c:	80 e6       	ldi	r24, 0x60	; 96
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	0e 94 c3 14 	call	0x2986	; 0x2986 <LCD_displayString>
    	EnterPW( password );            					 // SEND ADDRESS OF password[4] TO EnterPW()
     ca4:	ce 01       	movw	r24, r28
     ca6:	83 56       	subi	r24, 0x63	; 99
     ca8:	9f 4f       	sbci	r25, 0xFF	; 255
     caa:	a9 d7       	rcall	.+3922   	; 0x1bfe <EnterPW>
     cac:	fe 01       	movw	r30, r28
     cae:	e9 56       	subi	r30, 0x69	; 105
     cb0:	ff 4f       	sbci	r31, 0xFF	; 255
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	a2 e0       	ldi	r26, 0x02	; 2
     cb8:	b3 e4       	ldi	r27, 0x43	; 67
     cba:	80 83       	st	Z, r24
     cbc:	91 83       	std	Z+1, r25	; 0x01
     cbe:	a2 83       	std	Z+2, r26	; 0x02
     cc0:	b3 83       	std	Z+3, r27	; 0x03
     cc2:	8e 01       	movw	r16, r28
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cc4:	0d 56       	subi	r16, 0x6D	; 109
     cc6:	1f 4f       	sbci	r17, 0xFF	; 255
     cc8:	fe 01       	movw	r30, r28
     cca:	e9 56       	subi	r30, 0x69	; 105
     ccc:	ff 4f       	sbci	r31, 0xFF	; 255
     cce:	60 81       	ld	r22, Z
     cd0:	71 81       	ldd	r23, Z+1	; 0x01
     cd2:	82 81       	ldd	r24, Z+2	; 0x02
     cd4:	93 81       	ldd	r25, Z+3	; 0x03
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	4a e7       	ldi	r20, 0x7A	; 122
     cdc:	53 e4       	ldi	r21, 0x43	; 67
     cde:	a1 db       	rcall	.-2238   	; 0x422 <__mulsf3>
     ce0:	dc 01       	movw	r26, r24
     ce2:	cb 01       	movw	r24, r22
     ce4:	f8 01       	movw	r30, r16
     ce6:	80 83       	st	Z, r24
     ce8:	91 83       	std	Z+1, r25	; 0x01
     cea:	a2 83       	std	Z+2, r26	; 0x02
     cec:	b3 83       	std	Z+3, r27	; 0x03
     cee:	fe 01       	movw	r30, r28
     cf0:	ed 56       	subi	r30, 0x6D	; 109
	if (__tmp < 1.0)
     cf2:	ff 4f       	sbci	r31, 0xFF	; 255
     cf4:	60 81       	ld	r22, Z
     cf6:	71 81       	ldd	r23, Z+1	; 0x01
     cf8:	82 81       	ldd	r24, Z+2	; 0x02
     cfa:	93 81       	ldd	r25, Z+3	; 0x03
     cfc:	20 e0       	ldi	r18, 0x00	; 0
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	40 e8       	ldi	r20, 0x80	; 128
     d02:	5f e3       	ldi	r21, 0x3F	; 63
     d04:	df dc       	rcall	.-1602   	; 0x6c4 <__ltsf2>
     d06:	88 23       	and	r24, r24
     d08:	44 f4       	brge	.+16     	; 0xd1a <main+0x20a>
     d0a:	fe 01       	movw	r30, r28
     d0c:	ef 56       	subi	r30, 0x6F	; 111
     d0e:	ff 4f       	sbci	r31, 0xFF	; 255
		__ticks = 1;
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	91 83       	std	Z+1, r25	; 0x01
     d16:	80 83       	st	Z, r24
     d18:	60 c0       	rjmp	.+192    	; 0xdda <main+0x2ca>
     d1a:	fe 01       	movw	r30, r28
     d1c:	ed 56       	subi	r30, 0x6D	; 109
     d1e:	ff 4f       	sbci	r31, 0xFF	; 255
	else if (__tmp > 65535)
     d20:	60 81       	ld	r22, Z
     d22:	71 81       	ldd	r23, Z+1	; 0x01
     d24:	82 81       	ldd	r24, Z+2	; 0x02
     d26:	93 81       	ldd	r25, Z+3	; 0x03
     d28:	20 e0       	ldi	r18, 0x00	; 0
     d2a:	3f ef       	ldi	r19, 0xFF	; 255
     d2c:	4f e7       	ldi	r20, 0x7F	; 127
     d2e:	57 e4       	ldi	r21, 0x47	; 71
     d30:	6f dc       	rcall	.-1826   	; 0x610 <__gtsf2>
     d32:	18 16       	cp	r1, r24
     d34:	0c f0       	brlt	.+2      	; 0xd38 <main+0x228>
     d36:	41 c0       	rjmp	.+130    	; 0xdba <main+0x2aa>
     d38:	fe 01       	movw	r30, r28
     d3a:	e9 56       	subi	r30, 0x69	; 105
     d3c:	ff 4f       	sbci	r31, 0xFF	; 255
     d3e:	60 81       	ld	r22, Z
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d40:	71 81       	ldd	r23, Z+1	; 0x01
     d42:	82 81       	ldd	r24, Z+2	; 0x02
     d44:	93 81       	ldd	r25, Z+3	; 0x03
     d46:	20 e0       	ldi	r18, 0x00	; 0
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	40 e2       	ldi	r20, 0x20	; 32
     d4c:	51 e4       	ldi	r21, 0x41	; 65
     d4e:	69 db       	rcall	.-2350   	; 0x422 <__mulsf3>
     d50:	dc 01       	movw	r26, r24
     d52:	cb 01       	movw	r24, r22
     d54:	8e 01       	movw	r16, r28
     d56:	0f 56       	subi	r16, 0x6F	; 111
     d58:	1f 4f       	sbci	r17, 0xFF	; 255
     d5a:	bc 01       	movw	r22, r24
     d5c:	cd 01       	movw	r24, r26
     d5e:	97 d9       	rcall	.-3282   	; 0x8e <__fixunssfsi>
     d60:	dc 01       	movw	r26, r24
     d62:	cb 01       	movw	r24, r22
     d64:	f8 01       	movw	r30, r16
     d66:	91 83       	std	Z+1, r25	; 0x01
     d68:	80 83       	st	Z, r24
     d6a:	1f c0       	rjmp	.+62     	; 0xdaa <main+0x29a>
     d6c:	fe 01       	movw	r30, r28
     d6e:	e1 57       	subi	r30, 0x71	; 113
     d70:	ff 4f       	sbci	r31, 0xFF	; 255
     d72:	89 e1       	ldi	r24, 0x19	; 25
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	91 83       	std	Z+1, r25	; 0x01
     d78:	80 83       	st	Z, r24
     d7a:	fe 01       	movw	r30, r28
     d7c:	e1 57       	subi	r30, 0x71	; 113
     d7e:	ff 4f       	sbci	r31, 0xFF	; 255
     d80:	80 81       	ld	r24, Z
     d82:	91 81       	ldd	r25, Z+1	; 0x01
     d84:	01 97       	sbiw	r24, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d86:	f1 f7       	brne	.-4      	; 0xd84 <main+0x274>
     d88:	fe 01       	movw	r30, r28
     d8a:	e1 57       	subi	r30, 0x71	; 113
     d8c:	ff 4f       	sbci	r31, 0xFF	; 255
     d8e:	91 83       	std	Z+1, r25	; 0x01
     d90:	80 83       	st	Z, r24
     d92:	de 01       	movw	r26, r28
     d94:	af 56       	subi	r26, 0x6F	; 111
     d96:	bf 4f       	sbci	r27, 0xFF	; 255
     d98:	fe 01       	movw	r30, r28
     d9a:	ef 56       	subi	r30, 0x6F	; 111
     d9c:	ff 4f       	sbci	r31, 0xFF	; 255
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d9e:	80 81       	ld	r24, Z
     da0:	91 81       	ldd	r25, Z+1	; 0x01
     da2:	01 97       	sbiw	r24, 0x01	; 1
     da4:	11 96       	adiw	r26, 0x01	; 1
     da6:	9c 93       	st	X, r25
     da8:	8e 93       	st	-X, r24
     daa:	fe 01       	movw	r30, r28
     dac:	ef 56       	subi	r30, 0x6F	; 111
     dae:	ff 4f       	sbci	r31, 0xFF	; 255
     db0:	80 81       	ld	r24, Z
     db2:	91 81       	ldd	r25, Z+1	; 0x01
     db4:	00 97       	sbiw	r24, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     db6:	d1 f6       	brne	.-76     	; 0xd6c <main+0x25c>
     db8:	26 c0       	rjmp	.+76     	; 0xe06 <main+0x2f6>
     dba:	8e 01       	movw	r16, r28
     dbc:	0f 56       	subi	r16, 0x6F	; 111
     dbe:	1f 4f       	sbci	r17, 0xFF	; 255
     dc0:	fe 01       	movw	r30, r28
     dc2:	ed 56       	subi	r30, 0x6D	; 109
     dc4:	ff 4f       	sbci	r31, 0xFF	; 255
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dc6:	60 81       	ld	r22, Z
     dc8:	71 81       	ldd	r23, Z+1	; 0x01
     dca:	82 81       	ldd	r24, Z+2	; 0x02
     dcc:	93 81       	ldd	r25, Z+3	; 0x03
     dce:	5f d9       	rcall	.-3394   	; 0x8e <__fixunssfsi>
     dd0:	dc 01       	movw	r26, r24
     dd2:	cb 01       	movw	r24, r22
     dd4:	f8 01       	movw	r30, r16
     dd6:	91 83       	std	Z+1, r25	; 0x01
     dd8:	80 83       	st	Z, r24
     dda:	de 01       	movw	r26, r28
     ddc:	a3 57       	subi	r26, 0x73	; 115
     dde:	bf 4f       	sbci	r27, 0xFF	; 255
     de0:	fe 01       	movw	r30, r28
     de2:	ef 56       	subi	r30, 0x6F	; 111
     de4:	ff 4f       	sbci	r31, 0xFF	; 255
     de6:	80 81       	ld	r24, Z
     de8:	91 81       	ldd	r25, Z+1	; 0x01
     dea:	8d 93       	st	X+, r24
     dec:	9c 93       	st	X, r25
     dee:	fe 01       	movw	r30, r28
     df0:	e3 57       	subi	r30, 0x73	; 115
     df2:	ff 4f       	sbci	r31, 0xFF	; 255
     df4:	80 81       	ld	r24, Z
     df6:	91 81       	ldd	r25, Z+1	; 0x01
     df8:	01 97       	sbiw	r24, 0x01	; 1
     dfa:	f1 f7       	brne	.-4      	; 0xdf8 <main+0x2e8>
     dfc:	fe 01       	movw	r30, r28
     dfe:	e3 57       	subi	r30, 0x73	; 115
     e00:	ff 4f       	sbci	r31, 0xFF	; 255
     e02:	91 83       	std	Z+1, r25	; 0x01
     e04:	80 83       	st	Z, r24
     e06:	ce 01       	movw	r24, r28
     e08:	83 56       	subi	r24, 0x63	; 99
     e0a:	9f 4f       	sbci	r25, 0xFF	; 255
     e0c:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <SendPW_UART>
     e10:	0e 94 43 15 	call	0x2a86	; 0x2a86 <LCD_clearScreen>
    	_delay_ms(DELAY_UART);
    	SendPW_UART ( password );						 	 // SEND PW TO MC2 via UART
     e14:	8f e6       	ldi	r24, 0x6F	; 111
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	0e 94 c3 14 	call	0x2986	; 0x2986 <LCD_displayString>
     e1c:	ce 01       	movw	r24, r28

   								//  RE-ENTERING PASSWORD //

        LCD_clearScreen();
     e1e:	8f 55       	subi	r24, 0x5F	; 95
     e20:	9f 4f       	sbci	r25, 0xFF	; 255
    	LCD_displayString("Re-enter PW");
     e22:	ed d6       	rcall	.+3546   	; 0x1bfe <EnterPW>
     e24:	fe 01       	movw	r30, r28
     e26:	e7 57       	subi	r30, 0x77	; 119
     e28:	ff 4f       	sbci	r31, 0xFF	; 255
    	EnterPW( confirm );
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	a2 e0       	ldi	r26, 0x02	; 2
     e30:	b3 e4       	ldi	r27, 0x43	; 67
     e32:	80 83       	st	Z, r24
     e34:	91 83       	std	Z+1, r25	; 0x01
     e36:	a2 83       	std	Z+2, r26	; 0x02
     e38:	b3 83       	std	Z+3, r27	; 0x03
     e3a:	8e 01       	movw	r16, r28
     e3c:	0b 57       	subi	r16, 0x7B	; 123
     e3e:	1f 4f       	sbci	r17, 0xFF	; 255
     e40:	fe 01       	movw	r30, r28
     e42:	e7 57       	subi	r30, 0x77	; 119
     e44:	ff 4f       	sbci	r31, 0xFF	; 255
     e46:	60 81       	ld	r22, Z
     e48:	71 81       	ldd	r23, Z+1	; 0x01
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e4a:	82 81       	ldd	r24, Z+2	; 0x02
     e4c:	93 81       	ldd	r25, Z+3	; 0x03
     e4e:	20 e0       	ldi	r18, 0x00	; 0
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	4a e7       	ldi	r20, 0x7A	; 122
     e54:	53 e4       	ldi	r21, 0x43	; 67
     e56:	e5 da       	rcall	.-2614   	; 0x422 <__mulsf3>
     e58:	dc 01       	movw	r26, r24
     e5a:	cb 01       	movw	r24, r22
     e5c:	f8 01       	movw	r30, r16
     e5e:	80 83       	st	Z, r24
     e60:	91 83       	std	Z+1, r25	; 0x01
     e62:	a2 83       	std	Z+2, r26	; 0x02
     e64:	b3 83       	std	Z+3, r27	; 0x03
     e66:	fe 01       	movw	r30, r28
     e68:	eb 57       	subi	r30, 0x7B	; 123
     e6a:	ff 4f       	sbci	r31, 0xFF	; 255
     e6c:	60 81       	ld	r22, Z
     e6e:	71 81       	ldd	r23, Z+1	; 0x01
     e70:	82 81       	ldd	r24, Z+2	; 0x02
     e72:	93 81       	ldd	r25, Z+3	; 0x03
     e74:	20 e0       	ldi	r18, 0x00	; 0
     e76:	30 e0       	ldi	r19, 0x00	; 0
	if (__tmp < 1.0)
     e78:	40 e8       	ldi	r20, 0x80	; 128
     e7a:	5f e3       	ldi	r21, 0x3F	; 63
     e7c:	23 dc       	rcall	.-1978   	; 0x6c4 <__ltsf2>
     e7e:	88 23       	and	r24, r24
     e80:	44 f4       	brge	.+16     	; 0xe92 <main+0x382>
     e82:	fe 01       	movw	r30, r28
     e84:	ed 57       	subi	r30, 0x7D	; 125
     e86:	ff 4f       	sbci	r31, 0xFF	; 255
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	91 83       	std	Z+1, r25	; 0x01
     e8e:	80 83       	st	Z, r24
     e90:	60 c0       	rjmp	.+192    	; 0xf52 <main+0x442>
     e92:	fe 01       	movw	r30, r28
     e94:	eb 57       	subi	r30, 0x7B	; 123
		__ticks = 1;
     e96:	ff 4f       	sbci	r31, 0xFF	; 255
     e98:	60 81       	ld	r22, Z
     e9a:	71 81       	ldd	r23, Z+1	; 0x01
     e9c:	82 81       	ldd	r24, Z+2	; 0x02
     e9e:	93 81       	ldd	r25, Z+3	; 0x03
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	3f ef       	ldi	r19, 0xFF	; 255
     ea4:	4f e7       	ldi	r20, 0x7F	; 127
	else if (__tmp > 65535)
     ea6:	57 e4       	ldi	r21, 0x47	; 71
     ea8:	b3 db       	rcall	.-2202   	; 0x610 <__gtsf2>
     eaa:	18 16       	cp	r1, r24
     eac:	0c f0       	brlt	.+2      	; 0xeb0 <main+0x3a0>
     eae:	41 c0       	rjmp	.+130    	; 0xf32 <main+0x422>
     eb0:	fe 01       	movw	r30, r28
     eb2:	e7 57       	subi	r30, 0x77	; 119
     eb4:	ff 4f       	sbci	r31, 0xFF	; 255
     eb6:	60 81       	ld	r22, Z
     eb8:	71 81       	ldd	r23, Z+1	; 0x01
     eba:	82 81       	ldd	r24, Z+2	; 0x02
     ebc:	93 81       	ldd	r25, Z+3	; 0x03
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	40 e2       	ldi	r20, 0x20	; 32
     ec4:	51 e4       	ldi	r21, 0x41	; 65
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ec6:	ad da       	rcall	.-2726   	; 0x422 <__mulsf3>
     ec8:	dc 01       	movw	r26, r24
     eca:	cb 01       	movw	r24, r22
     ecc:	8e 01       	movw	r16, r28
     ece:	0d 57       	subi	r16, 0x7D	; 125
     ed0:	1f 4f       	sbci	r17, 0xFF	; 255
     ed2:	bc 01       	movw	r22, r24
     ed4:	cd 01       	movw	r24, r26
     ed6:	db d8       	rcall	.-3658   	; 0x8e <__fixunssfsi>
     ed8:	dc 01       	movw	r26, r24
     eda:	cb 01       	movw	r24, r22
     edc:	f8 01       	movw	r30, r16
     ede:	91 83       	std	Z+1, r25	; 0x01
     ee0:	80 83       	st	Z, r24
     ee2:	1f c0       	rjmp	.+62     	; 0xf22 <main+0x412>
     ee4:	fe 01       	movw	r30, r28
     ee6:	ef 57       	subi	r30, 0x7F	; 127
     ee8:	ff 4f       	sbci	r31, 0xFF	; 255
     eea:	89 e1       	ldi	r24, 0x19	; 25
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	91 83       	std	Z+1, r25	; 0x01
     ef0:	80 83       	st	Z, r24
     ef2:	fe 01       	movw	r30, r28
     ef4:	ef 57       	subi	r30, 0x7F	; 127
     ef6:	ff 4f       	sbci	r31, 0xFF	; 255
     ef8:	80 81       	ld	r24, Z
     efa:	91 81       	ldd	r25, Z+1	; 0x01
     efc:	01 97       	sbiw	r24, 0x01	; 1
     efe:	f1 f7       	brne	.-4      	; 0xefc <main+0x3ec>
     f00:	fe 01       	movw	r30, r28
     f02:	ef 57       	subi	r30, 0x7F	; 127
     f04:	ff 4f       	sbci	r31, 0xFF	; 255
     f06:	91 83       	std	Z+1, r25	; 0x01
     f08:	80 83       	st	Z, r24
     f0a:	de 01       	movw	r26, r28
     f0c:	ad 57       	subi	r26, 0x7D	; 125
     f0e:	bf 4f       	sbci	r27, 0xFF	; 255
     f10:	fe 01       	movw	r30, r28
     f12:	ed 57       	subi	r30, 0x7D	; 125
     f14:	ff 4f       	sbci	r31, 0xFF	; 255
     f16:	80 81       	ld	r24, Z
     f18:	91 81       	ldd	r25, Z+1	; 0x01
     f1a:	01 97       	sbiw	r24, 0x01	; 1
     f1c:	11 96       	adiw	r26, 0x01	; 1
     f1e:	9c 93       	st	X, r25
     f20:	8e 93       	st	-X, r24
     f22:	fe 01       	movw	r30, r28
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f24:	ed 57       	subi	r30, 0x7D	; 125
     f26:	ff 4f       	sbci	r31, 0xFF	; 255
     f28:	80 81       	ld	r24, Z
     f2a:	91 81       	ldd	r25, Z+1	; 0x01
     f2c:	00 97       	sbiw	r24, 0x00	; 0
     f2e:	d1 f6       	brne	.-76     	; 0xee4 <main+0x3d4>
     f30:	26 c0       	rjmp	.+76     	; 0xf7e <main+0x46e>
     f32:	8e 01       	movw	r16, r28
     f34:	0d 57       	subi	r16, 0x7D	; 125
     f36:	1f 4f       	sbci	r17, 0xFF	; 255
     f38:	fe 01       	movw	r30, r28
     f3a:	eb 57       	subi	r30, 0x7B	; 123
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f3c:	ff 4f       	sbci	r31, 0xFF	; 255
     f3e:	60 81       	ld	r22, Z
     f40:	71 81       	ldd	r23, Z+1	; 0x01
     f42:	82 81       	ldd	r24, Z+2	; 0x02
     f44:	93 81       	ldd	r25, Z+3	; 0x03
     f46:	a3 d8       	rcall	.-3770   	; 0x8e <__fixunssfsi>
     f48:	dc 01       	movw	r26, r24
     f4a:	cb 01       	movw	r24, r22
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f4c:	f8 01       	movw	r30, r16
     f4e:	91 83       	std	Z+1, r25	; 0x01
     f50:	80 83       	st	Z, r24
     f52:	de 01       	movw	r26, r28
     f54:	a1 58       	subi	r26, 0x81	; 129
     f56:	bf 4f       	sbci	r27, 0xFF	; 255
     f58:	fe 01       	movw	r30, r28
     f5a:	ed 57       	subi	r30, 0x7D	; 125
     f5c:	ff 4f       	sbci	r31, 0xFF	; 255
     f5e:	80 81       	ld	r24, Z
     f60:	91 81       	ldd	r25, Z+1	; 0x01
     f62:	8d 93       	st	X+, r24
     f64:	9c 93       	st	X, r25
     f66:	fe 01       	movw	r30, r28
     f68:	e1 58       	subi	r30, 0x81	; 129
     f6a:	ff 4f       	sbci	r31, 0xFF	; 255
     f6c:	80 81       	ld	r24, Z
     f6e:	91 81       	ldd	r25, Z+1	; 0x01
     f70:	01 97       	sbiw	r24, 0x01	; 1
     f72:	f1 f7       	brne	.-4      	; 0xf70 <main+0x460>
     f74:	fe 01       	movw	r30, r28
     f76:	e1 58       	subi	r30, 0x81	; 129
     f78:	ff 4f       	sbci	r31, 0xFF	; 255
     f7a:	91 83       	std	Z+1, r25	; 0x01
     f7c:	80 83       	st	Z, r24
     f7e:	ce 01       	movw	r24, r28
     f80:	8f 55       	subi	r24, 0x5F	; 95
     f82:	9f 4f       	sbci	r25, 0xFF	; 255
     f84:	58 d7       	rcall	.+3760   	; 0x1e36 <SendPW_UART>
     f86:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <UART_receiveByte>
     f8a:	fe 01       	movw	r30, r28
     f8c:	eb 55       	subi	r30, 0x5B	; 91
     f8e:	ff 4f       	sbci	r31, 0xFF	; 255
     f90:	80 83       	st	Z, r24
     f92:	fe 01       	movw	r30, r28
     f94:	eb 55       	subi	r30, 0x5B	; 91
     f96:	ff 4f       	sbci	r31, 0xFF	; 255
     f98:	80 81       	ld	r24, Z
    	_delay_ms(DELAY_UART);
     	SendPW_UART ( confirm );
     f9a:	88 23       	and	r24, r24
     f9c:	09 f0       	breq	.+2      	; 0xfa0 <main+0x490>
     f9e:	b8 c0       	rjmp	.+368    	; 0x1110 <main+0x600>
     fa0:	0e 94 43 15 	call	0x2a86	; 0x2a86 <LCD_clearScreen>

    							 // VERIFYING PASSWORD //

     	//MC2 WILL SEND -> 1 IF PW'S MATCHES -> 0 PW'S ARE INVALID
     	checkPW_Flag=UART_receiveByte();
     fa4:	2b e7       	ldi	r18, 0x7B	; 123
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	64 e0       	ldi	r22, 0x04	; 4
     fac:	a9 01       	movw	r20, r18
     fae:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <LCD_displayStringRowColumn>

     	if (checkPW_Flag == 0)
     fb2:	fe 01       	movw	r30, r28
     fb4:	e5 58       	subi	r30, 0x85	; 133
     fb6:	ff 4f       	sbci	r31, 0xFF	; 255
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	90 e4       	ldi	r25, 0x40	; 64
     fbc:	ac e1       	ldi	r26, 0x1C	; 28
     	{
     		LCD_clearScreen();
     fbe:	b5 e4       	ldi	r27, 0x45	; 69
     fc0:	80 83       	st	Z, r24
     		LCD_displayStringRowColumn(0,4,"INVALID");
     fc2:	91 83       	std	Z+1, r25	; 0x01
     fc4:	a2 83       	std	Z+2, r26	; 0x02
     fc6:	b3 83       	std	Z+3, r27	; 0x03
     fc8:	8e 01       	movw	r16, r28
     fca:	09 58       	subi	r16, 0x89	; 137
     fcc:	1f 4f       	sbci	r17, 0xFF	; 255
     fce:	fe 01       	movw	r30, r28
     fd0:	e5 58       	subi	r30, 0x85	; 133
     fd2:	ff 4f       	sbci	r31, 0xFF	; 255
     fd4:	60 81       	ld	r22, Z
     fd6:	71 81       	ldd	r23, Z+1	; 0x01
     fd8:	82 81       	ldd	r24, Z+2	; 0x02
     fda:	93 81       	ldd	r25, Z+3	; 0x03
     fdc:	20 e0       	ldi	r18, 0x00	; 0
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	4a e7       	ldi	r20, 0x7A	; 122
     fe2:	53 e4       	ldi	r21, 0x43	; 67
     fe4:	1e da       	rcall	.-3012   	; 0x422 <__mulsf3>
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fe6:	dc 01       	movw	r26, r24
     fe8:	cb 01       	movw	r24, r22
     fea:	f8 01       	movw	r30, r16
     fec:	80 83       	st	Z, r24
     fee:	91 83       	std	Z+1, r25	; 0x01
     ff0:	a2 83       	std	Z+2, r26	; 0x02
     ff2:	b3 83       	std	Z+3, r27	; 0x03
     ff4:	fe 01       	movw	r30, r28
     ff6:	e9 58       	subi	r30, 0x89	; 137
     ff8:	ff 4f       	sbci	r31, 0xFF	; 255
     ffa:	60 81       	ld	r22, Z
     ffc:	71 81       	ldd	r23, Z+1	; 0x01
     ffe:	82 81       	ldd	r24, Z+2	; 0x02
    1000:	93 81       	ldd	r25, Z+3	; 0x03
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	40 e8       	ldi	r20, 0x80	; 128
    1008:	5f e3       	ldi	r21, 0x3F	; 63
    100a:	5c db       	rcall	.-2376   	; 0x6c4 <__ltsf2>
    100c:	88 23       	and	r24, r24
    100e:	44 f4       	brge	.+16     	; 0x1020 <main+0x510>
    1010:	fe 01       	movw	r30, r28
    1012:	eb 58       	subi	r30, 0x8B	; 139
	if (__tmp < 1.0)
    1014:	ff 4f       	sbci	r31, 0xFF	; 255
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	91 83       	std	Z+1, r25	; 0x01
    101c:	80 83       	st	Z, r24
    101e:	61 c0       	rjmp	.+194    	; 0x10e2 <main+0x5d2>
    1020:	fe 01       	movw	r30, r28
    1022:	e9 58       	subi	r30, 0x89	; 137
    1024:	ff 4f       	sbci	r31, 0xFF	; 255
    1026:	60 81       	ld	r22, Z
    1028:	71 81       	ldd	r23, Z+1	; 0x01
    102a:	82 81       	ldd	r24, Z+2	; 0x02
    102c:	93 81       	ldd	r25, Z+3	; 0x03
    102e:	20 e0       	ldi	r18, 0x00	; 0
    1030:	3f ef       	ldi	r19, 0xFF	; 255
		__ticks = 1;
    1032:	4f e7       	ldi	r20, 0x7F	; 127
    1034:	57 e4       	ldi	r21, 0x47	; 71
    1036:	ec da       	rcall	.-2600   	; 0x610 <__gtsf2>
    1038:	18 16       	cp	r1, r24
    103a:	0c f0       	brlt	.+2      	; 0x103e <main+0x52e>
    103c:	41 c0       	rjmp	.+130    	; 0x10c0 <main+0x5b0>
    103e:	fe 01       	movw	r30, r28
    1040:	e5 58       	subi	r30, 0x85	; 133
	else if (__tmp > 65535)
    1042:	ff 4f       	sbci	r31, 0xFF	; 255
    1044:	60 81       	ld	r22, Z
    1046:	71 81       	ldd	r23, Z+1	; 0x01
    1048:	82 81       	ldd	r24, Z+2	; 0x02
    104a:	93 81       	ldd	r25, Z+3	; 0x03
    104c:	20 e0       	ldi	r18, 0x00	; 0
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	40 e2       	ldi	r20, 0x20	; 32
    1052:	51 e4       	ldi	r21, 0x41	; 65
    1054:	e6 d9       	rcall	.-3124   	; 0x422 <__mulsf3>
    1056:	dc 01       	movw	r26, r24
    1058:	cb 01       	movw	r24, r22
    105a:	8e 01       	movw	r16, r28
    105c:	0b 58       	subi	r16, 0x8B	; 139
    105e:	1f 4f       	sbci	r17, 0xFF	; 255
    1060:	bc 01       	movw	r22, r24
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1062:	cd 01       	movw	r24, r26
    1064:	14 d8       	rcall	.-4056   	; 0x8e <__fixunssfsi>
    1066:	dc 01       	movw	r26, r24
    1068:	cb 01       	movw	r24, r22
    106a:	f8 01       	movw	r30, r16
    106c:	91 83       	std	Z+1, r25	; 0x01
    106e:	80 83       	st	Z, r24
    1070:	1f c0       	rjmp	.+62     	; 0x10b0 <main+0x5a0>
    1072:	fe 01       	movw	r30, r28
    1074:	ed 58       	subi	r30, 0x8D	; 141
    1076:	ff 4f       	sbci	r31, 0xFF	; 255
    1078:	89 e1       	ldi	r24, 0x19	; 25
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	91 83       	std	Z+1, r25	; 0x01
    107e:	80 83       	st	Z, r24
    1080:	fe 01       	movw	r30, r28
    1082:	ed 58       	subi	r30, 0x8D	; 141
    1084:	ff 4f       	sbci	r31, 0xFF	; 255
    1086:	80 81       	ld	r24, Z
    1088:	91 81       	ldd	r25, Z+1	; 0x01
    108a:	01 97       	sbiw	r24, 0x01	; 1
    108c:	f1 f7       	brne	.-4      	; 0x108a <main+0x57a>
    108e:	fe 01       	movw	r30, r28
    1090:	ed 58       	subi	r30, 0x8D	; 141
    1092:	ff 4f       	sbci	r31, 0xFF	; 255
    1094:	91 83       	std	Z+1, r25	; 0x01
    1096:	80 83       	st	Z, r24
    1098:	de 01       	movw	r26, r28
    109a:	ab 58       	subi	r26, 0x8B	; 139
    109c:	bf 4f       	sbci	r27, 0xFF	; 255
    109e:	fe 01       	movw	r30, r28
    10a0:	eb 58       	subi	r30, 0x8B	; 139
    10a2:	ff 4f       	sbci	r31, 0xFF	; 255
    10a4:	80 81       	ld	r24, Z
    10a6:	91 81       	ldd	r25, Z+1	; 0x01
    10a8:	01 97       	sbiw	r24, 0x01	; 1
    10aa:	11 96       	adiw	r26, 0x01	; 1
    10ac:	9c 93       	st	X, r25
    10ae:	8e 93       	st	-X, r24
    10b0:	fe 01       	movw	r30, r28
    10b2:	eb 58       	subi	r30, 0x8B	; 139
    10b4:	ff 4f       	sbci	r31, 0xFF	; 255
    10b6:	80 81       	ld	r24, Z
    10b8:	91 81       	ldd	r25, Z+1	; 0x01
    10ba:	00 97       	sbiw	r24, 0x00	; 0
    10bc:	d1 f6       	brne	.-76     	; 0x1072 <main+0x562>
    10be:	28 c0       	rjmp	.+80     	; 0x1110 <main+0x600>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10c0:	8e 01       	movw	r16, r28
    10c2:	0b 58       	subi	r16, 0x8B	; 139
    10c4:	1f 4f       	sbci	r17, 0xFF	; 255
    10c6:	fe 01       	movw	r30, r28
    10c8:	e9 58       	subi	r30, 0x89	; 137
    10ca:	ff 4f       	sbci	r31, 0xFF	; 255
    10cc:	60 81       	ld	r22, Z
    10ce:	71 81       	ldd	r23, Z+1	; 0x01
    10d0:	82 81       	ldd	r24, Z+2	; 0x02
    10d2:	93 81       	ldd	r25, Z+3	; 0x03
    10d4:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10d8:	dc 01       	movw	r26, r24
    10da:	cb 01       	movw	r24, r22
    10dc:	f8 01       	movw	r30, r16
    10de:	91 83       	std	Z+1, r25	; 0x01
    10e0:	80 83       	st	Z, r24
    10e2:	de 01       	movw	r26, r28
    10e4:	af 58       	subi	r26, 0x8F	; 143
    10e6:	bf 4f       	sbci	r27, 0xFF	; 255
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10e8:	fe 01       	movw	r30, r28
    10ea:	eb 58       	subi	r30, 0x8B	; 139
    10ec:	ff 4f       	sbci	r31, 0xFF	; 255
    10ee:	80 81       	ld	r24, Z
    10f0:	91 81       	ldd	r25, Z+1	; 0x01
    10f2:	11 96       	adiw	r26, 0x01	; 1
    10f4:	9c 93       	st	X, r25
    10f6:	8e 93       	st	-X, r24
    10f8:	fe 01       	movw	r30, r28
    10fa:	ef 58       	subi	r30, 0x8F	; 143
    10fc:	ff 4f       	sbci	r31, 0xFF	; 255
    10fe:	80 81       	ld	r24, Z
    1100:	91 81       	ldd	r25, Z+1	; 0x01
    1102:	01 97       	sbiw	r24, 0x01	; 1
    1104:	f1 f7       	brne	.-4      	; 0x1102 <main+0x5f2>
    1106:	fe 01       	movw	r30, r28
    1108:	ef 58       	subi	r30, 0x8F	; 143
    110a:	ff 4f       	sbci	r31, 0xFF	; 255
    110c:	91 83       	std	Z+1, r25	; 0x01
    110e:	80 83       	st	Z, r24
    1110:	fe 01       	movw	r30, r28
    1112:	eb 55       	subi	r30, 0x5B	; 91
    1114:	ff 4f       	sbci	r31, 0xFF	; 255
    1116:	80 81       	ld	r24, Z
    1118:	88 23       	and	r24, r24
    111a:	09 f4       	brne	.+2      	; 0x111e <main+0x60e>
    111c:	bd cd       	rjmp	.-1158   	; 0xc98 <main+0x188>
    111e:	0e 94 43 15 	call	0x2a86	; 0x2a86 <LCD_clearScreen>
    1122:	83 e8       	ldi	r24, 0x83	; 131
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	0e 94 c3 14 	call	0x2986	; 0x2986 <LCD_displayString>
    112a:	fe 01       	movw	r30, r28
    112c:	e3 59       	subi	r30, 0x93	; 147
    112e:	ff 4f       	sbci	r31, 0xFF	; 255
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	90 e4       	ldi	r25, 0x40	; 64
    1134:	ac e1       	ldi	r26, 0x1C	; 28
    1136:	b5 e4       	ldi	r27, 0x45	; 69
     		_delay_ms(DELAY_Keypad);
     	}

        }while (checkPW_Flag== 0);
    1138:	80 83       	st	Z, r24
    113a:	91 83       	std	Z+1, r25	; 0x01
    113c:	a2 83       	std	Z+2, r26	; 0x02
    113e:	b3 83       	std	Z+3, r27	; 0x03
    1140:	8e 01       	movw	r16, r28
    1142:	07 59       	subi	r16, 0x97	; 151
    1144:	1f 4f       	sbci	r17, 0xFF	; 255




        LCD_clearScreen();
    1146:	fe 01       	movw	r30, r28
    1148:	e3 59       	subi	r30, 0x93	; 147
    114a:	ff 4f       	sbci	r31, 0xFF	; 255
    114c:	60 81       	ld	r22, Z
    114e:	71 81       	ldd	r23, Z+1	; 0x01
    1150:	82 81       	ldd	r24, Z+2	; 0x02
    1152:	93 81       	ldd	r25, Z+3	; 0x03
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	4a e7       	ldi	r20, 0x7A	; 122
    115a:	53 e4       	ldi	r21, 0x43	; 67
    115c:	62 d9       	rcall	.-3388   	; 0x422 <__mulsf3>
    115e:	dc 01       	movw	r26, r24
    1160:	cb 01       	movw	r24, r22
    1162:	f8 01       	movw	r30, r16
    1164:	80 83       	st	Z, r24
    1166:	91 83       	std	Z+1, r25	; 0x01
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1168:	a2 83       	std	Z+2, r26	; 0x02
    116a:	b3 83       	std	Z+3, r27	; 0x03
    116c:	fe 01       	movw	r30, r28
    116e:	e7 59       	subi	r30, 0x97	; 151
    1170:	ff 4f       	sbci	r31, 0xFF	; 255
    1172:	60 81       	ld	r22, Z
    1174:	71 81       	ldd	r23, Z+1	; 0x01
    1176:	82 81       	ldd	r24, Z+2	; 0x02
    1178:	93 81       	ldd	r25, Z+3	; 0x03
    117a:	20 e0       	ldi	r18, 0x00	; 0
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	40 e8       	ldi	r20, 0x80	; 128
    1180:	5f e3       	ldi	r21, 0x3F	; 63
    1182:	a0 da       	rcall	.-2752   	; 0x6c4 <__ltsf2>
    1184:	88 23       	and	r24, r24
    1186:	44 f4       	brge	.+16     	; 0x1198 <main+0x688>
    1188:	fe 01       	movw	r30, r28
    118a:	e9 59       	subi	r30, 0x99	; 153
    118c:	ff 4f       	sbci	r31, 0xFF	; 255
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	91 83       	std	Z+1, r25	; 0x01
    1194:	80 83       	st	Z, r24
	if (__tmp < 1.0)
    1196:	62 c0       	rjmp	.+196    	; 0x125c <main+0x74c>
    1198:	fe 01       	movw	r30, r28
    119a:	e7 59       	subi	r30, 0x97	; 151
    119c:	ff 4f       	sbci	r31, 0xFF	; 255
    119e:	60 81       	ld	r22, Z
    11a0:	71 81       	ldd	r23, Z+1	; 0x01
    11a2:	82 81       	ldd	r24, Z+2	; 0x02
    11a4:	93 81       	ldd	r25, Z+3	; 0x03
    11a6:	20 e0       	ldi	r18, 0x00	; 0
    11a8:	3f ef       	ldi	r19, 0xFF	; 255
    11aa:	4f e7       	ldi	r20, 0x7F	; 127
    11ac:	57 e4       	ldi	r21, 0x47	; 71
    11ae:	30 da       	rcall	.-2976   	; 0x610 <__gtsf2>
    11b0:	18 16       	cp	r1, r24
    11b2:	0c f0       	brlt	.+2      	; 0x11b6 <main+0x6a6>
		__ticks = 1;
    11b4:	42 c0       	rjmp	.+132    	; 0x123a <main+0x72a>
    11b6:	fe 01       	movw	r30, r28
    11b8:	e3 59       	subi	r30, 0x93	; 147
    11ba:	ff 4f       	sbci	r31, 0xFF	; 255
    11bc:	60 81       	ld	r22, Z
    11be:	71 81       	ldd	r23, Z+1	; 0x01
    11c0:	82 81       	ldd	r24, Z+2	; 0x02
    11c2:	93 81       	ldd	r25, Z+3	; 0x03
	else if (__tmp > 65535)
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	40 e2       	ldi	r20, 0x20	; 32
    11ca:	51 e4       	ldi	r21, 0x41	; 65
    11cc:	2a d9       	rcall	.-3500   	; 0x422 <__mulsf3>
    11ce:	dc 01       	movw	r26, r24
    11d0:	cb 01       	movw	r24, r22
    11d2:	8e 01       	movw	r16, r28
    11d4:	09 59       	subi	r16, 0x99	; 153
    11d6:	1f 4f       	sbci	r17, 0xFF	; 255
    11d8:	bc 01       	movw	r22, r24
    11da:	cd 01       	movw	r24, r26
    11dc:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    11e0:	dc 01       	movw	r26, r24
    11e2:	cb 01       	movw	r24, r22
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11e4:	f8 01       	movw	r30, r16
    11e6:	91 83       	std	Z+1, r25	; 0x01
    11e8:	80 83       	st	Z, r24
    11ea:	1f c0       	rjmp	.+62     	; 0x122a <main+0x71a>
    11ec:	fe 01       	movw	r30, r28
    11ee:	eb 59       	subi	r30, 0x9B	; 155
    11f0:	ff 4f       	sbci	r31, 0xFF	; 255
    11f2:	89 e1       	ldi	r24, 0x19	; 25
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	91 83       	std	Z+1, r25	; 0x01
    11f8:	80 83       	st	Z, r24
    11fa:	fe 01       	movw	r30, r28
    11fc:	eb 59       	subi	r30, 0x9B	; 155
    11fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1200:	80 81       	ld	r24, Z
    1202:	91 81       	ldd	r25, Z+1	; 0x01
    1204:	01 97       	sbiw	r24, 0x01	; 1
    1206:	f1 f7       	brne	.-4      	; 0x1204 <main+0x6f4>
    1208:	fe 01       	movw	r30, r28
    120a:	eb 59       	subi	r30, 0x9B	; 155
    120c:	ff 4f       	sbci	r31, 0xFF	; 255
    120e:	91 83       	std	Z+1, r25	; 0x01
    1210:	80 83       	st	Z, r24
    1212:	de 01       	movw	r26, r28
    1214:	a9 59       	subi	r26, 0x99	; 153
    1216:	bf 4f       	sbci	r27, 0xFF	; 255
    1218:	fe 01       	movw	r30, r28
    121a:	e9 59       	subi	r30, 0x99	; 153
    121c:	ff 4f       	sbci	r31, 0xFF	; 255
    121e:	80 81       	ld	r24, Z
    1220:	91 81       	ldd	r25, Z+1	; 0x01
    1222:	01 97       	sbiw	r24, 0x01	; 1
    1224:	11 96       	adiw	r26, 0x01	; 1
    1226:	9c 93       	st	X, r25
    1228:	8e 93       	st	-X, r24
    122a:	fe 01       	movw	r30, r28
    122c:	e9 59       	subi	r30, 0x99	; 153
    122e:	ff 4f       	sbci	r31, 0xFF	; 255
    1230:	80 81       	ld	r24, Z
    1232:	91 81       	ldd	r25, Z+1	; 0x01
    1234:	00 97       	sbiw	r24, 0x00	; 0
    1236:	d1 f6       	brne	.-76     	; 0x11ec <main+0x6dc>
    1238:	27 c0       	rjmp	.+78     	; 0x1288 <main+0x778>
    123a:	8e 01       	movw	r16, r28
    123c:	09 59       	subi	r16, 0x99	; 153
    123e:	1f 4f       	sbci	r17, 0xFF	; 255
    1240:	fe 01       	movw	r30, r28
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1242:	e7 59       	subi	r30, 0x97	; 151
    1244:	ff 4f       	sbci	r31, 0xFF	; 255
    1246:	60 81       	ld	r22, Z
    1248:	71 81       	ldd	r23, Z+1	; 0x01
    124a:	82 81       	ldd	r24, Z+2	; 0x02
    124c:	93 81       	ldd	r25, Z+3	; 0x03
    124e:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1252:	dc 01       	movw	r26, r24
    1254:	cb 01       	movw	r24, r22
    1256:	f8 01       	movw	r30, r16
    1258:	91 83       	std	Z+1, r25	; 0x01
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    125a:	80 83       	st	Z, r24
    125c:	de 01       	movw	r26, r28
    125e:	ad 59       	subi	r26, 0x9D	; 157
    1260:	bf 4f       	sbci	r27, 0xFF	; 255
    1262:	fe 01       	movw	r30, r28
    1264:	e9 59       	subi	r30, 0x99	; 153
    1266:	ff 4f       	sbci	r31, 0xFF	; 255
    1268:	80 81       	ld	r24, Z
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    126a:	91 81       	ldd	r25, Z+1	; 0x01
    126c:	8d 93       	st	X+, r24
    126e:	9c 93       	st	X, r25
    1270:	fe 01       	movw	r30, r28
    1272:	ed 59       	subi	r30, 0x9D	; 157
    1274:	ff 4f       	sbci	r31, 0xFF	; 255
    1276:	80 81       	ld	r24, Z
    1278:	91 81       	ldd	r25, Z+1	; 0x01
    127a:	01 97       	sbiw	r24, 0x01	; 1
    127c:	f1 f7       	brne	.-4      	; 0x127a <main+0x76a>
    127e:	fe 01       	movw	r30, r28
    1280:	ed 59       	subi	r30, 0x9D	; 157
    1282:	ff 4f       	sbci	r31, 0xFF	; 255
    1284:	91 83       	std	Z+1, r25	; 0x01
    1286:	80 83       	st	Z, r24
    1288:	0e 94 43 15 	call	0x2a86	; 0x2a86 <LCD_clearScreen>
    128c:	24 e9       	ldi	r18, 0x94	; 148
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	60 e0       	ldi	r22, 0x00	; 0
    1294:	a9 01       	movw	r20, r18
    1296:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <LCD_displayStringRowColumn>
    129a:	22 ea       	ldi	r18, 0xA2	; 162
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	60 e0       	ldi	r22, 0x00	; 0
    12a2:	a9 01       	movw	r20, r18
    12a4:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <LCD_displayStringRowColumn>
    12a8:	60 d6       	rcall	.+3264   	; 0x1f6a <Keypad_GetPressedKey>
    12aa:	fe 01       	movw	r30, r28
    12ac:	e4 56       	subi	r30, 0x64	; 100
    12ae:	ff 4f       	sbci	r31, 0xFF	; 255
    12b0:	80 83       	st	Z, r24
    12b2:	fe 01       	movw	r30, r28
    12b4:	e1 5a       	subi	r30, 0xA1	; 161
    12b6:	ff 4f       	sbci	r31, 0xFF	; 255

 while(1)
 {
/////////////////////////////////////////*  PHASE 2	*/////////////////////////////////////////////

        LCD_clearScreen();									  // '+' -> New Password '-' -> Open door
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	90 e4       	ldi	r25, 0x40	; 64
        LCD_displayStringRowColumn(0,0,"+ : Change PW");
    12bc:	ac e1       	ldi	r26, 0x1C	; 28
    12be:	b5 e4       	ldi	r27, 0x45	; 69
    12c0:	80 83       	st	Z, r24
    12c2:	91 83       	std	Z+1, r25	; 0x01
    12c4:	a2 83       	std	Z+2, r26	; 0x02
    12c6:	b3 83       	std	Z+3, r27	; 0x03
    12c8:	8e 01       	movw	r16, r28
        LCD_displayStringRowColumn(1,0,"- : Open Door");
    12ca:	05 5a       	subi	r16, 0xA5	; 165
    12cc:	1f 4f       	sbci	r17, 0xFF	; 255
    12ce:	fe 01       	movw	r30, r28
    12d0:	e1 5a       	subi	r30, 0xA1	; 161
    12d2:	ff 4f       	sbci	r31, 0xFF	; 255
    12d4:	60 81       	ld	r22, Z
    12d6:	71 81       	ldd	r23, Z+1	; 0x01
    12d8:	82 81       	ldd	r24, Z+2	; 0x02
    12da:	93 81       	ldd	r25, Z+3	; 0x03
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	4a e7       	ldi	r20, 0x7A	; 122
    12e2:	53 e4       	ldi	r21, 0x43	; 67
    12e4:	9e d8       	rcall	.-3780   	; 0x422 <__mulsf3>
    12e6:	dc 01       	movw	r26, r24
    12e8:	cb 01       	movw	r24, r22
    12ea:	f8 01       	movw	r30, r16
    12ec:	80 83       	st	Z, r24
    12ee:	91 83       	std	Z+1, r25	; 0x01
    12f0:	a2 83       	std	Z+2, r26	; 0x02
    12f2:	b3 83       	std	Z+3, r27	; 0x03
    12f4:	fe 01       	movw	r30, r28
    12f6:	e5 5a       	subi	r30, 0xA5	; 165
    12f8:	ff 4f       	sbci	r31, 0xFF	; 255
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12fa:	60 81       	ld	r22, Z
    12fc:	71 81       	ldd	r23, Z+1	; 0x01
    12fe:	82 81       	ldd	r24, Z+2	; 0x02
    1300:	93 81       	ldd	r25, Z+3	; 0x03
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	40 e8       	ldi	r20, 0x80	; 128
    1308:	5f e3       	ldi	r21, 0x3F	; 63
    130a:	dc d9       	rcall	.-3144   	; 0x6c4 <__ltsf2>
    130c:	88 23       	and	r24, r24
    130e:	44 f4       	brge	.+16     	; 0x1320 <main+0x810>
    1310:	fe 01       	movw	r30, r28
    1312:	e7 5a       	subi	r30, 0xA7	; 167
    1314:	ff 4f       	sbci	r31, 0xFF	; 255
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	91 83       	std	Z+1, r25	; 0x01
    131c:	80 83       	st	Z, r24
    131e:	62 c0       	rjmp	.+196    	; 0x13e4 <main+0x8d4>
    1320:	fe 01       	movw	r30, r28
    1322:	e5 5a       	subi	r30, 0xA5	; 165
    1324:	ff 4f       	sbci	r31, 0xFF	; 255
    1326:	60 81       	ld	r22, Z
	if (__tmp < 1.0)
    1328:	71 81       	ldd	r23, Z+1	; 0x01
    132a:	82 81       	ldd	r24, Z+2	; 0x02
    132c:	93 81       	ldd	r25, Z+3	; 0x03
    132e:	20 e0       	ldi	r18, 0x00	; 0
    1330:	3f ef       	ldi	r19, 0xFF	; 255
    1332:	4f e7       	ldi	r20, 0x7F	; 127
    1334:	57 e4       	ldi	r21, 0x47	; 71
    1336:	6c d9       	rcall	.-3368   	; 0x610 <__gtsf2>
    1338:	18 16       	cp	r1, r24
    133a:	0c f0       	brlt	.+2      	; 0x133e <main+0x82e>
    133c:	42 c0       	rjmp	.+132    	; 0x13c2 <main+0x8b2>
    133e:	fe 01       	movw	r30, r28
    1340:	e1 5a       	subi	r30, 0xA1	; 161
    1342:	ff 4f       	sbci	r31, 0xFF	; 255
    1344:	60 81       	ld	r22, Z
		__ticks = 1;
    1346:	71 81       	ldd	r23, Z+1	; 0x01
    1348:	82 81       	ldd	r24, Z+2	; 0x02
    134a:	93 81       	ldd	r25, Z+3	; 0x03
    134c:	20 e0       	ldi	r18, 0x00	; 0
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	40 e2       	ldi	r20, 0x20	; 32
    1352:	51 e4       	ldi	r21, 0x41	; 65
    1354:	66 d8       	rcall	.-3892   	; 0x422 <__mulsf3>
	else if (__tmp > 65535)
    1356:	dc 01       	movw	r26, r24
    1358:	cb 01       	movw	r24, r22
    135a:	8e 01       	movw	r16, r28
    135c:	07 5a       	subi	r16, 0xA7	; 167
    135e:	1f 4f       	sbci	r17, 0xFF	; 255
    1360:	bc 01       	movw	r22, r24
    1362:	cd 01       	movw	r24, r26
    1364:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1368:	dc 01       	movw	r26, r24
    136a:	cb 01       	movw	r24, r22
    136c:	f8 01       	movw	r30, r16
    136e:	91 83       	std	Z+1, r25	; 0x01
    1370:	80 83       	st	Z, r24
    1372:	1f c0       	rjmp	.+62     	; 0x13b2 <main+0x8a2>
    1374:	fe 01       	movw	r30, r28
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1376:	e9 5a       	subi	r30, 0xA9	; 169
    1378:	ff 4f       	sbci	r31, 0xFF	; 255
    137a:	89 e1       	ldi	r24, 0x19	; 25
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	91 83       	std	Z+1, r25	; 0x01
    1380:	80 83       	st	Z, r24
    1382:	fe 01       	movw	r30, r28
    1384:	e9 5a       	subi	r30, 0xA9	; 169
    1386:	ff 4f       	sbci	r31, 0xFF	; 255
    1388:	80 81       	ld	r24, Z
    138a:	91 81       	ldd	r25, Z+1	; 0x01
    138c:	01 97       	sbiw	r24, 0x01	; 1
    138e:	f1 f7       	brne	.-4      	; 0x138c <main+0x87c>
    1390:	fe 01       	movw	r30, r28
    1392:	e9 5a       	subi	r30, 0xA9	; 169
    1394:	ff 4f       	sbci	r31, 0xFF	; 255
    1396:	91 83       	std	Z+1, r25	; 0x01
    1398:	80 83       	st	Z, r24
    139a:	de 01       	movw	r26, r28
    139c:	a7 5a       	subi	r26, 0xA7	; 167
    139e:	bf 4f       	sbci	r27, 0xFF	; 255
    13a0:	fe 01       	movw	r30, r28
    13a2:	e7 5a       	subi	r30, 0xA7	; 167
    13a4:	ff 4f       	sbci	r31, 0xFF	; 255
    13a6:	80 81       	ld	r24, Z
    13a8:	91 81       	ldd	r25, Z+1	; 0x01
    13aa:	01 97       	sbiw	r24, 0x01	; 1
    13ac:	11 96       	adiw	r26, 0x01	; 1
    13ae:	9c 93       	st	X, r25
    13b0:	8e 93       	st	-X, r24
    13b2:	fe 01       	movw	r30, r28
    13b4:	e7 5a       	subi	r30, 0xA7	; 167
    13b6:	ff 4f       	sbci	r31, 0xFF	; 255
    13b8:	80 81       	ld	r24, Z
    13ba:	91 81       	ldd	r25, Z+1	; 0x01
    13bc:	00 97       	sbiw	r24, 0x00	; 0
    13be:	d1 f6       	brne	.-76     	; 0x1374 <main+0x864>
    13c0:	27 c0       	rjmp	.+78     	; 0x1410 <main+0x900>
    13c2:	8e 01       	movw	r16, r28
    13c4:	07 5a       	subi	r16, 0xA7	; 167
    13c6:	1f 4f       	sbci	r17, 0xFF	; 255
    13c8:	fe 01       	movw	r30, r28
    13ca:	e5 5a       	subi	r30, 0xA5	; 165
    13cc:	ff 4f       	sbci	r31, 0xFF	; 255
    13ce:	60 81       	ld	r22, Z
    13d0:	71 81       	ldd	r23, Z+1	; 0x01
    13d2:	82 81       	ldd	r24, Z+2	; 0x02
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13d4:	93 81       	ldd	r25, Z+3	; 0x03
    13d6:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    13da:	dc 01       	movw	r26, r24
    13dc:	cb 01       	movw	r24, r22
    13de:	f8 01       	movw	r30, r16
    13e0:	91 83       	std	Z+1, r25	; 0x01
    13e2:	80 83       	st	Z, r24
    13e4:	de 01       	movw	r26, r28
    13e6:	ab 5a       	subi	r26, 0xAB	; 171
    13e8:	bf 4f       	sbci	r27, 0xFF	; 255
    13ea:	fe 01       	movw	r30, r28
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13ec:	e7 5a       	subi	r30, 0xA7	; 167
    13ee:	ff 4f       	sbci	r31, 0xFF	; 255
    13f0:	80 81       	ld	r24, Z
    13f2:	91 81       	ldd	r25, Z+1	; 0x01
    13f4:	8d 93       	st	X+, r24
    13f6:	9c 93       	st	X, r25
    13f8:	fe 01       	movw	r30, r28
    13fa:	eb 5a       	subi	r30, 0xAB	; 171
    13fc:	ff 4f       	sbci	r31, 0xFF	; 255
    13fe:	80 81       	ld	r24, Z
    1400:	91 81       	ldd	r25, Z+1	; 0x01
    1402:	01 97       	sbiw	r24, 0x01	; 1
    1404:	f1 f7       	brne	.-4      	; 0x1402 <main+0x8f2>
    1406:	fe 01       	movw	r30, r28
    1408:	eb 5a       	subi	r30, 0xAB	; 171
    140a:	ff 4f       	sbci	r31, 0xFF	; 255
    140c:	91 83       	std	Z+1, r25	; 0x01
    140e:	80 83       	st	Z, r24
    1410:	fe 01       	movw	r30, r28
    1412:	e4 56       	subi	r30, 0x64	; 100
    1414:	ff 4f       	sbci	r31, 0xFF	; 255
    1416:	80 81       	ld	r24, Z
    1418:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <UART_sendByte>
    141c:	fe 01       	movw	r30, r28
    141e:	ef 5a       	subi	r30, 0xAF	; 175
    1420:	ff 4f       	sbci	r31, 0xFF	; 255
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	a2 e0       	ldi	r26, 0x02	; 2
    1428:	b3 e4       	ldi	r27, 0x43	; 67
    142a:	80 83       	st	Z, r24
    142c:	91 83       	std	Z+1, r25	; 0x01
    142e:	a2 83       	std	Z+2, r26	; 0x02
    1430:	b3 83       	std	Z+3, r27	; 0x03
    1432:	8e 01       	movw	r16, r28
    1434:	03 5b       	subi	r16, 0xB3	; 179
    1436:	1f 4f       	sbci	r17, 0xFF	; 255
    1438:	fe 01       	movw	r30, r28
    143a:	ef 5a       	subi	r30, 0xAF	; 175
    143c:	ff 4f       	sbci	r31, 0xFF	; 255
    143e:	60 81       	ld	r22, Z
    1440:	71 81       	ldd	r23, Z+1	; 0x01
    1442:	82 81       	ldd	r24, Z+2	; 0x02
    1444:	93 81       	ldd	r25, Z+3	; 0x03
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	4a e7       	ldi	r20, 0x7A	; 122
    144c:	53 e4       	ldi	r21, 0x43	; 67
    144e:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    1452:	dc 01       	movw	r26, r24
    1454:	cb 01       	movw	r24, r22
    1456:	f8 01       	movw	r30, r16
    1458:	80 83       	st	Z, r24
    145a:	91 83       	std	Z+1, r25	; 0x01
    145c:	a2 83       	std	Z+2, r26	; 0x02
    145e:	b3 83       	std	Z+3, r27	; 0x03
    1460:	fe 01       	movw	r30, r28
    1462:	e3 5b       	subi	r30, 0xB3	; 179
    1464:	ff 4f       	sbci	r31, 0xFF	; 255
    1466:	60 81       	ld	r22, Z
    1468:	71 81       	ldd	r23, Z+1	; 0x01
    146a:	82 81       	ldd	r24, Z+2	; 0x02
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    146c:	93 81       	ldd	r25, Z+3	; 0x03
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	40 e8       	ldi	r20, 0x80	; 128
    1474:	5f e3       	ldi	r21, 0x3F	; 63
    1476:	26 d9       	rcall	.-3508   	; 0x6c4 <__ltsf2>
    1478:	88 23       	and	r24, r24
    147a:	44 f4       	brge	.+16     	; 0x148c <main+0x97c>
    147c:	fe 01       	movw	r30, r28
    147e:	e5 5b       	subi	r30, 0xB5	; 181
    1480:	ff 4f       	sbci	r31, 0xFF	; 255
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	91 83       	std	Z+1, r25	; 0x01
    1488:	80 83       	st	Z, r24
    148a:	63 c0       	rjmp	.+198    	; 0x1552 <main+0xa42>
    148c:	fe 01       	movw	r30, r28
    148e:	e3 5b       	subi	r30, 0xB3	; 179
    1490:	ff 4f       	sbci	r31, 0xFF	; 255
    1492:	60 81       	ld	r22, Z
    1494:	71 81       	ldd	r23, Z+1	; 0x01
    1496:	82 81       	ldd	r24, Z+2	; 0x02
    1498:	93 81       	ldd	r25, Z+3	; 0x03
	if (__tmp < 1.0)
    149a:	20 e0       	ldi	r18, 0x00	; 0
    149c:	3f ef       	ldi	r19, 0xFF	; 255
    149e:	4f e7       	ldi	r20, 0x7F	; 127
    14a0:	57 e4       	ldi	r21, 0x47	; 71
    14a2:	b6 d8       	rcall	.-3732   	; 0x610 <__gtsf2>
    14a4:	18 16       	cp	r1, r24
    14a6:	0c f0       	brlt	.+2      	; 0x14aa <main+0x99a>
    14a8:	43 c0       	rjmp	.+134    	; 0x1530 <main+0xa20>
    14aa:	fe 01       	movw	r30, r28
    14ac:	ef 5a       	subi	r30, 0xAF	; 175
    14ae:	ff 4f       	sbci	r31, 0xFF	; 255
    14b0:	60 81       	ld	r22, Z
    14b2:	71 81       	ldd	r23, Z+1	; 0x01
    14b4:	82 81       	ldd	r24, Z+2	; 0x02
    14b6:	93 81       	ldd	r25, Z+3	; 0x03
		__ticks = 1;
    14b8:	20 e0       	ldi	r18, 0x00	; 0
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	40 e2       	ldi	r20, 0x20	; 32
    14be:	51 e4       	ldi	r21, 0x41	; 65
    14c0:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    14c4:	dc 01       	movw	r26, r24
    14c6:	cb 01       	movw	r24, r22
	else if (__tmp > 65535)
    14c8:	8e 01       	movw	r16, r28
    14ca:	05 5b       	subi	r16, 0xB5	; 181
    14cc:	1f 4f       	sbci	r17, 0xFF	; 255
    14ce:	bc 01       	movw	r22, r24
    14d0:	cd 01       	movw	r24, r26
    14d2:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    14d6:	dc 01       	movw	r26, r24
    14d8:	cb 01       	movw	r24, r22
    14da:	f8 01       	movw	r30, r16
    14dc:	91 83       	std	Z+1, r25	; 0x01
    14de:	80 83       	st	Z, r24
    14e0:	1f c0       	rjmp	.+62     	; 0x1520 <main+0xa10>
    14e2:	fe 01       	movw	r30, r28
    14e4:	e7 5b       	subi	r30, 0xB7	; 183
    14e6:	ff 4f       	sbci	r31, 0xFF	; 255
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14e8:	89 e1       	ldi	r24, 0x19	; 25
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	91 83       	std	Z+1, r25	; 0x01
    14ee:	80 83       	st	Z, r24
    14f0:	fe 01       	movw	r30, r28
    14f2:	e7 5b       	subi	r30, 0xB7	; 183
    14f4:	ff 4f       	sbci	r31, 0xFF	; 255
    14f6:	80 81       	ld	r24, Z
    14f8:	91 81       	ldd	r25, Z+1	; 0x01
    14fa:	01 97       	sbiw	r24, 0x01	; 1
    14fc:	f1 f7       	brne	.-4      	; 0x14fa <main+0x9ea>
    14fe:	fe 01       	movw	r30, r28
    1500:	e7 5b       	subi	r30, 0xB7	; 183
    1502:	ff 4f       	sbci	r31, 0xFF	; 255
    1504:	91 83       	std	Z+1, r25	; 0x01
    1506:	80 83       	st	Z, r24
    1508:	de 01       	movw	r26, r28
    150a:	a5 5b       	subi	r26, 0xB5	; 181
    150c:	bf 4f       	sbci	r27, 0xFF	; 255
    150e:	fe 01       	movw	r30, r28
    1510:	e5 5b       	subi	r30, 0xB5	; 181
    1512:	ff 4f       	sbci	r31, 0xFF	; 255
    1514:	80 81       	ld	r24, Z
    1516:	91 81       	ldd	r25, Z+1	; 0x01
    1518:	01 97       	sbiw	r24, 0x01	; 1
    151a:	11 96       	adiw	r26, 0x01	; 1
    151c:	9c 93       	st	X, r25
    151e:	8e 93       	st	-X, r24
    1520:	fe 01       	movw	r30, r28
    1522:	e5 5b       	subi	r30, 0xB5	; 181
    1524:	ff 4f       	sbci	r31, 0xFF	; 255
    1526:	80 81       	ld	r24, Z
    1528:	91 81       	ldd	r25, Z+1	; 0x01
    152a:	00 97       	sbiw	r24, 0x00	; 0
    152c:	d1 f6       	brne	.-76     	; 0x14e2 <main+0x9d2>
    152e:	28 c0       	rjmp	.+80     	; 0x1580 <main+0xa70>
    1530:	8e 01       	movw	r16, r28
    1532:	05 5b       	subi	r16, 0xB5	; 181
    1534:	1f 4f       	sbci	r17, 0xFF	; 255
    1536:	fe 01       	movw	r30, r28
    1538:	e3 5b       	subi	r30, 0xB3	; 179
    153a:	ff 4f       	sbci	r31, 0xFF	; 255
    153c:	60 81       	ld	r22, Z
    153e:	71 81       	ldd	r23, Z+1	; 0x01
    1540:	82 81       	ldd	r24, Z+2	; 0x02
    1542:	93 81       	ldd	r25, Z+3	; 0x03
    1544:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1548:	dc 01       	movw	r26, r24
    154a:	cb 01       	movw	r24, r22
    154c:	f8 01       	movw	r30, r16
    154e:	91 83       	std	Z+1, r25	; 0x01
    1550:	80 83       	st	Z, r24
    1552:	de 01       	movw	r26, r28
    1554:	a9 5b       	subi	r26, 0xB9	; 185
    1556:	bf 4f       	sbci	r27, 0xFF	; 255
    1558:	fe 01       	movw	r30, r28
    155a:	e5 5b       	subi	r30, 0xB5	; 181
    155c:	ff 4f       	sbci	r31, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    155e:	80 81       	ld	r24, Z
    1560:	91 81       	ldd	r25, Z+1	; 0x01
    1562:	11 96       	adiw	r26, 0x01	; 1
    1564:	9c 93       	st	X, r25
    1566:	8e 93       	st	-X, r24
    1568:	fe 01       	movw	r30, r28
    156a:	e9 5b       	subi	r30, 0xB9	; 185
    156c:	ff 4f       	sbci	r31, 0xFF	; 255
    156e:	80 81       	ld	r24, Z
    1570:	91 81       	ldd	r25, Z+1	; 0x01
    1572:	01 97       	sbiw	r24, 0x01	; 1
    1574:	f1 f7       	brne	.-4      	; 0x1572 <main+0xa62>
    1576:	fe 01       	movw	r30, r28
    1578:	e9 5b       	subi	r30, 0xB9	; 185
    157a:	ff 4f       	sbci	r31, 0xFF	; 255
    157c:	91 83       	std	Z+1, r25	; 0x01
    157e:	80 83       	st	Z, r24
    1580:	fe 01       	movw	r30, r28
    1582:	e4 56       	subi	r30, 0x64	; 100
    1584:	ff 4f       	sbci	r31, 0xFF	; 255
    1586:	80 81       	ld	r24, Z
    1588:	8b 32       	cpi	r24, 0x2B	; 43
    158a:	09 f0       	breq	.+2      	; 0x158e <main+0xa7e>
    158c:	a8 c1       	rjmp	.+848    	; 0x18de <main+0xdce>
    158e:	0e 94 43 15 	call	0x2a86	; 0x2a86 <LCD_clearScreen>
    1592:	80 e6       	ldi	r24, 0x60	; 96
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	0e 94 c3 14 	call	0x2986	; 0x2986 <LCD_displayString>
    159a:	ce 01       	movw	r24, r28
    159c:	83 56       	subi	r24, 0x63	; 99
    159e:	9f 4f       	sbci	r25, 0xFF	; 255
    15a0:	2e d3       	rcall	.+1628   	; 0x1bfe <EnterPW>
    15a2:	ce 01       	movw	r24, r28
    15a4:	83 56       	subi	r24, 0x63	; 99
    15a6:	9f 4f       	sbci	r25, 0xFF	; 255
    15a8:	46 d4       	rcall	.+2188   	; 0x1e36 <SendPW_UART>
    15aa:	0e 94 43 15 	call	0x2a86	; 0x2a86 <LCD_clearScreen>
    15ae:	8f e6       	ldi	r24, 0x6F	; 111
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	0e 94 c3 14 	call	0x2986	; 0x2986 <LCD_displayString>
    15b6:	ce 01       	movw	r24, r28
    15b8:	8f 55       	subi	r24, 0x5F	; 95
    15ba:	9f 4f       	sbci	r25, 0xFF	; 255
    15bc:	20 d3       	rcall	.+1600   	; 0x1bfe <EnterPW>
        _delay_ms(DELAY_UART);


 /////////////////////////////////////// CHANGE PASSWORD ////////////////////////////////////////////

        if (command == '+')
    15be:	ce 01       	movw	r24, r28
    15c0:	8f 55       	subi	r24, 0x5F	; 95
    15c2:	9f 4f       	sbci	r25, 0xFF	; 255
    15c4:	38 d4       	rcall	.+2160   	; 0x1e36 <SendPW_UART>
    15c6:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <UART_receiveByte>
    15ca:	fe 01       	movw	r30, r28
        {
        	do{
            						//  ENTERING PASSWORD  //

            LCD_clearScreen();
    15cc:	eb 55       	subi	r30, 0x5B	; 91
    15ce:	ff 4f       	sbci	r31, 0xFF	; 255
        	LCD_displayString("Enter Password");
    15d0:	80 83       	st	Z, r24
    15d2:	fe 01       	movw	r30, r28
    15d4:	ed 5b       	subi	r30, 0xBD	; 189
    15d6:	ff 4f       	sbci	r31, 0xFF	; 255
        	EnterPW( password );            					 // SEND ADDRESS OF password[4] TO EnterPW()
    15d8:	80 e0       	ldi	r24, 0x00	; 0
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	a2 e0       	ldi	r26, 0x02	; 2
    15de:	b3 e4       	ldi	r27, 0x43	; 67
    15e0:	80 83       	st	Z, r24
        	SendPW_UART ( password );						 	 // SEND PW TO MC2 via UART
    15e2:	91 83       	std	Z+1, r25	; 0x01
    15e4:	a2 83       	std	Z+2, r26	; 0x02
    15e6:	b3 83       	std	Z+3, r27	; 0x03
    15e8:	8e 01       	movw	r16, r28
    15ea:	01 5c       	subi	r16, 0xC1	; 193

       								//  RE-ENTERING PASSWORD //

            LCD_clearScreen();
    15ec:	1f 4f       	sbci	r17, 0xFF	; 255
    15ee:	fe 01       	movw	r30, r28
        	LCD_displayString("Re-enter PW");
    15f0:	ed 5b       	subi	r30, 0xBD	; 189
    15f2:	ff 4f       	sbci	r31, 0xFF	; 255
    15f4:	60 81       	ld	r22, Z
    15f6:	71 81       	ldd	r23, Z+1	; 0x01
        	EnterPW( confirm );
    15f8:	82 81       	ldd	r24, Z+2	; 0x02
    15fa:	93 81       	ldd	r25, Z+3	; 0x03
    15fc:	20 e0       	ldi	r18, 0x00	; 0
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	4a e7       	ldi	r20, 0x7A	; 122
         	SendPW_UART ( confirm );
    1602:	53 e4       	ldi	r21, 0x43	; 67
    1604:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    1608:	dc 01       	movw	r26, r24
    160a:	cb 01       	movw	r24, r22
    160c:	f8 01       	movw	r30, r16
    160e:	80 83       	st	Z, r24
    1610:	91 83       	std	Z+1, r25	; 0x01
    1612:	a2 83       	std	Z+2, r26	; 0x02
    1614:	b3 83       	std	Z+3, r27	; 0x03
    1616:	fe 01       	movw	r30, r28
    1618:	ff 96       	adiw	r30, 0x3f	; 63
    161a:	60 81       	ld	r22, Z
    161c:	71 81       	ldd	r23, Z+1	; 0x01
    161e:	82 81       	ldd	r24, Z+2	; 0x02
    1620:	93 81       	ldd	r25, Z+3	; 0x03
    1622:	20 e0       	ldi	r18, 0x00	; 0
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	40 e8       	ldi	r20, 0x80	; 128
    1628:	5f e3       	ldi	r21, 0x3F	; 63
    162a:	4c d8       	rcall	.-3944   	; 0x6c4 <__ltsf2>
    162c:	88 23       	and	r24, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    162e:	2c f4       	brge	.+10     	; 0x163a <main+0xb2a>
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	9e af       	std	Y+62, r25	; 0x3e
    1636:	8d af       	std	Y+61, r24	; 0x3d
    1638:	46 c0       	rjmp	.+140    	; 0x16c6 <main+0xbb6>
    163a:	fe 01       	movw	r30, r28
    163c:	ff 96       	adiw	r30, 0x3f	; 63
    163e:	60 81       	ld	r22, Z
    1640:	71 81       	ldd	r23, Z+1	; 0x01
    1642:	82 81       	ldd	r24, Z+2	; 0x02
    1644:	93 81       	ldd	r25, Z+3	; 0x03
    1646:	20 e0       	ldi	r18, 0x00	; 0
    1648:	3f ef       	ldi	r19, 0xFF	; 255
    164a:	4f e7       	ldi	r20, 0x7F	; 127
    164c:	57 e4       	ldi	r21, 0x47	; 71
    164e:	0e 94 08 03 	call	0x610	; 0x610 <__gtsf2>
    1652:	18 16       	cp	r1, r24
    1654:	64 f5       	brge	.+88     	; 0x16ae <main+0xb9e>
    1656:	fe 01       	movw	r30, r28
    1658:	ed 5b       	subi	r30, 0xBD	; 189
    165a:	ff 4f       	sbci	r31, 0xFF	; 255
	if (__tmp < 1.0)
    165c:	60 81       	ld	r22, Z
    165e:	71 81       	ldd	r23, Z+1	; 0x01
    1660:	82 81       	ldd	r24, Z+2	; 0x02
    1662:	93 81       	ldd	r25, Z+3	; 0x03
    1664:	20 e0       	ldi	r18, 0x00	; 0
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	40 e2       	ldi	r20, 0x20	; 32
    166a:	51 e4       	ldi	r21, 0x41	; 65
    166c:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    1670:	dc 01       	movw	r26, r24
    1672:	cb 01       	movw	r24, r22
    1674:	bc 01       	movw	r22, r24
    1676:	cd 01       	movw	r24, r26
		__ticks = 1;
    1678:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    167c:	dc 01       	movw	r26, r24
    167e:	cb 01       	movw	r24, r22
    1680:	9e af       	std	Y+62, r25	; 0x3e
	else if (__tmp > 65535)
    1682:	8d af       	std	Y+61, r24	; 0x3d
    1684:	0f c0       	rjmp	.+30     	; 0x16a4 <main+0xb94>
    1686:	89 e1       	ldi	r24, 0x19	; 25
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	9c af       	std	Y+60, r25	; 0x3c
    168c:	8b af       	std	Y+59, r24	; 0x3b
    168e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1690:	9c ad       	ldd	r25, Y+60	; 0x3c
    1692:	01 97       	sbiw	r24, 0x01	; 1
    1694:	f1 f7       	brne	.-4      	; 0x1692 <main+0xb82>
    1696:	9c af       	std	Y+60, r25	; 0x3c
    1698:	8b af       	std	Y+59, r24	; 0x3b
    169a:	8d ad       	ldd	r24, Y+61	; 0x3d
    169c:	9e ad       	ldd	r25, Y+62	; 0x3e
    169e:	01 97       	sbiw	r24, 0x01	; 1
    16a0:	9e af       	std	Y+62, r25	; 0x3e
    16a2:	8d af       	std	Y+61, r24	; 0x3d
    16a4:	8d ad       	ldd	r24, Y+61	; 0x3d
    16a6:	9e ad       	ldd	r25, Y+62	; 0x3e
    16a8:	00 97       	sbiw	r24, 0x00	; 0
    16aa:	69 f7       	brne	.-38     	; 0x1686 <main+0xb76>
    16ac:	16 c0       	rjmp	.+44     	; 0x16da <main+0xbca>
    16ae:	fe 01       	movw	r30, r28
    16b0:	ff 96       	adiw	r30, 0x3f	; 63
    16b2:	60 81       	ld	r22, Z
    16b4:	71 81       	ldd	r23, Z+1	; 0x01
    16b6:	82 81       	ldd	r24, Z+2	; 0x02
    16b8:	93 81       	ldd	r25, Z+3	; 0x03
    16ba:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    16be:	dc 01       	movw	r26, r24
    16c0:	cb 01       	movw	r24, r22
    16c2:	9e af       	std	Y+62, r25	; 0x3e
    16c4:	8d af       	std	Y+61, r24	; 0x3d
    16c6:	8d ad       	ldd	r24, Y+61	; 0x3d
    16c8:	9e ad       	ldd	r25, Y+62	; 0x3e
    16ca:	9a af       	std	Y+58, r25	; 0x3a
    16cc:	89 af       	std	Y+57, r24	; 0x39
    16ce:	89 ad       	ldd	r24, Y+57	; 0x39
    16d0:	9a ad       	ldd	r25, Y+58	; 0x3a
    16d2:	01 97       	sbiw	r24, 0x01	; 1
    16d4:	f1 f7       	brne	.-4      	; 0x16d2 <main+0xbc2>
    16d6:	9a af       	std	Y+58, r25	; 0x3a
    16d8:	89 af       	std	Y+57, r24	; 0x39
    16da:	fe 01       	movw	r30, r28
    16dc:	eb 55       	subi	r30, 0x5B	; 91
    16de:	ff 4f       	sbci	r31, 0xFF	; 255
    16e0:	80 81       	ld	r24, Z
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e2:	88 23       	and	r24, r24
    16e4:	09 f0       	breq	.+2      	; 0x16e8 <main+0xbd8>
    16e6:	7b c0       	rjmp	.+246    	; 0x17de <main+0xcce>
    16e8:	0e 94 43 15 	call	0x2a86	; 0x2a86 <LCD_clearScreen>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ec:	2b e7       	ldi	r18, 0x7B	; 123
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	80 e0       	ldi	r24, 0x00	; 0
    16f2:	64 e0       	ldi	r22, 0x04	; 4
    16f4:	a9 01       	movw	r20, r18
    16f6:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <LCD_displayStringRowColumn>
    16fa:	80 e0       	ldi	r24, 0x00	; 0
    16fc:	90 e4       	ldi	r25, 0x40	; 64
    16fe:	ac e1       	ldi	r26, 0x1C	; 28
    1700:	b5 e4       	ldi	r27, 0x45	; 69
    1702:	8d ab       	std	Y+53, r24	; 0x35
    1704:	9e ab       	std	Y+54, r25	; 0x36
    1706:	af ab       	std	Y+55, r26	; 0x37
    1708:	b8 af       	std	Y+56, r27	; 0x38
    170a:	6d a9       	ldd	r22, Y+53	; 0x35
    170c:	7e a9       	ldd	r23, Y+54	; 0x36
    170e:	8f a9       	ldd	r24, Y+55	; 0x37
    1710:	98 ad       	ldd	r25, Y+56	; 0x38
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	4a e7       	ldi	r20, 0x7A	; 122
    1718:	53 e4       	ldi	r21, 0x43	; 67
    171a:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    171e:	dc 01       	movw	r26, r24
    1720:	cb 01       	movw	r24, r22

         	//MC2 WILL SEND -> 1 IF PW'S MATCHES -> 0 PW'S ARE INVALID
         	checkPW_Flag=UART_receiveByte();
         	_delay_ms(DELAY_UART);

         	if (checkPW_Flag == 0)
    1722:	89 ab       	std	Y+49, r24	; 0x31
    1724:	9a ab       	std	Y+50, r25	; 0x32
    1726:	ab ab       	std	Y+51, r26	; 0x33
    1728:	bc ab       	std	Y+52, r27	; 0x34
    172a:	69 a9       	ldd	r22, Y+49	; 0x31
    172c:	7a a9       	ldd	r23, Y+50	; 0x32
    172e:	8b a9       	ldd	r24, Y+51	; 0x33
         	{
         		LCD_clearScreen();
    1730:	9c a9       	ldd	r25, Y+52	; 0x34
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	40 e8       	ldi	r20, 0x80	; 128
    1738:	5f e3       	ldi	r21, 0x3F	; 63
    173a:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__ltsf2>
    173e:	88 23       	and	r24, r24
    1740:	2c f4       	brge	.+10     	; 0x174c <main+0xc3c>
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	98 ab       	std	Y+48, r25	; 0x30
    1748:	8f a7       	std	Y+47, r24	; 0x2f
    174a:	3f c0       	rjmp	.+126    	; 0x17ca <main+0xcba>
    174c:	69 a9       	ldd	r22, Y+49	; 0x31
    174e:	7a a9       	ldd	r23, Y+50	; 0x32
    1750:	8b a9       	ldd	r24, Y+51	; 0x33
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1752:	9c a9       	ldd	r25, Y+52	; 0x34
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	3f ef       	ldi	r19, 0xFF	; 255
    1758:	4f e7       	ldi	r20, 0x7F	; 127
    175a:	57 e4       	ldi	r21, 0x47	; 71
    175c:	0e 94 08 03 	call	0x610	; 0x610 <__gtsf2>
    1760:	18 16       	cp	r1, r24
    1762:	4c f5       	brge	.+82     	; 0x17b6 <main+0xca6>
    1764:	6d a9       	ldd	r22, Y+53	; 0x35
    1766:	7e a9       	ldd	r23, Y+54	; 0x36
    1768:	8f a9       	ldd	r24, Y+55	; 0x37
    176a:	98 ad       	ldd	r25, Y+56	; 0x38
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	40 e2       	ldi	r20, 0x20	; 32
	if (__tmp < 1.0)
    1772:	51 e4       	ldi	r21, 0x41	; 65
    1774:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    1778:	dc 01       	movw	r26, r24
    177a:	cb 01       	movw	r24, r22
    177c:	bc 01       	movw	r22, r24
    177e:	cd 01       	movw	r24, r26
    1780:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1784:	dc 01       	movw	r26, r24
    1786:	cb 01       	movw	r24, r22
    1788:	98 ab       	std	Y+48, r25	; 0x30
		__ticks = 1;
    178a:	8f a7       	std	Y+47, r24	; 0x2f
    178c:	0f c0       	rjmp	.+30     	; 0x17ac <main+0xc9c>
    178e:	89 e1       	ldi	r24, 0x19	; 25
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	9e a7       	std	Y+46, r25	; 0x2e
	else if (__tmp > 65535)
    1794:	8d a7       	std	Y+45, r24	; 0x2d
    1796:	8d a5       	ldd	r24, Y+45	; 0x2d
    1798:	9e a5       	ldd	r25, Y+46	; 0x2e
    179a:	01 97       	sbiw	r24, 0x01	; 1
    179c:	f1 f7       	brne	.-4      	; 0x179a <main+0xc8a>
    179e:	9e a7       	std	Y+46, r25	; 0x2e
    17a0:	8d a7       	std	Y+45, r24	; 0x2d
    17a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    17a4:	98 a9       	ldd	r25, Y+48	; 0x30
    17a6:	01 97       	sbiw	r24, 0x01	; 1
    17a8:	98 ab       	std	Y+48, r25	; 0x30
    17aa:	8f a7       	std	Y+47, r24	; 0x2f
    17ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    17ae:	98 a9       	ldd	r25, Y+48	; 0x30
    17b0:	00 97       	sbiw	r24, 0x00	; 0
    17b2:	69 f7       	brne	.-38     	; 0x178e <main+0xc7e>
    17b4:	14 c0       	rjmp	.+40     	; 0x17de <main+0xcce>
    17b6:	69 a9       	ldd	r22, Y+49	; 0x31
    17b8:	7a a9       	ldd	r23, Y+50	; 0x32
    17ba:	8b a9       	ldd	r24, Y+51	; 0x33
    17bc:	9c a9       	ldd	r25, Y+52	; 0x34
    17be:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    17c2:	dc 01       	movw	r26, r24
    17c4:	cb 01       	movw	r24, r22
    17c6:	98 ab       	std	Y+48, r25	; 0x30
    17c8:	8f a7       	std	Y+47, r24	; 0x2f
    17ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    17cc:	98 a9       	ldd	r25, Y+48	; 0x30
    17ce:	9c a7       	std	Y+44, r25	; 0x2c
    17d0:	8b a7       	std	Y+43, r24	; 0x2b
    17d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    17d4:	9c a5       	ldd	r25, Y+44	; 0x2c
    17d6:	01 97       	sbiw	r24, 0x01	; 1
    17d8:	f1 f7       	brne	.-4      	; 0x17d6 <main+0xcc6>
    17da:	9c a7       	std	Y+44, r25	; 0x2c
    17dc:	8b a7       	std	Y+43, r24	; 0x2b
    17de:	fe 01       	movw	r30, r28
    17e0:	eb 55       	subi	r30, 0x5B	; 91
    17e2:	ff 4f       	sbci	r31, 0xFF	; 255
    17e4:	80 81       	ld	r24, Z
    17e6:	88 23       	and	r24, r24
    17e8:	09 f4       	brne	.+2      	; 0x17ec <main+0xcdc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ea:	d1 ce       	rjmp	.-606    	; 0x158e <main+0xa7e>
    17ec:	0e 94 43 15 	call	0x2a86	; 0x2a86 <LCD_clearScreen>
    17f0:	80 eb       	ldi	r24, 0xB0	; 176
    17f2:	90 e0       	ldi	r25, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17f4:	0e 94 c3 14 	call	0x2986	; 0x2986 <LCD_displayString>
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	90 e4       	ldi	r25, 0x40	; 64
    17fc:	ac e1       	ldi	r26, 0x1C	; 28
    17fe:	b5 e4       	ldi	r27, 0x45	; 69
    1800:	8f a3       	std	Y+39, r24	; 0x27
    1802:	98 a7       	std	Y+40, r25	; 0x28
    1804:	a9 a7       	std	Y+41, r26	; 0x29
    1806:	ba a7       	std	Y+42, r27	; 0x2a
    1808:	6f a1       	ldd	r22, Y+39	; 0x27
    180a:	78 a5       	ldd	r23, Y+40	; 0x28
    180c:	89 a5       	ldd	r24, Y+41	; 0x29
    180e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1810:	20 e0       	ldi	r18, 0x00	; 0
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	4a e7       	ldi	r20, 0x7A	; 122
    1816:	53 e4       	ldi	r21, 0x43	; 67
    1818:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    181c:	dc 01       	movw	r26, r24
    181e:	cb 01       	movw	r24, r22
    1820:	8b a3       	std	Y+35, r24	; 0x23
    1822:	9c a3       	std	Y+36, r25	; 0x24
    1824:	ad a3       	std	Y+37, r26	; 0x25
         		LCD_displayStringRowColumn(0,4,"INVALID");
         		_delay_ms(DELAY_Keypad);
         	}

            }while (checkPW_Flag == 0);
    1826:	be a3       	std	Y+38, r27	; 0x26
    1828:	6b a1       	ldd	r22, Y+35	; 0x23
    182a:	7c a1       	ldd	r23, Y+36	; 0x24
    182c:	8d a1       	ldd	r24, Y+37	; 0x25
    182e:	9e a1       	ldd	r25, Y+38	; 0x26
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	30 e0       	ldi	r19, 0x00	; 0

            LCD_clearScreen();
    1834:	40 e8       	ldi	r20, 0x80	; 128
    1836:	5f e3       	ldi	r21, 0x3F	; 63
    1838:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__ltsf2>
    183c:	88 23       	and	r24, r24
    183e:	2c f4       	brge	.+10     	; 0x184a <main+0xd3a>
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	9a a3       	std	Y+34, r25	; 0x22
    1846:	89 a3       	std	Y+33, r24	; 0x21
    1848:	3f c0       	rjmp	.+126    	; 0x18c8 <main+0xdb8>
    184a:	6b a1       	ldd	r22, Y+35	; 0x23
    184c:	7c a1       	ldd	r23, Y+36	; 0x24
    184e:	8d a1       	ldd	r24, Y+37	; 0x25
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1850:	9e a1       	ldd	r25, Y+38	; 0x26
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	3f ef       	ldi	r19, 0xFF	; 255
    1856:	4f e7       	ldi	r20, 0x7F	; 127
    1858:	57 e4       	ldi	r21, 0x47	; 71
    185a:	0e 94 08 03 	call	0x610	; 0x610 <__gtsf2>
    185e:	18 16       	cp	r1, r24
    1860:	4c f5       	brge	.+82     	; 0x18b4 <main+0xda4>
    1862:	6f a1       	ldd	r22, Y+39	; 0x27
    1864:	78 a5       	ldd	r23, Y+40	; 0x28
    1866:	89 a5       	ldd	r24, Y+41	; 0x29
    1868:	9a a5       	ldd	r25, Y+42	; 0x2a
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	40 e2       	ldi	r20, 0x20	; 32
	if (__tmp < 1.0)
    1870:	51 e4       	ldi	r21, 0x41	; 65
    1872:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	bc 01       	movw	r22, r24
    187c:	cd 01       	movw	r24, r26
    187e:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	9a a3       	std	Y+34, r25	; 0x22
		__ticks = 1;
    1888:	89 a3       	std	Y+33, r24	; 0x21
    188a:	0f c0       	rjmp	.+30     	; 0x18aa <main+0xd9a>
    188c:	89 e1       	ldi	r24, 0x19	; 25
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	98 a3       	std	Y+32, r25	; 0x20
	else if (__tmp > 65535)
    1892:	8f 8f       	std	Y+31, r24	; 0x1f
    1894:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1896:	98 a1       	ldd	r25, Y+32	; 0x20
    1898:	01 97       	sbiw	r24, 0x01	; 1
    189a:	f1 f7       	brne	.-4      	; 0x1898 <main+0xd88>
    189c:	98 a3       	std	Y+32, r25	; 0x20
    189e:	8f 8f       	std	Y+31, r24	; 0x1f
    18a0:	89 a1       	ldd	r24, Y+33	; 0x21
    18a2:	9a a1       	ldd	r25, Y+34	; 0x22
    18a4:	01 97       	sbiw	r24, 0x01	; 1
    18a6:	9a a3       	std	Y+34, r25	; 0x22
    18a8:	89 a3       	std	Y+33, r24	; 0x21
    18aa:	89 a1       	ldd	r24, Y+33	; 0x21
    18ac:	9a a1       	ldd	r25, Y+34	; 0x22
    18ae:	00 97       	sbiw	r24, 0x00	; 0
    18b0:	69 f7       	brne	.-38     	; 0x188c <main+0xd7c>
    18b2:	ea cc       	rjmp	.-1580   	; 0x1288 <main+0x778>
    18b4:	6b a1       	ldd	r22, Y+35	; 0x23
    18b6:	7c a1       	ldd	r23, Y+36	; 0x24
    18b8:	8d a1       	ldd	r24, Y+37	; 0x25
    18ba:	9e a1       	ldd	r25, Y+38	; 0x26
    18bc:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    18c0:	dc 01       	movw	r26, r24
    18c2:	cb 01       	movw	r24, r22
    18c4:	9a a3       	std	Y+34, r25	; 0x22
    18c6:	89 a3       	std	Y+33, r24	; 0x21
    18c8:	89 a1       	ldd	r24, Y+33	; 0x21
    18ca:	9a a1       	ldd	r25, Y+34	; 0x22
    18cc:	9e 8f       	std	Y+30, r25	; 0x1e
    18ce:	8d 8f       	std	Y+29, r24	; 0x1d
    18d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18d4:	01 97       	sbiw	r24, 0x01	; 1
    18d6:	f1 f7       	brne	.-4      	; 0x18d4 <main+0xdc4>
    18d8:	9e 8f       	std	Y+30, r25	; 0x1e
    18da:	8d 8f       	std	Y+29, r24	; 0x1d
    18dc:	d5 cc       	rjmp	.-1622   	; 0x1288 <main+0x778>
    18de:	fe 01       	movw	r30, r28
    18e0:	e4 56       	subi	r30, 0x64	; 100
    18e2:	ff 4f       	sbci	r31, 0xFF	; 255
    18e4:	80 81       	ld	r24, Z
    18e6:	8d 32       	cpi	r24, 0x2D	; 45
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18e8:	09 f0       	breq	.+2      	; 0x18ec <main+0xddc>
    18ea:	ce cc       	rjmp	.-1636   	; 0x1288 <main+0x778>
    18ec:	fe 01       	movw	r30, r28
    18ee:	e5 56       	subi	r30, 0x65	; 101
    18f0:	ff 4f       	sbci	r31, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18f2:	10 82       	st	Z, r1
    18f4:	de 01       	movw	r26, r28
    18f6:	a5 56       	subi	r26, 0x65	; 101
    18f8:	bf 4f       	sbci	r27, 0xFF	; 255
    18fa:	fe 01       	movw	r30, r28
    18fc:	e5 56       	subi	r30, 0x65	; 101
    18fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1900:	80 81       	ld	r24, Z
    1902:	8f 5f       	subi	r24, 0xFF	; 255
    1904:	8c 93       	st	X, r24
    1906:	0e 94 43 15 	call	0x2a86	; 0x2a86 <LCD_clearScreen>
    190a:	80 e6       	ldi	r24, 0x60	; 96
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	0e 94 c3 14 	call	0x2986	; 0x2986 <LCD_displayString>
    1912:	ce 01       	movw	r24, r28
    1914:	83 56       	subi	r24, 0x63	; 99
    1916:	9f 4f       	sbci	r25, 0xFF	; 255
    1918:	72 d1       	rcall	.+740    	; 0x1bfe <EnterPW>
    191a:	ce 01       	movw	r24, r28
    191c:	83 56       	subi	r24, 0x63	; 99
    191e:	9f 4f       	sbci	r25, 0xFF	; 255
    1920:	8a d2       	rcall	.+1300   	; 0x1e36 <SendPW_UART>
    1922:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <UART_receiveByte>

    ///////////////////////////////////////* PHASE 3 *//////////////////////////////////////////////

  ////////////////////////////////////////  OPEN DOOR  //////////////////////////////////////////////

         else if (command == '-')
    1926:	fe 01       	movw	r30, r28
    1928:	eb 55       	subi	r30, 0x5B	; 91
    192a:	ff 4f       	sbci	r31, 0xFF	; 255
    192c:	80 83       	st	Z, r24
    192e:	80 e0       	ldi	r24, 0x00	; 0
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	a2 e0       	ldi	r26, 0x02	; 2
    	 {

  //////////// ENTER PASSWORD TO CHECK IF PASSWORD MATCHES SAVED PW IN EEPROM AND ACTIVATE MOTOR /////////

    		uint8 count=0;
    1934:	b3 e4       	ldi	r27, 0x43	; 67
    1936:	89 8f       	std	Y+25, r24	; 0x19
    1938:	9a 8f       	std	Y+26, r25	; 0x1a
    193a:	ab 8f       	std	Y+27, r26	; 0x1b
        	do{
        		count++;
    193c:	bc 8f       	std	Y+28, r27	; 0x1c
    193e:	69 8d       	ldd	r22, Y+25	; 0x19
    1940:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1942:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1944:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	4a e7       	ldi	r20, 0x7A	; 122
    194c:	53 e4       	ldi	r21, 0x43	; 67
            						//  ENTERING PASSWORD  //

            LCD_clearScreen();
    194e:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
        	LCD_displayString("Enter Password");
    1952:	dc 01       	movw	r26, r24
    1954:	cb 01       	movw	r24, r22
    1956:	8d 8b       	std	Y+21, r24	; 0x15
    1958:	9e 8b       	std	Y+22, r25	; 0x16
        	EnterPW( password );            					 // SEND ADDRESS OF password[4] TO EnterPW()
    195a:	af 8b       	std	Y+23, r26	; 0x17
    195c:	b8 8f       	std	Y+24, r27	; 0x18
    195e:	6d 89       	ldd	r22, Y+21	; 0x15
    1960:	7e 89       	ldd	r23, Y+22	; 0x16
    1962:	8f 89       	ldd	r24, Y+23	; 0x17
        	SendPW_UART ( password );						 	 // SEND PW TO MC2 via UART
    1964:	98 8d       	ldd	r25, Y+24	; 0x18
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	40 e8       	ldi	r20, 0x80	; 128
    196c:	5f e3       	ldi	r21, 0x3F	; 63
    196e:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__ltsf2>
    1972:	88 23       	and	r24, r24
    1974:	2c f4       	brge	.+10     	; 0x1980 <main+0xe70>
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	9c 8b       	std	Y+20, r25	; 0x14
    197c:	8b 8b       	std	Y+19, r24	; 0x13
    197e:	3f c0       	rjmp	.+126    	; 0x19fe <main+0xeee>
    1980:	6d 89       	ldd	r22, Y+21	; 0x15
    1982:	7e 89       	ldd	r23, Y+22	; 0x16
    1984:	8f 89       	ldd	r24, Y+23	; 0x17
    1986:	98 8d       	ldd	r25, Y+24	; 0x18
    1988:	20 e0       	ldi	r18, 0x00	; 0
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    198a:	3f ef       	ldi	r19, 0xFF	; 255
    198c:	4f e7       	ldi	r20, 0x7F	; 127
    198e:	57 e4       	ldi	r21, 0x47	; 71
    1990:	0e 94 08 03 	call	0x610	; 0x610 <__gtsf2>
    1994:	18 16       	cp	r1, r24
    1996:	4c f5       	brge	.+82     	; 0x19ea <main+0xeda>
    1998:	69 8d       	ldd	r22, Y+25	; 0x19
    199a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    199c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    199e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	40 e2       	ldi	r20, 0x20	; 32
    19a6:	51 e4       	ldi	r21, 0x41	; 65
    19a8:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
	if (__tmp < 1.0)
    19ac:	dc 01       	movw	r26, r24
    19ae:	cb 01       	movw	r24, r22
    19b0:	bc 01       	movw	r22, r24
    19b2:	cd 01       	movw	r24, r26
    19b4:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    19b8:	dc 01       	movw	r26, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	9c 8b       	std	Y+20, r25	; 0x14
    19be:	8b 8b       	std	Y+19, r24	; 0x13
    19c0:	0f c0       	rjmp	.+30     	; 0x19e0 <main+0xed0>
		__ticks = 1;
    19c2:	89 e1       	ldi	r24, 0x19	; 25
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	9a 8b       	std	Y+18, r25	; 0x12
    19c8:	89 8b       	std	Y+17, r24	; 0x11
    19ca:	89 89       	ldd	r24, Y+17	; 0x11
	else if (__tmp > 65535)
    19cc:	9a 89       	ldd	r25, Y+18	; 0x12
    19ce:	01 97       	sbiw	r24, 0x01	; 1
    19d0:	f1 f7       	brne	.-4      	; 0x19ce <main+0xebe>
    19d2:	9a 8b       	std	Y+18, r25	; 0x12
    19d4:	89 8b       	std	Y+17, r24	; 0x11
    19d6:	8b 89       	ldd	r24, Y+19	; 0x13
    19d8:	9c 89       	ldd	r25, Y+20	; 0x14
    19da:	01 97       	sbiw	r24, 0x01	; 1
    19dc:	9c 8b       	std	Y+20, r25	; 0x14
    19de:	8b 8b       	std	Y+19, r24	; 0x13
    19e0:	8b 89       	ldd	r24, Y+19	; 0x13
    19e2:	9c 89       	ldd	r25, Y+20	; 0x14
    19e4:	00 97       	sbiw	r24, 0x00	; 0
    19e6:	69 f7       	brne	.-38     	; 0x19c2 <main+0xeb2>
    19e8:	14 c0       	rjmp	.+40     	; 0x1a12 <main+0xf02>
    19ea:	6d 89       	ldd	r22, Y+21	; 0x15
    19ec:	7e 89       	ldd	r23, Y+22	; 0x16
    19ee:	8f 89       	ldd	r24, Y+23	; 0x17
    19f0:	98 8d       	ldd	r25, Y+24	; 0x18
    19f2:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	9c 8b       	std	Y+20, r25	; 0x14
    19fc:	8b 8b       	std	Y+19, r24	; 0x13
    19fe:	8b 89       	ldd	r24, Y+19	; 0x13
    1a00:	9c 89       	ldd	r25, Y+20	; 0x14
    1a02:	98 8b       	std	Y+16, r25	; 0x10
    1a04:	8f 87       	std	Y+15, r24	; 0x0f
    1a06:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a08:	98 89       	ldd	r25, Y+16	; 0x10
    1a0a:	01 97       	sbiw	r24, 0x01	; 1
    1a0c:	f1 f7       	brne	.-4      	; 0x1a0a <main+0xefa>
    1a0e:	98 8b       	std	Y+16, r25	; 0x10
    1a10:	8f 87       	std	Y+15, r24	; 0x0f
    1a12:	fe 01       	movw	r30, r28
    1a14:	eb 55       	subi	r30, 0x5B	; 91
    1a16:	ff 4f       	sbci	r31, 0xFF	; 255
    1a18:	80 81       	ld	r24, Z
    1a1a:	88 23       	and	r24, r24
    1a1c:	09 f0       	breq	.+2      	; 0x1a20 <main+0xf10>
    1a1e:	7b c0       	rjmp	.+246    	; 0x1b16 <main+0x1006>
    1a20:	0e 94 43 15 	call	0x2a86	; 0x2a86 <LCD_clearScreen>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a24:	2b e7       	ldi	r18, 0x7B	; 123
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	80 e0       	ldi	r24, 0x00	; 0
    1a2a:	64 e0       	ldi	r22, 0x04	; 4
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a2c:	a9 01       	movw	r20, r18
    1a2e:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <LCD_displayStringRowColumn>
    1a32:	80 e0       	ldi	r24, 0x00	; 0
    1a34:	90 e4       	ldi	r25, 0x40	; 64
    1a36:	ac e1       	ldi	r26, 0x1C	; 28
    1a38:	b5 e4       	ldi	r27, 0x45	; 69
    1a3a:	8b 87       	std	Y+11, r24	; 0x0b
    1a3c:	9c 87       	std	Y+12, r25	; 0x0c
    1a3e:	ad 87       	std	Y+13, r26	; 0x0d
    1a40:	be 87       	std	Y+14, r27	; 0x0e
    1a42:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a44:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a46:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a48:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	4a e7       	ldi	r20, 0x7A	; 122
    1a50:	53 e4       	ldi	r21, 0x43	; 67
    1a52:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    1a56:	dc 01       	movw	r26, r24
    1a58:	cb 01       	movw	r24, r22
    1a5a:	8f 83       	std	Y+7, r24	; 0x07
    1a5c:	98 87       	std	Y+8, r25	; 0x08

         	//MC2 WILL SEND -> 1 IF PW'S MATCHES -> 0 PW'S ARE INVALID
         	checkPW_Flag=UART_receiveByte();
         	_delay_ms(DELAY_UART);

         	if (checkPW_Flag == 0)
    1a5e:	a9 87       	std	Y+9, r26	; 0x09
    1a60:	ba 87       	std	Y+10, r27	; 0x0a
    1a62:	6f 81       	ldd	r22, Y+7	; 0x07
    1a64:	78 85       	ldd	r23, Y+8	; 0x08
    1a66:	89 85       	ldd	r24, Y+9	; 0x09
    1a68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
         	{
         		LCD_clearScreen();
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	40 e8       	ldi	r20, 0x80	; 128
    1a70:	5f e3       	ldi	r21, 0x3F	; 63
    1a72:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__ltsf2>
    1a76:	88 23       	and	r24, r24
    1a78:	2c f4       	brge	.+10     	; 0x1a84 <main+0xf74>
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	9e 83       	std	Y+6, r25	; 0x06
    1a80:	8d 83       	std	Y+5, r24	; 0x05
    1a82:	3f c0       	rjmp	.+126    	; 0x1b02 <main+0xff2>
    1a84:	6f 81       	ldd	r22, Y+7	; 0x07
    1a86:	78 85       	ldd	r23, Y+8	; 0x08
    1a88:	89 85       	ldd	r24, Y+9	; 0x09
    1a8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a8e:	3f ef       	ldi	r19, 0xFF	; 255
    1a90:	4f e7       	ldi	r20, 0x7F	; 127
    1a92:	57 e4       	ldi	r21, 0x47	; 71
    1a94:	0e 94 08 03 	call	0x610	; 0x610 <__gtsf2>
    1a98:	18 16       	cp	r1, r24
    1a9a:	4c f5       	brge	.+82     	; 0x1aee <main+0xfde>
    1a9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aa0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aa2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	40 e2       	ldi	r20, 0x20	; 32
    1aaa:	51 e4       	ldi	r21, 0x41	; 65
    1aac:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
	if (__tmp < 1.0)
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	bc 01       	movw	r22, r24
    1ab6:	cd 01       	movw	r24, r26
    1ab8:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1abc:	dc 01       	movw	r26, r24
    1abe:	cb 01       	movw	r24, r22
    1ac0:	9e 83       	std	Y+6, r25	; 0x06
    1ac2:	8d 83       	std	Y+5, r24	; 0x05
    1ac4:	0f c0       	rjmp	.+30     	; 0x1ae4 <main+0xfd4>
		__ticks = 1;
    1ac6:	89 e1       	ldi	r24, 0x19	; 25
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	9c 83       	std	Y+4, r25	; 0x04
    1acc:	8b 83       	std	Y+3, r24	; 0x03
    1ace:	8b 81       	ldd	r24, Y+3	; 0x03
	else if (__tmp > 65535)
    1ad0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad2:	01 97       	sbiw	r24, 0x01	; 1
    1ad4:	f1 f7       	brne	.-4      	; 0x1ad2 <main+0xfc2>
    1ad6:	9c 83       	std	Y+4, r25	; 0x04
    1ad8:	8b 83       	std	Y+3, r24	; 0x03
    1ada:	8d 81       	ldd	r24, Y+5	; 0x05
    1adc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ade:	01 97       	sbiw	r24, 0x01	; 1
    1ae0:	9e 83       	std	Y+6, r25	; 0x06
    1ae2:	8d 83       	std	Y+5, r24	; 0x05
    1ae4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae8:	00 97       	sbiw	r24, 0x00	; 0
    1aea:	69 f7       	brne	.-38     	; 0x1ac6 <main+0xfb6>
    1aec:	14 c0       	rjmp	.+40     	; 0x1b16 <main+0x1006>
    1aee:	6f 81       	ldd	r22, Y+7	; 0x07
    1af0:	78 85       	ldd	r23, Y+8	; 0x08
    1af2:	89 85       	ldd	r24, Y+9	; 0x09
    1af4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af6:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1afa:	dc 01       	movw	r26, r24
    1afc:	cb 01       	movw	r24, r22
    1afe:	9e 83       	std	Y+6, r25	; 0x06
    1b00:	8d 83       	std	Y+5, r24	; 0x05
    1b02:	8d 81       	ldd	r24, Y+5	; 0x05
    1b04:	9e 81       	ldd	r25, Y+6	; 0x06
    1b06:	9a 83       	std	Y+2, r25	; 0x02
    1b08:	89 83       	std	Y+1, r24	; 0x01
    1b0a:	89 81       	ldd	r24, Y+1	; 0x01
    1b0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b0e:	01 97       	sbiw	r24, 0x01	; 1
    1b10:	f1 f7       	brne	.-4      	; 0x1b0e <main+0xffe>
    1b12:	9a 83       	std	Y+2, r25	; 0x02
    1b14:	89 83       	std	Y+1, r24	; 0x01
    1b16:	fe 01       	movw	r30, r28
    1b18:	eb 55       	subi	r30, 0x5B	; 91
    1b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1c:	80 81       	ld	r24, Z
    1b1e:	88 23       	and	r24, r24
    1b20:	39 f4       	brne	.+14     	; 0x1b30 <main+0x1020>
    1b22:	fe 01       	movw	r30, r28
    1b24:	e5 56       	subi	r30, 0x65	; 101
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b26:	ff 4f       	sbci	r31, 0xFF	; 255
    1b28:	80 81       	ld	r24, Z
    1b2a:	83 30       	cpi	r24, 0x03	; 3
    1b2c:	08 f4       	brcc	.+2      	; 0x1b30 <main+0x1020>
    1b2e:	e2 ce       	rjmp	.-572    	; 0x18f4 <main+0xde4>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b30:	fe 01       	movw	r30, r28
    1b32:	eb 55       	subi	r30, 0x5B	; 91
    1b34:	ff 4f       	sbci	r31, 0xFF	; 255
    1b36:	80 81       	ld	r24, Z
    1b38:	88 23       	and	r24, r24
    1b3a:	09 f4       	brne	.+2      	; 0x1b3e <main+0x102e>
    1b3c:	3c c0       	rjmp	.+120    	; 0x1bb6 <main+0x10a6>
    1b3e:	10 92 00 01 	sts	0x0100, r1
    1b42:	10 92 01 01 	sts	0x0101, r1
    1b46:	10 92 02 01 	sts	0x0102, r1
    1b4a:	10 92 03 01 	sts	0x0103, r1
    1b4e:	9b d7       	rcall	.+3894   	; 0x2a86 <LCD_clearScreen>
    1b50:	81 ec       	ldi	r24, 0xC1	; 193
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	18 d7       	rcall	.+3632   	; 0x2986 <LCD_displayString>
    1b56:	80 91 00 01 	lds	r24, 0x0100
    1b5a:	90 91 01 01 	lds	r25, 0x0101
    1b5e:	a0 91 02 01 	lds	r26, 0x0102
         		LCD_displayStringRowColumn(0,4,"INVALID");
         		_delay_ms(DELAY_Keypad);
         	}

            }while (checkPW_Flag== 0 && count < 3);
    1b62:	b0 91 03 01 	lds	r27, 0x0103
    1b66:	80 31       	cpi	r24, 0x10	; 16
    1b68:	91 05       	cpc	r25, r1
    1b6a:	a1 05       	cpc	r26, r1
    1b6c:	b1 05       	cpc	r27, r1
    1b6e:	98 f3       	brcs	.-26     	; 0x1b56 <main+0x1046>
    1b70:	8a d7       	rcall	.+3860   	; 0x2a86 <LCD_clearScreen>
    1b72:	8e ec       	ldi	r24, 0xCE	; 206
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	07 d7       	rcall	.+3598   	; 0x2986 <LCD_displayString>
    1b78:	80 91 00 01 	lds	r24, 0x0100

  ///////////////////////// SEND 1 TO CONTROL ECU IF PW MATCHES ////////////////////////

    			if(checkPW_Flag)
    1b7c:	90 91 01 01 	lds	r25, 0x0101
    1b80:	a0 91 02 01 	lds	r26, 0x0102
    1b84:	b0 91 03 01 	lds	r27, 0x0103
    1b88:	83 31       	cpi	r24, 0x13	; 19
    				{

    				/* DOOR OPENS IN 15 SECONDS AND STAYS OPENED FOR 3 SECONDS AND STARTS
    				 *  CLOSING AGAIN IN 15 SECONDS */

    				SECONDS_T1_MC1 = 0;
    1b8a:	91 05       	cpc	r25, r1
    1b8c:	a1 05       	cpc	r26, r1
    1b8e:	b1 05       	cpc	r27, r1
    1b90:	98 f3       	brcs	.-26     	; 0x1b78 <main+0x1068>
    1b92:	79 d7       	rcall	.+3826   	; 0x2a86 <LCD_clearScreen>
    1b94:	88 ed       	ldi	r24, 0xD8	; 216
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	f6 d6       	rcall	.+3564   	; 0x2986 <LCD_displayString>
    				LCD_clearScreen(); LCD_displayString("Opening Door");
    1b9a:	80 91 00 01 	lds	r24, 0x0100
    1b9e:	90 91 01 01 	lds	r25, 0x0101
    1ba2:	a0 91 02 01 	lds	r26, 0x0102
    				while ( SECONDS_T1_MC1 <= 15);
    1ba6:	b0 91 03 01 	lds	r27, 0x0103
    1baa:	82 32       	cpi	r24, 0x22	; 34
    1bac:	91 05       	cpc	r25, r1
    1bae:	a1 05       	cpc	r26, r1
    1bb0:	b1 05       	cpc	r27, r1
    1bb2:	98 f3       	brcs	.-26     	; 0x1b9a <main+0x108a>
    1bb4:	69 cb       	rjmp	.-2350   	; 0x1288 <main+0x778>
    1bb6:	fe 01       	movw	r30, r28
    1bb8:	eb 55       	subi	r30, 0x5B	; 91
    1bba:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbc:	80 81       	ld	r24, Z
    1bbe:	88 23       	and	r24, r24
    				LCD_clearScreen(); LCD_displayString("Door Open");
    1bc0:	09 f0       	breq	.+2      	; 0x1bc4 <main+0x10b4>
    1bc2:	62 cb       	rjmp	.-2364   	; 0x1288 <main+0x778>
    1bc4:	60 d7       	rcall	.+3776   	; 0x2a86 <LCD_clearScreen>
    1bc6:	25 ee       	ldi	r18, 0xE5	; 229
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	80 e0       	ldi	r24, 0x00	; 0
    				while ( SECONDS_T1_MC1 <= 18);
    1bcc:	65 e0       	ldi	r22, 0x05	; 5
    1bce:	a9 01       	movw	r20, r18
    1bd0:	43 d7       	rcall	.+3718   	; 0x2a58 <LCD_displayStringRowColumn>
    1bd2:	10 92 00 01 	sts	0x0100, r1
    1bd6:	10 92 01 01 	sts	0x0101, r1
    1bda:	10 92 02 01 	sts	0x0102, r1
    1bde:	10 92 03 01 	sts	0x0103, r1
    1be2:	80 91 00 01 	lds	r24, 0x0100
    				LCD_clearScreen(); LCD_displayString("Closing Door");
    1be6:	90 91 01 01 	lds	r25, 0x0101
    1bea:	a0 91 02 01 	lds	r26, 0x0102
    1bee:	b0 91 03 01 	lds	r27, 0x0103
    				while ( SECONDS_T1_MC1 <= 33);
    1bf2:	8c 33       	cpi	r24, 0x3C	; 60
    1bf4:	91 05       	cpc	r25, r1
    1bf6:	a1 05       	cpc	r26, r1
    1bf8:	b1 05       	cpc	r27, r1
    1bfa:	98 f3       	brcs	.-26     	; 0x1be2 <main+0x10d2>
    1bfc:	45 cb       	rjmp	.-2422   	; 0x1288 <main+0x778>

00001bfe <EnterPW>:
  }



void EnterPW(uint8 PW[] )
{
    1bfe:	0f 93       	push	r16
    1c00:	1f 93       	push	r17
    1c02:	df 93       	push	r29
    1c04:	cf 93       	push	r28
    1c06:	cd b7       	in	r28, 0x3d	; 61
    1c08:	de b7       	in	r29, 0x3e	; 62
    1c0a:	6f 97       	sbiw	r28, 0x1f	; 31
    1c0c:	0f b6       	in	r0, 0x3f	; 63
    1c0e:	f8 94       	cli
    1c10:	de bf       	out	0x3e, r29	; 62
    1c12:	0f be       	out	0x3f, r0	; 63
    1c14:	cd bf       	out	0x3d, r28	; 61
    1c16:	9f 8f       	std	Y+31, r25	; 0x1f
    1c18:	8e 8f       	std	Y+30, r24	; 0x1e
	LCD_goToRowColumn(1, 5);
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	65 e0       	ldi	r22, 0x05	; 5
    1c1e:	db d6       	rcall	.+3510   	; 0x29d6 <LCD_goToRowColumn>
    1c20:	1d 8e       	std	Y+29, r1	; 0x1d
	for (uint8 i = 0; i < 5; i++) {
    1c22:	88 c0       	rjmp	.+272    	; 0x1d34 <EnterPW+0x136>
    1c24:	a2 d1       	rcall	.+836    	; 0x1f6a <Keypad_GetPressedKey>
		while ((Keypad_GetPressedKey() != 13) && (i == 4));  // POLLING UNTIL ON BUTTON PRESSED
    1c26:	8d 30       	cpi	r24, 0x0D	; 13
    1c28:	19 f0       	breq	.+6      	; 0x1c30 <EnterPW+0x32>
    1c2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c2c:	84 30       	cpi	r24, 0x04	; 4
    1c2e:	d1 f3       	breq	.-12     	; 0x1c24 <EnterPW+0x26>
    1c30:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c32:	28 2f       	mov	r18, r24

		PW[i] = Keypad_GetPressedKey();
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c38:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1c3a:	8c 01       	movw	r16, r24
    1c3c:	02 0f       	add	r16, r18
    1c3e:	13 1f       	adc	r17, r19
    1c40:	94 d1       	rcall	.+808    	; 0x1f6a <Keypad_GetPressedKey>
    1c42:	f8 01       	movw	r30, r16
    1c44:	80 83       	st	Z, r24
    1c46:	80 e0       	ldi	r24, 0x00	; 0
    1c48:	90 e4       	ldi	r25, 0x40	; 64
    1c4a:	ac e1       	ldi	r26, 0x1C	; 28
    1c4c:	b5 e4       	ldi	r27, 0x45	; 69
    1c4e:	89 8f       	std	Y+25, r24	; 0x19
    1c50:	9a 8f       	std	Y+26, r25	; 0x1a
    1c52:	ab 8f       	std	Y+27, r26	; 0x1b
    1c54:	bc 8f       	std	Y+28, r27	; 0x1c
    1c56:	69 8d       	ldd	r22, Y+25	; 0x19
    1c58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	4a e7       	ldi	r20, 0x7A	; 122
    1c64:	53 e4       	ldi	r21, 0x43	; 67
    1c66:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	8d 8b       	std	Y+21, r24	; 0x15
    1c70:	9e 8b       	std	Y+22, r25	; 0x16
    1c72:	af 8b       	std	Y+23, r26	; 0x17
    1c74:	b8 8f       	std	Y+24, r27	; 0x18
    1c76:	6d 89       	ldd	r22, Y+21	; 0x15
    1c78:	7e 89       	ldd	r23, Y+22	; 0x16
    1c7a:	8f 89       	ldd	r24, Y+23	; 0x17
	if (__tmp < 1.0)
    1c7c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	40 e8       	ldi	r20, 0x80	; 128
    1c84:	5f e3       	ldi	r21, 0x3F	; 63
    1c86:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__ltsf2>
    1c8a:	88 23       	and	r24, r24
    1c8c:	2c f4       	brge	.+10     	; 0x1c98 <EnterPW+0x9a>
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	9c 8b       	std	Y+20, r25	; 0x14
		__ticks = 1;
    1c94:	8b 8b       	std	Y+19, r24	; 0x13
    1c96:	3f c0       	rjmp	.+126    	; 0x1d16 <EnterPW+0x118>
    1c98:	6d 89       	ldd	r22, Y+21	; 0x15
    1c9a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c9c:	8f 89       	ldd	r24, Y+23	; 0x17
	else if (__tmp > 65535)
    1c9e:	98 8d       	ldd	r25, Y+24	; 0x18
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	3f ef       	ldi	r19, 0xFF	; 255
    1ca4:	4f e7       	ldi	r20, 0x7F	; 127
    1ca6:	57 e4       	ldi	r21, 0x47	; 71
    1ca8:	0e 94 08 03 	call	0x610	; 0x610 <__gtsf2>
    1cac:	18 16       	cp	r1, r24
    1cae:	4c f5       	brge	.+82     	; 0x1d02 <EnterPW+0x104>
    1cb0:	69 8d       	ldd	r22, Y+25	; 0x19
    1cb2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cb4:	8b 8d       	ldd	r24, Y+27	; 0x1b
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cb6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	40 e2       	ldi	r20, 0x20	; 32
    1cbe:	51 e4       	ldi	r21, 0x41	; 65
    1cc0:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    1cc4:	dc 01       	movw	r26, r24
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	bc 01       	movw	r22, r24
    1cca:	cd 01       	movw	r24, r26
    1ccc:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	9c 8b       	std	Y+20, r25	; 0x14
    1cd6:	8b 8b       	std	Y+19, r24	; 0x13
    1cd8:	0f c0       	rjmp	.+30     	; 0x1cf8 <EnterPW+0xfa>
    1cda:	89 e1       	ldi	r24, 0x19	; 25
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	9a 8b       	std	Y+18, r25	; 0x12
    1ce0:	89 8b       	std	Y+17, r24	; 0x11
    1ce2:	89 89       	ldd	r24, Y+17	; 0x11
    1ce4:	9a 89       	ldd	r25, Y+18	; 0x12
    1ce6:	01 97       	sbiw	r24, 0x01	; 1
    1ce8:	f1 f7       	brne	.-4      	; 0x1ce6 <EnterPW+0xe8>
    1cea:	9a 8b       	std	Y+18, r25	; 0x12
    1cec:	89 8b       	std	Y+17, r24	; 0x11
    1cee:	8b 89       	ldd	r24, Y+19	; 0x13
    1cf0:	9c 89       	ldd	r25, Y+20	; 0x14
    1cf2:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf4:	9c 8b       	std	Y+20, r25	; 0x14
    1cf6:	8b 8b       	std	Y+19, r24	; 0x13
    1cf8:	8b 89       	ldd	r24, Y+19	; 0x13
    1cfa:	9c 89       	ldd	r25, Y+20	; 0x14
    1cfc:	00 97       	sbiw	r24, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cfe:	69 f7       	brne	.-38     	; 0x1cda <EnterPW+0xdc>
    1d00:	14 c0       	rjmp	.+40     	; 0x1d2a <EnterPW+0x12c>
    1d02:	6d 89       	ldd	r22, Y+21	; 0x15
    1d04:	7e 89       	ldd	r23, Y+22	; 0x16
    1d06:	8f 89       	ldd	r24, Y+23	; 0x17
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d08:	98 8d       	ldd	r25, Y+24	; 0x18
    1d0a:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1d0e:	dc 01       	movw	r26, r24
    1d10:	cb 01       	movw	r24, r22
    1d12:	9c 8b       	std	Y+20, r25	; 0x14
    1d14:	8b 8b       	std	Y+19, r24	; 0x13
    1d16:	8b 89       	ldd	r24, Y+19	; 0x13
    1d18:	9c 89       	ldd	r25, Y+20	; 0x14
    1d1a:	98 8b       	std	Y+16, r25	; 0x10
    1d1c:	8f 87       	std	Y+15, r24	; 0x0f
    1d1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d20:	98 89       	ldd	r25, Y+16	; 0x10
    1d22:	01 97       	sbiw	r24, 0x01	; 1
    1d24:	f1 f7       	brne	.-4      	; 0x1d22 <EnterPW+0x124>
    1d26:	98 8b       	std	Y+16, r25	; 0x10
    1d28:	8f 87       	std	Y+15, r24	; 0x0f
    1d2a:	8a e2       	ldi	r24, 0x2A	; 42
    1d2c:	30 d4       	rcall	.+2144   	; 0x258e <LCD_displayCharacter>
    1d2e:	8d 8d       	ldd	r24, Y+29	; 0x1d
		_delay_ms(DELAY_Keypad);				//DELAY SO KEYPAD DOESN'T REPEAT
		LCD_displayCharacter('*');
    1d30:	8f 5f       	subi	r24, 0xFF	; 255
    1d32:	8d 8f       	std	Y+29, r24	; 0x1d
    1d34:	8d 8d       	ldd	r24, Y+29	; 0x1d


void EnterPW(uint8 PW[] )
{
	LCD_goToRowColumn(1, 5);
	for (uint8 i = 0; i < 5; i++) {
    1d36:	85 30       	cpi	r24, 0x05	; 5
    1d38:	08 f4       	brcc	.+2      	; 0x1d3c <EnterPW+0x13e>
    1d3a:	74 cf       	rjmp	.-280    	; 0x1c24 <EnterPW+0x26>
    1d3c:	80 e0       	ldi	r24, 0x00	; 0
    1d3e:	90 e4       	ldi	r25, 0x40	; 64
    1d40:	ac e1       	ldi	r26, 0x1C	; 28
    1d42:	b5 e4       	ldi	r27, 0x45	; 69
    1d44:	8b 87       	std	Y+11, r24	; 0x0b
    1d46:	9c 87       	std	Y+12, r25	; 0x0c
    1d48:	ad 87       	std	Y+13, r26	; 0x0d
    1d4a:	be 87       	std	Y+14, r27	; 0x0e
    1d4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d50:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d52:	9e 85       	ldd	r25, Y+14	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	4a e7       	ldi	r20, 0x7A	; 122
    1d5a:	53 e4       	ldi	r21, 0x43	; 67
    1d5c:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    1d60:	dc 01       	movw	r26, r24
    1d62:	cb 01       	movw	r24, r22
    1d64:	8f 83       	std	Y+7, r24	; 0x07
    1d66:	98 87       	std	Y+8, r25	; 0x08
    1d68:	a9 87       	std	Y+9, r26	; 0x09
    1d6a:	ba 87       	std	Y+10, r27	; 0x0a
    1d6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d6e:	78 85       	ldd	r23, Y+8	; 0x08
    1d70:	89 85       	ldd	r24, Y+9	; 0x09
    1d72:	9a 85       	ldd	r25, Y+10	; 0x0a
	if (__tmp < 1.0)
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	40 e8       	ldi	r20, 0x80	; 128
    1d7a:	5f e3       	ldi	r21, 0x3F	; 63
    1d7c:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__ltsf2>
    1d80:	88 23       	and	r24, r24
    1d82:	2c f4       	brge	.+10     	; 0x1d8e <EnterPW+0x190>
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	9e 83       	std	Y+6, r25	; 0x06
    1d8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
    1d8c:	3f c0       	rjmp	.+126    	; 0x1e0c <EnterPW+0x20e>
    1d8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d90:	78 85       	ldd	r23, Y+8	; 0x08
    1d92:	89 85       	ldd	r24, Y+9	; 0x09
    1d94:	9a 85       	ldd	r25, Y+10	; 0x0a
	else if (__tmp > 65535)
    1d96:	20 e0       	ldi	r18, 0x00	; 0
    1d98:	3f ef       	ldi	r19, 0xFF	; 255
    1d9a:	4f e7       	ldi	r20, 0x7F	; 127
    1d9c:	57 e4       	ldi	r21, 0x47	; 71
    1d9e:	0e 94 08 03 	call	0x610	; 0x610 <__gtsf2>
    1da2:	18 16       	cp	r1, r24
    1da4:	4c f5       	brge	.+82     	; 0x1df8 <EnterPW+0x1fa>
    1da6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1da8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1daa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dac:	9e 85       	ldd	r25, Y+14	; 0x0e
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	40 e2       	ldi	r20, 0x20	; 32
    1db4:	51 e4       	ldi	r21, 0x41	; 65
    1db6:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	bc 01       	movw	r22, r24
    1dc0:	cd 01       	movw	r24, r26
    1dc2:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	cb 01       	movw	r24, r22
    1dca:	9e 83       	std	Y+6, r25	; 0x06
    1dcc:	8d 83       	std	Y+5, r24	; 0x05
    1dce:	0f c0       	rjmp	.+30     	; 0x1dee <EnterPW+0x1f0>
    1dd0:	89 e1       	ldi	r24, 0x19	; 25
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	9c 83       	std	Y+4, r25	; 0x04
    1dd6:	8b 83       	std	Y+3, r24	; 0x03
    1dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dda:	9c 81       	ldd	r25, Y+4	; 0x04
    1ddc:	01 97       	sbiw	r24, 0x01	; 1
    1dde:	f1 f7       	brne	.-4      	; 0x1ddc <EnterPW+0x1de>
    1de0:	9c 83       	std	Y+4, r25	; 0x04
    1de2:	8b 83       	std	Y+3, r24	; 0x03
    1de4:	8d 81       	ldd	r24, Y+5	; 0x05
    1de6:	9e 81       	ldd	r25, Y+6	; 0x06
    1de8:	01 97       	sbiw	r24, 0x01	; 1
    1dea:	9e 83       	std	Y+6, r25	; 0x06
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dec:	8d 83       	std	Y+5, r24	; 0x05
    1dee:	8d 81       	ldd	r24, Y+5	; 0x05
    1df0:	9e 81       	ldd	r25, Y+6	; 0x06
    1df2:	00 97       	sbiw	r24, 0x00	; 0
    1df4:	69 f7       	brne	.-38     	; 0x1dd0 <EnterPW+0x1d2>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df6:	14 c0       	rjmp	.+40     	; 0x1e20 <EnterPW+0x222>
    1df8:	6f 81       	ldd	r22, Y+7	; 0x07
    1dfa:	78 85       	ldd	r23, Y+8	; 0x08
    1dfc:	89 85       	ldd	r24, Y+9	; 0x09
    1dfe:	9a 85       	ldd	r25, Y+10	; 0x0a
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e00:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1e04:	dc 01       	movw	r26, r24
    1e06:	cb 01       	movw	r24, r22
    1e08:	9e 83       	std	Y+6, r25	; 0x06
    1e0a:	8d 83       	std	Y+5, r24	; 0x05
    1e0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e10:	9a 83       	std	Y+2, r25	; 0x02
    1e12:	89 83       	std	Y+1, r24	; 0x01
    1e14:	89 81       	ldd	r24, Y+1	; 0x01
    1e16:	9a 81       	ldd	r25, Y+2	; 0x02
    1e18:	01 97       	sbiw	r24, 0x01	; 1
    1e1a:	f1 f7       	brne	.-4      	; 0x1e18 <EnterPW+0x21a>
    1e1c:	9a 83       	std	Y+2, r25	; 0x02
    1e1e:	89 83       	std	Y+1, r24	; 0x01
    1e20:	6f 96       	adiw	r28, 0x1f	; 31
    1e22:	0f b6       	in	r0, 0x3f	; 63
    1e24:	f8 94       	cli
    1e26:	de bf       	out	0x3e, r29	; 62
		PW[i] = Keypad_GetPressedKey();
		_delay_ms(DELAY_Keypad);				//DELAY SO KEYPAD DOESN'T REPEAT
		LCD_displayCharacter('*');
	}
	_delay_ms(DELAY_Keypad);
}
    1e28:	0f be       	out	0x3f, r0	; 63
    1e2a:	cd bf       	out	0x3d, r28	; 61
    1e2c:	cf 91       	pop	r28
    1e2e:	df 91       	pop	r29
    1e30:	1f 91       	pop	r17
    1e32:	0f 91       	pop	r16
    1e34:	08 95       	ret

00001e36 <SendPW_UART>:


void SendPW_UART( uint8 PW[] )
{
    1e36:	df 93       	push	r29
    1e38:	cf 93       	push	r28
    1e3a:	cd b7       	in	r28, 0x3d	; 61
    1e3c:	de b7       	in	r29, 0x3e	; 62
    1e3e:	61 97       	sbiw	r28, 0x11	; 17
    1e40:	0f b6       	in	r0, 0x3f	; 63
    1e42:	f8 94       	cli
    1e44:	de bf       	out	0x3e, r29	; 62
    1e46:	0f be       	out	0x3f, r0	; 63
    1e48:	cd bf       	out	0x3d, r28	; 61
    1e4a:	99 8b       	std	Y+17, r25	; 0x11
    1e4c:	88 8b       	std	Y+16, r24	; 0x10
		for (uint8 i=0 ; i<4 ; i++)
    1e4e:	1f 86       	std	Y+15, r1	; 0x0f
    1e50:	7f c0       	rjmp	.+254    	; 0x1f50 <SendPW_UART+0x11a>
		{
			UART_sendByte( PW[i] );
    1e52:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e54:	28 2f       	mov	r18, r24
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	88 89       	ldd	r24, Y+16	; 0x10
    1e5a:	99 89       	ldd	r25, Y+17	; 0x11
    1e5c:	fc 01       	movw	r30, r24
    1e5e:	e2 0f       	add	r30, r18
    1e60:	f3 1f       	adc	r31, r19
    1e62:	80 81       	ld	r24, Z
    1e64:	c0 d7       	rcall	.+3968   	; 0x2de6 <UART_sendByte>
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	a2 e0       	ldi	r26, 0x02	; 2
    1e6c:	b3 e4       	ldi	r27, 0x43	; 67
    1e6e:	8b 87       	std	Y+11, r24	; 0x0b
    1e70:	9c 87       	std	Y+12, r25	; 0x0c
    1e72:	ad 87       	std	Y+13, r26	; 0x0d
    1e74:	be 87       	std	Y+14, r27	; 0x0e
    1e76:	6b 85       	ldd	r22, Y+11	; 0x0b
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e78:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	4a e7       	ldi	r20, 0x7A	; 122
    1e84:	53 e4       	ldi	r21, 0x43	; 67
    1e86:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    1e8a:	dc 01       	movw	r26, r24
    1e8c:	cb 01       	movw	r24, r22
    1e8e:	8f 83       	std	Y+7, r24	; 0x07
    1e90:	98 87       	std	Y+8, r25	; 0x08
    1e92:	a9 87       	std	Y+9, r26	; 0x09
    1e94:	ba 87       	std	Y+10, r27	; 0x0a
    1e96:	6f 81       	ldd	r22, Y+7	; 0x07
	if (__tmp < 1.0)
    1e98:	78 85       	ldd	r23, Y+8	; 0x08
    1e9a:	89 85       	ldd	r24, Y+9	; 0x09
    1e9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	40 e8       	ldi	r20, 0x80	; 128
    1ea4:	5f e3       	ldi	r21, 0x3F	; 63
    1ea6:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__ltsf2>
    1eaa:	88 23       	and	r24, r24
    1eac:	2c f4       	brge	.+10     	; 0x1eb8 <SendPW_UART+0x82>
    1eae:	81 e0       	ldi	r24, 0x01	; 1
		__ticks = 1;
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	9e 83       	std	Y+6, r25	; 0x06
    1eb4:	8d 83       	std	Y+5, r24	; 0x05
    1eb6:	3f c0       	rjmp	.+126    	; 0x1f36 <SendPW_UART+0x100>
    1eb8:	6f 81       	ldd	r22, Y+7	; 0x07
	else if (__tmp > 65535)
    1eba:	78 85       	ldd	r23, Y+8	; 0x08
    1ebc:	89 85       	ldd	r24, Y+9	; 0x09
    1ebe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ec0:	20 e0       	ldi	r18, 0x00	; 0
    1ec2:	3f ef       	ldi	r19, 0xFF	; 255
    1ec4:	4f e7       	ldi	r20, 0x7F	; 127
    1ec6:	57 e4       	ldi	r21, 0x47	; 71
    1ec8:	0e 94 08 03 	call	0x610	; 0x610 <__gtsf2>
    1ecc:	18 16       	cp	r1, r24
    1ece:	4c f5       	brge	.+82     	; 0x1f22 <SendPW_UART+0xec>
    1ed0:	6b 85       	ldd	r22, Y+11	; 0x0b
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ed4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ed6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	40 e2       	ldi	r20, 0x20	; 32
    1ede:	51 e4       	ldi	r21, 0x41	; 65
    1ee0:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    1ee4:	dc 01       	movw	r26, r24
    1ee6:	cb 01       	movw	r24, r22
    1ee8:	bc 01       	movw	r22, r24
    1eea:	cd 01       	movw	r24, r26
    1eec:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	9e 83       	std	Y+6, r25	; 0x06
    1ef6:	8d 83       	std	Y+5, r24	; 0x05
    1ef8:	0f c0       	rjmp	.+30     	; 0x1f18 <SendPW_UART+0xe2>
    1efa:	89 e1       	ldi	r24, 0x19	; 25
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	9c 83       	std	Y+4, r25	; 0x04
    1f00:	8b 83       	std	Y+3, r24	; 0x03
    1f02:	8b 81       	ldd	r24, Y+3	; 0x03
    1f04:	9c 81       	ldd	r25, Y+4	; 0x04
    1f06:	01 97       	sbiw	r24, 0x01	; 1
    1f08:	f1 f7       	brne	.-4      	; 0x1f06 <SendPW_UART+0xd0>
    1f0a:	9c 83       	std	Y+4, r25	; 0x04
    1f0c:	8b 83       	std	Y+3, r24	; 0x03
    1f0e:	8d 81       	ldd	r24, Y+5	; 0x05
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f10:	9e 81       	ldd	r25, Y+6	; 0x06
    1f12:	01 97       	sbiw	r24, 0x01	; 1
    1f14:	9e 83       	std	Y+6, r25	; 0x06
    1f16:	8d 83       	std	Y+5, r24	; 0x05
    1f18:	8d 81       	ldd	r24, Y+5	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1c:	00 97       	sbiw	r24, 0x00	; 0
    1f1e:	69 f7       	brne	.-38     	; 0x1efa <SendPW_UART+0xc4>
    1f20:	14 c0       	rjmp	.+40     	; 0x1f4a <SendPW_UART+0x114>
    1f22:	6f 81       	ldd	r22, Y+7	; 0x07
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f24:	78 85       	ldd	r23, Y+8	; 0x08
    1f26:	89 85       	ldd	r24, Y+9	; 0x09
    1f28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f2a:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1f2e:	dc 01       	movw	r26, r24
    1f30:	cb 01       	movw	r24, r22
    1f32:	9e 83       	std	Y+6, r25	; 0x06
    1f34:	8d 83       	std	Y+5, r24	; 0x05
    1f36:	8d 81       	ldd	r24, Y+5	; 0x05
    1f38:	9e 81       	ldd	r25, Y+6	; 0x06
    1f3a:	9a 83       	std	Y+2, r25	; 0x02
    1f3c:	89 83       	std	Y+1, r24	; 0x01
    1f3e:	89 81       	ldd	r24, Y+1	; 0x01
    1f40:	9a 81       	ldd	r25, Y+2	; 0x02
    1f42:	01 97       	sbiw	r24, 0x01	; 1
    1f44:	f1 f7       	brne	.-4      	; 0x1f42 <SendPW_UART+0x10c>
    1f46:	9a 83       	std	Y+2, r25	; 0x02
    1f48:	89 83       	std	Y+1, r24	; 0x01
    1f4a:	8f 85       	ldd	r24, Y+15	; 0x0f
}


void SendPW_UART( uint8 PW[] )
{
		for (uint8 i=0 ; i<4 ; i++)
    1f4c:	8f 5f       	subi	r24, 0xFF	; 255
    1f4e:	8f 87       	std	Y+15, r24	; 0x0f
    1f50:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f52:	84 30       	cpi	r24, 0x04	; 4
    1f54:	08 f4       	brcc	.+2      	; 0x1f58 <SendPW_UART+0x122>
    1f56:	7d cf       	rjmp	.-262    	; 0x1e52 <SendPW_UART+0x1c>
    1f58:	61 96       	adiw	r28, 0x11	; 17
		{
			UART_sendByte( PW[i] );
			_delay_ms(DELAY_UART);
		}

}
    1f5a:	0f b6       	in	r0, 0x3f	; 63
    1f5c:	f8 94       	cli
    1f5e:	de bf       	out	0x3e, r29	; 62
    1f60:	0f be       	out	0x3f, r0	; 63
    1f62:	cd bf       	out	0x3d, r28	; 61
    1f64:	cf 91       	pop	r28
    1f66:	df 91       	pop	r29
    1f68:	08 95       	ret

00001f6a <Keypad_GetPressedKey>:
#endif

									// 			FUNCTIONS		 //

uint8 Keypad_GetPressedKey()
{
    1f6a:	df 93       	push	r29
    1f6c:	cf 93       	push	r28
    1f6e:	00 d0       	rcall	.+0      	; 0x1f70 <Keypad_GetPressedKey+0x6>
    1f70:	cd b7       	in	r28, 0x3d	; 61
    1f72:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;

	while(1)
	{
		for (col=0; col < N_COL ; col++)
    1f74:	1a 82       	std	Y+2, r1	; 0x02
    1f76:	4b c0       	rjmp	.+150    	; 0x200e <Keypad_GetPressedKey+0xa4>
		{
			KEYPAD_PORT_DIR = (0b00010000<<col);  // Column pins will be outputs one at a time
    1f78:	ea e3       	ldi	r30, 0x3A	; 58
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7e:	28 2f       	mov	r18, r24
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	80 e1       	ldi	r24, 0x10	; 16
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	02 c0       	rjmp	.+4      	; 0x1f8c <Keypad_GetPressedKey+0x22>
    1f88:	88 0f       	add	r24, r24
    1f8a:	99 1f       	adc	r25, r25
    1f8c:	2a 95       	dec	r18
    1f8e:	e2 f7       	brpl	.-8      	; 0x1f88 <Keypad_GetPressedKey+0x1e>
    1f90:	80 83       	st	Z, r24
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); //Enabling Internal pull-ups (except at output pin)
    1f92:	eb e3       	ldi	r30, 0x3B	; 59
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	8a 81       	ldd	r24, Y+2	; 0x02
    1f98:	28 2f       	mov	r18, r24
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	80 e1       	ldi	r24, 0x10	; 16
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	02 2e       	mov	r0, r18
    1fa2:	02 c0       	rjmp	.+4      	; 0x1fa8 <Keypad_GetPressedKey+0x3e>
    1fa4:	88 0f       	add	r24, r24
    1fa6:	99 1f       	adc	r25, r25
    1fa8:	0a 94       	dec	r0
    1faa:	e2 f7       	brpl	.-8      	; 0x1fa4 <Keypad_GetPressedKey+0x3a>
    1fac:	80 95       	com	r24
    1fae:	80 83       	st	Z, r24


			for (row=0 ; row < N_ROW ; row++)
    1fb0:	19 82       	std	Y+1, r1	; 0x01
    1fb2:	27 c0       	rjmp	.+78     	; 0x2002 <Keypad_GetPressedKey+0x98>
			{
				if (BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) // Check the row if it equals 0
    1fb4:	e9 e3       	ldi	r30, 0x39	; 57
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	80 81       	ld	r24, Z
    1fba:	28 2f       	mov	r18, r24
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	89 81       	ldd	r24, Y+1	; 0x01
    1fc0:	88 2f       	mov	r24, r24
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	a9 01       	movw	r20, r18
    1fc6:	02 c0       	rjmp	.+4      	; 0x1fcc <Keypad_GetPressedKey+0x62>
    1fc8:	55 95       	asr	r21
    1fca:	47 95       	ror	r20
    1fcc:	8a 95       	dec	r24
    1fce:	e2 f7       	brpl	.-8      	; 0x1fc8 <Keypad_GetPressedKey+0x5e>
    1fd0:	ca 01       	movw	r24, r20
    1fd2:	81 70       	andi	r24, 0x01	; 1
    1fd4:	90 70       	andi	r25, 0x00	; 0
    1fd6:	00 97       	sbiw	r24, 0x00	; 0
    1fd8:	89 f4       	brne	.+34     	; 0x1ffc <Keypad_GetPressedKey+0x92>
				{
					#if N_COL == 3
					return Keypad_4x3_AdjustKeyNumber((row*N_COL)+col+1);

					#elif N_COL == 4
					return Keypad_4x4_AdjustKeyNumber((row*N_COL)+col+1);
    1fda:	89 81       	ldd	r24, Y+1	; 0x01
    1fdc:	88 2f       	mov	r24, r24
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	88 0f       	add	r24, r24
    1fe2:	99 1f       	adc	r25, r25
    1fe4:	88 0f       	add	r24, r24
    1fe6:	99 1f       	adc	r25, r25
    1fe8:	98 2f       	mov	r25, r24
    1fea:	8a 81       	ldd	r24, Y+2	; 0x02
    1fec:	89 0f       	add	r24, r25
    1fee:	8f 5f       	subi	r24, 0xFF	; 255
    1ff0:	13 d0       	rcall	.+38     	; 0x2018 <Keypad_4x4_AdjustKeyNumber>
    1ff2:	0f 90       	pop	r0
					#endif
				}
			}
		}
	}
}
    1ff4:	0f 90       	pop	r0
    1ff6:	cf 91       	pop	r28
    1ff8:	df 91       	pop	r29
    1ffa:	08 95       	ret
    1ffc:	89 81       	ldd	r24, Y+1	; 0x01
		{
			KEYPAD_PORT_DIR = (0b00010000<<col);  // Column pins will be outputs one at a time
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); //Enabling Internal pull-ups (except at output pin)


			for (row=0 ; row < N_ROW ; row++)
    1ffe:	8f 5f       	subi	r24, 0xFF	; 255
    2000:	89 83       	std	Y+1, r24	; 0x01
    2002:	89 81       	ldd	r24, Y+1	; 0x01
    2004:	84 30       	cpi	r24, 0x04	; 4
    2006:	b0 f2       	brcs	.-84     	; 0x1fb4 <Keypad_GetPressedKey+0x4a>
    2008:	8a 81       	ldd	r24, Y+2	; 0x02
{
	uint8 col,row;

	while(1)
	{
		for (col=0; col < N_COL ; col++)
    200a:	8f 5f       	subi	r24, 0xFF	; 255
    200c:	8a 83       	std	Y+2, r24	; 0x02
    200e:	8a 81       	ldd	r24, Y+2	; 0x02
    2010:	84 30       	cpi	r24, 0x04	; 4
    2012:	08 f4       	brcc	.+2      	; 0x2016 <Keypad_GetPressedKey+0xac>
    2014:	b1 cf       	rjmp	.-158    	; 0x1f78 <Keypad_GetPressedKey+0xe>
    2016:	ae cf       	rjmp	.-164    	; 0x1f74 <Keypad_GetPressedKey+0xa>

00002018 <Keypad_4x4_AdjustKeyNumber>:

	}
}

static uint8 Keypad_4x4_AdjustKeyNumber(uint8 button)
{
    2018:	df 93       	push	r29
    201a:	cf 93       	push	r28
    201c:	00 d0       	rcall	.+0      	; 0x201e <Keypad_4x4_AdjustKeyNumber+0x6>
    201e:	00 d0       	rcall	.+0      	; 0x2020 <Keypad_4x4_AdjustKeyNumber+0x8>
    2020:	cd b7       	in	r28, 0x3d	; 61
    2022:	de b7       	in	r29, 0x3e	; 62
    2024:	89 83       	std	Y+1, r24	; 0x01
	switch(button)
    2026:	89 81       	ldd	r24, Y+1	; 0x01
    2028:	28 2f       	mov	r18, r24
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	3c 83       	std	Y+4, r19	; 0x04
    202e:	2b 83       	std	Y+3, r18	; 0x03
    2030:	8b 81       	ldd	r24, Y+3	; 0x03
    2032:	9c 81       	ldd	r25, Y+4	; 0x04
    2034:	88 30       	cpi	r24, 0x08	; 8
    2036:	91 05       	cpc	r25, r1
    2038:	09 f4       	brne	.+2      	; 0x203c <Keypad_4x4_AdjustKeyNumber+0x24>
    203a:	70 c0       	rjmp	.+224    	; 0x211c <Keypad_4x4_AdjustKeyNumber+0x104>
    203c:	2b 81       	ldd	r18, Y+3	; 0x03
    203e:	3c 81       	ldd	r19, Y+4	; 0x04
    2040:	29 30       	cpi	r18, 0x09	; 9
    2042:	31 05       	cpc	r19, r1
    2044:	5c f5       	brge	.+86     	; 0x209c <Keypad_4x4_AdjustKeyNumber+0x84>
    2046:	8b 81       	ldd	r24, Y+3	; 0x03
    2048:	9c 81       	ldd	r25, Y+4	; 0x04
    204a:	84 30       	cpi	r24, 0x04	; 4
    204c:	91 05       	cpc	r25, r1
    204e:	09 f4       	brne	.+2      	; 0x2052 <Keypad_4x4_AdjustKeyNumber+0x3a>
    2050:	59 c0       	rjmp	.+178    	; 0x2104 <Keypad_4x4_AdjustKeyNumber+0xec>
    2052:	2b 81       	ldd	r18, Y+3	; 0x03
    2054:	3c 81       	ldd	r19, Y+4	; 0x04
    2056:	25 30       	cpi	r18, 0x05	; 5
    2058:	31 05       	cpc	r19, r1
    205a:	9c f4       	brge	.+38     	; 0x2082 <Keypad_4x4_AdjustKeyNumber+0x6a>
    205c:	8b 81       	ldd	r24, Y+3	; 0x03
    205e:	9c 81       	ldd	r25, Y+4	; 0x04
    2060:	82 30       	cpi	r24, 0x02	; 2
    2062:	91 05       	cpc	r25, r1
    2064:	09 f4       	brne	.+2      	; 0x2068 <Keypad_4x4_AdjustKeyNumber+0x50>
    2066:	48 c0       	rjmp	.+144    	; 0x20f8 <Keypad_4x4_AdjustKeyNumber+0xe0>
    2068:	2b 81       	ldd	r18, Y+3	; 0x03
    206a:	3c 81       	ldd	r19, Y+4	; 0x04
    206c:	23 30       	cpi	r18, 0x03	; 3
    206e:	31 05       	cpc	r19, r1
    2070:	0c f0       	brlt	.+2      	; 0x2074 <Keypad_4x4_AdjustKeyNumber+0x5c>
    2072:	45 c0       	rjmp	.+138    	; 0x20fe <Keypad_4x4_AdjustKeyNumber+0xe6>
    2074:	8b 81       	ldd	r24, Y+3	; 0x03
    2076:	9c 81       	ldd	r25, Y+4	; 0x04
    2078:	81 30       	cpi	r24, 0x01	; 1
    207a:	91 05       	cpc	r25, r1
    207c:	09 f4       	brne	.+2      	; 0x2080 <Keypad_4x4_AdjustKeyNumber+0x68>
    207e:	39 c0       	rjmp	.+114    	; 0x20f2 <Keypad_4x4_AdjustKeyNumber+0xda>
    2080:	68 c0       	rjmp	.+208    	; 0x2152 <Keypad_4x4_AdjustKeyNumber+0x13a>
    2082:	2b 81       	ldd	r18, Y+3	; 0x03
    2084:	3c 81       	ldd	r19, Y+4	; 0x04
    2086:	26 30       	cpi	r18, 0x06	; 6
    2088:	31 05       	cpc	r19, r1
    208a:	09 f4       	brne	.+2      	; 0x208e <Keypad_4x4_AdjustKeyNumber+0x76>
    208c:	41 c0       	rjmp	.+130    	; 0x2110 <Keypad_4x4_AdjustKeyNumber+0xf8>
    208e:	8b 81       	ldd	r24, Y+3	; 0x03
    2090:	9c 81       	ldd	r25, Y+4	; 0x04
    2092:	87 30       	cpi	r24, 0x07	; 7
    2094:	91 05       	cpc	r25, r1
    2096:	0c f0       	brlt	.+2      	; 0x209a <Keypad_4x4_AdjustKeyNumber+0x82>
    2098:	3e c0       	rjmp	.+124    	; 0x2116 <Keypad_4x4_AdjustKeyNumber+0xfe>
    209a:	37 c0       	rjmp	.+110    	; 0x210a <Keypad_4x4_AdjustKeyNumber+0xf2>
    209c:	2b 81       	ldd	r18, Y+3	; 0x03
    209e:	3c 81       	ldd	r19, Y+4	; 0x04
    20a0:	2c 30       	cpi	r18, 0x0C	; 12
    20a2:	31 05       	cpc	r19, r1
    20a4:	09 f4       	brne	.+2      	; 0x20a8 <Keypad_4x4_AdjustKeyNumber+0x90>
    20a6:	46 c0       	rjmp	.+140    	; 0x2134 <Keypad_4x4_AdjustKeyNumber+0x11c>
    20a8:	8b 81       	ldd	r24, Y+3	; 0x03
    20aa:	9c 81       	ldd	r25, Y+4	; 0x04
    20ac:	8d 30       	cpi	r24, 0x0D	; 13
    20ae:	91 05       	cpc	r25, r1
    20b0:	5c f4       	brge	.+22     	; 0x20c8 <Keypad_4x4_AdjustKeyNumber+0xb0>
    20b2:	2b 81       	ldd	r18, Y+3	; 0x03
    20b4:	3c 81       	ldd	r19, Y+4	; 0x04
    20b6:	2a 30       	cpi	r18, 0x0A	; 10
    20b8:	31 05       	cpc	r19, r1
    20ba:	b1 f1       	breq	.+108    	; 0x2128 <Keypad_4x4_AdjustKeyNumber+0x110>
    20bc:	8b 81       	ldd	r24, Y+3	; 0x03
    20be:	9c 81       	ldd	r25, Y+4	; 0x04
    20c0:	8b 30       	cpi	r24, 0x0B	; 11
    20c2:	91 05       	cpc	r25, r1
    20c4:	a4 f5       	brge	.+104    	; 0x212e <Keypad_4x4_AdjustKeyNumber+0x116>
    20c6:	2d c0       	rjmp	.+90     	; 0x2122 <Keypad_4x4_AdjustKeyNumber+0x10a>
    20c8:	2b 81       	ldd	r18, Y+3	; 0x03
    20ca:	3c 81       	ldd	r19, Y+4	; 0x04
    20cc:	2e 30       	cpi	r18, 0x0E	; 14
    20ce:	31 05       	cpc	r19, r1
    20d0:	b9 f1       	breq	.+110    	; 0x2140 <Keypad_4x4_AdjustKeyNumber+0x128>
    20d2:	8b 81       	ldd	r24, Y+3	; 0x03
    20d4:	9c 81       	ldd	r25, Y+4	; 0x04
    20d6:	8e 30       	cpi	r24, 0x0E	; 14
    20d8:	91 05       	cpc	r25, r1
    20da:	7c f1       	brlt	.+94     	; 0x213a <Keypad_4x4_AdjustKeyNumber+0x122>
    20dc:	2b 81       	ldd	r18, Y+3	; 0x03
    20de:	3c 81       	ldd	r19, Y+4	; 0x04
    20e0:	2f 30       	cpi	r18, 0x0F	; 15
    20e2:	31 05       	cpc	r19, r1
    20e4:	81 f1       	breq	.+96     	; 0x2146 <Keypad_4x4_AdjustKeyNumber+0x12e>
    20e6:	8b 81       	ldd	r24, Y+3	; 0x03
    20e8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ea:	80 31       	cpi	r24, 0x10	; 16
    20ec:	91 05       	cpc	r25, r1
    20ee:	71 f1       	breq	.+92     	; 0x214c <Keypad_4x4_AdjustKeyNumber+0x134>
    20f0:	30 c0       	rjmp	.+96     	; 0x2152 <Keypad_4x4_AdjustKeyNumber+0x13a>
	{
	case 1:  return '7';	 	break;
    20f2:	97 e3       	ldi	r25, 0x37	; 55
    20f4:	9a 83       	std	Y+2, r25	; 0x02
    20f6:	2f c0       	rjmp	.+94     	; 0x2156 <Keypad_4x4_AdjustKeyNumber+0x13e>
	case 2:  return '8';	 	break;
    20f8:	28 e3       	ldi	r18, 0x38	; 56
    20fa:	2a 83       	std	Y+2, r18	; 0x02
    20fc:	2c c0       	rjmp	.+88     	; 0x2156 <Keypad_4x4_AdjustKeyNumber+0x13e>
	case 3:  return '9';	 	break;
    20fe:	39 e3       	ldi	r19, 0x39	; 57
    2100:	3a 83       	std	Y+2, r19	; 0x02
    2102:	29 c0       	rjmp	.+82     	; 0x2156 <Keypad_4x4_AdjustKeyNumber+0x13e>
	case 4:  return '/';	 	break; //ASCII CODE OF DIVIDE
    2104:	8f e2       	ldi	r24, 0x2F	; 47
    2106:	8a 83       	std	Y+2, r24	; 0x02
    2108:	26 c0       	rjmp	.+76     	; 0x2156 <Keypad_4x4_AdjustKeyNumber+0x13e>
	case 5:  return '4';		break;
    210a:	94 e3       	ldi	r25, 0x34	; 52
    210c:	9a 83       	std	Y+2, r25	; 0x02
    210e:	23 c0       	rjmp	.+70     	; 0x2156 <Keypad_4x4_AdjustKeyNumber+0x13e>
	case 6:  return '5';		break;
    2110:	25 e3       	ldi	r18, 0x35	; 53
    2112:	2a 83       	std	Y+2, r18	; 0x02
    2114:	20 c0       	rjmp	.+64     	; 0x2156 <Keypad_4x4_AdjustKeyNumber+0x13e>
	case 7:  return '6';	 	break;
    2116:	36 e3       	ldi	r19, 0x36	; 54
    2118:	3a 83       	std	Y+2, r19	; 0x02
    211a:	1d c0       	rjmp	.+58     	; 0x2156 <Keypad_4x4_AdjustKeyNumber+0x13e>
	case 8:  return '*';		break;
    211c:	8a e2       	ldi	r24, 0x2A	; 42
    211e:	8a 83       	std	Y+2, r24	; 0x02
    2120:	1a c0       	rjmp	.+52     	; 0x2156 <Keypad_4x4_AdjustKeyNumber+0x13e>
	case 9:  return '1'; 	 	break;
    2122:	91 e3       	ldi	r25, 0x31	; 49
    2124:	9a 83       	std	Y+2, r25	; 0x02
    2126:	17 c0       	rjmp	.+46     	; 0x2156 <Keypad_4x4_AdjustKeyNumber+0x13e>
	case 10: return '2';		break;
    2128:	22 e3       	ldi	r18, 0x32	; 50
    212a:	2a 83       	std	Y+2, r18	; 0x02
    212c:	14 c0       	rjmp	.+40     	; 0x2156 <Keypad_4x4_AdjustKeyNumber+0x13e>
	case 11: return '3';	 	break;
    212e:	33 e3       	ldi	r19, 0x33	; 51
    2130:	3a 83       	std	Y+2, r19	; 0x02
    2132:	11 c0       	rjmp	.+34     	; 0x2156 <Keypad_4x4_AdjustKeyNumber+0x13e>
	case 12: return '-';	 	break;
    2134:	8d e2       	ldi	r24, 0x2D	; 45
    2136:	8a 83       	std	Y+2, r24	; 0x02
    2138:	0e c0       	rjmp	.+28     	; 0x2156 <Keypad_4x4_AdjustKeyNumber+0x13e>
	case 13: return 13;		 	break; //ASCII CODE OF ENTER
    213a:	9d e0       	ldi	r25, 0x0D	; 13
    213c:	9a 83       	std	Y+2, r25	; 0x02
    213e:	0b c0       	rjmp	.+22     	; 0x2156 <Keypad_4x4_AdjustKeyNumber+0x13e>
	case 14: return '0';    	break;
    2140:	20 e3       	ldi	r18, 0x30	; 48
    2142:	2a 83       	std	Y+2, r18	; 0x02
    2144:	08 c0       	rjmp	.+16     	; 0x2156 <Keypad_4x4_AdjustKeyNumber+0x13e>
	case 15: return '=';   		break;
    2146:	3d e3       	ldi	r19, 0x3D	; 61
    2148:	3a 83       	std	Y+2, r19	; 0x02
    214a:	05 c0       	rjmp	.+10     	; 0x2156 <Keypad_4x4_AdjustKeyNumber+0x13e>
	case 16: return '+';		break;
    214c:	8b e2       	ldi	r24, 0x2B	; 43
    214e:	8a 83       	std	Y+2, r24	; 0x02
    2150:	02 c0       	rjmp	.+4      	; 0x2156 <Keypad_4x4_AdjustKeyNumber+0x13e>
	default: return button;
    2152:	99 81       	ldd	r25, Y+1	; 0x01
    2154:	9a 83       	std	Y+2, r25	; 0x02
    2156:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    2158:	0f 90       	pop	r0
    215a:	0f 90       	pop	r0
    215c:	0f 90       	pop	r0
    215e:	0f 90       	pop	r0
    2160:	cf 91       	pop	r28
    2162:	df 91       	pop	r29
    2164:	08 95       	ret

00002166 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    2166:	df 93       	push	r29
    2168:	cf 93       	push	r28
    216a:	cd b7       	in	r28, 0x3d	; 61
    216c:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    216e:	a1 e3       	ldi	r26, 0x31	; 49
    2170:	b0 e0       	ldi	r27, 0x00	; 0
    2172:	e1 e3       	ldi	r30, 0x31	; 49
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	80 81       	ld	r24, Z
    2178:	80 67       	ori	r24, 0x70	; 112
    217a:	8c 93       	st	X, r24
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    217c:	e4 e3       	ldi	r30, 0x34	; 52
    217e:	f0 e0       	ldi	r31, 0x00	; 0
    2180:	8f ef       	ldi	r24, 0xFF	; 255
    2182:	80 83       	st	Z, r24
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    2184:	88 e3       	ldi	r24, 0x38	; 56
    2186:	07 d0       	rcall	.+14     	; 0x2196 <LCD_sendCommand>
    2188:	8c e0       	ldi	r24, 0x0C	; 12
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    218a:	05 d0       	rcall	.+10     	; 0x2196 <LCD_sendCommand>
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	03 d0       	rcall	.+6      	; 0x2196 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    2190:	cf 91       	pop	r28
    2192:	df 91       	pop	r29
    2194:	08 95       	ret

00002196 <LCD_sendCommand>:
}

void LCD_sendCommand(uint8 command)
{
    2196:	df 93       	push	r29
    2198:	cf 93       	push	r28
    219a:	cd b7       	in	r28, 0x3d	; 61
    219c:	de b7       	in	r29, 0x3e	; 62
    219e:	e9 97       	sbiw	r28, 0x39	; 57
    21a0:	0f b6       	in	r0, 0x3f	; 63
    21a2:	f8 94       	cli
    21a4:	de bf       	out	0x3e, r29	; 62
    21a6:	0f be       	out	0x3f, r0	; 63
    21a8:	cd bf       	out	0x3d, r28	; 61
    21aa:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    21ac:	a2 e3       	ldi	r26, 0x32	; 50
    21ae:	b0 e0       	ldi	r27, 0x00	; 0
    21b0:	e2 e3       	ldi	r30, 0x32	; 50
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 81       	ld	r24, Z
    21b6:	8f 7e       	andi	r24, 0xEF	; 239
    21b8:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    21ba:	a2 e3       	ldi	r26, 0x32	; 50
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	e2 e3       	ldi	r30, 0x32	; 50
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	8f 7d       	andi	r24, 0xDF	; 223
    21c6:	8c 93       	st	X, r24
    21c8:	80 e0       	ldi	r24, 0x00	; 0
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	a0 e8       	ldi	r26, 0x80	; 128
    21ce:	bf e3       	ldi	r27, 0x3F	; 63
    21d0:	8d ab       	std	Y+53, r24	; 0x35
    21d2:	9e ab       	std	Y+54, r25	; 0x36
    21d4:	af ab       	std	Y+55, r26	; 0x37
    21d6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21d8:	6d a9       	ldd	r22, Y+53	; 0x35
    21da:	7e a9       	ldd	r23, Y+54	; 0x36
    21dc:	8f a9       	ldd	r24, Y+55	; 0x37
    21de:	98 ad       	ldd	r25, Y+56	; 0x38
    21e0:	20 e0       	ldi	r18, 0x00	; 0
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	4a e7       	ldi	r20, 0x7A	; 122
    21e6:	53 e4       	ldi	r21, 0x43	; 67
    21e8:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    21ec:	dc 01       	movw	r26, r24
    21ee:	cb 01       	movw	r24, r22
    21f0:	89 ab       	std	Y+49, r24	; 0x31
    21f2:	9a ab       	std	Y+50, r25	; 0x32
    21f4:	ab ab       	std	Y+51, r26	; 0x33
    21f6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    21f8:	69 a9       	ldd	r22, Y+49	; 0x31
    21fa:	7a a9       	ldd	r23, Y+50	; 0x32
    21fc:	8b a9       	ldd	r24, Y+51	; 0x33
    21fe:	9c a9       	ldd	r25, Y+52	; 0x34
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	40 e8       	ldi	r20, 0x80	; 128
    2206:	5f e3       	ldi	r21, 0x3F	; 63
    2208:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__ltsf2>
    220c:	88 23       	and	r24, r24
    220e:	2c f4       	brge	.+10     	; 0x221a <LCD_sendCommand+0x84>
		__ticks = 1;
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	98 ab       	std	Y+48, r25	; 0x30
    2216:	8f a7       	std	Y+47, r24	; 0x2f
    2218:	3f c0       	rjmp	.+126    	; 0x2298 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    221a:	69 a9       	ldd	r22, Y+49	; 0x31
    221c:	7a a9       	ldd	r23, Y+50	; 0x32
    221e:	8b a9       	ldd	r24, Y+51	; 0x33
    2220:	9c a9       	ldd	r25, Y+52	; 0x34
    2222:	20 e0       	ldi	r18, 0x00	; 0
    2224:	3f ef       	ldi	r19, 0xFF	; 255
    2226:	4f e7       	ldi	r20, 0x7F	; 127
    2228:	57 e4       	ldi	r21, 0x47	; 71
    222a:	0e 94 08 03 	call	0x610	; 0x610 <__gtsf2>
    222e:	18 16       	cp	r1, r24
    2230:	4c f5       	brge	.+82     	; 0x2284 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2232:	6d a9       	ldd	r22, Y+53	; 0x35
    2234:	7e a9       	ldd	r23, Y+54	; 0x36
    2236:	8f a9       	ldd	r24, Y+55	; 0x37
    2238:	98 ad       	ldd	r25, Y+56	; 0x38
    223a:	20 e0       	ldi	r18, 0x00	; 0
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	40 e2       	ldi	r20, 0x20	; 32
    2240:	51 e4       	ldi	r21, 0x41	; 65
    2242:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    2246:	dc 01       	movw	r26, r24
    2248:	cb 01       	movw	r24, r22
    224a:	bc 01       	movw	r22, r24
    224c:	cd 01       	movw	r24, r26
    224e:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    2252:	dc 01       	movw	r26, r24
    2254:	cb 01       	movw	r24, r22
    2256:	98 ab       	std	Y+48, r25	; 0x30
    2258:	8f a7       	std	Y+47, r24	; 0x2f
    225a:	0f c0       	rjmp	.+30     	; 0x227a <LCD_sendCommand+0xe4>
    225c:	89 e1       	ldi	r24, 0x19	; 25
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	9e a7       	std	Y+46, r25	; 0x2e
    2262:	8d a7       	std	Y+45, r24	; 0x2d
    2264:	8d a5       	ldd	r24, Y+45	; 0x2d
    2266:	9e a5       	ldd	r25, Y+46	; 0x2e
    2268:	01 97       	sbiw	r24, 0x01	; 1
    226a:	f1 f7       	brne	.-4      	; 0x2268 <LCD_sendCommand+0xd2>
    226c:	9e a7       	std	Y+46, r25	; 0x2e
    226e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2270:	8f a5       	ldd	r24, Y+47	; 0x2f
    2272:	98 a9       	ldd	r25, Y+48	; 0x30
    2274:	01 97       	sbiw	r24, 0x01	; 1
    2276:	98 ab       	std	Y+48, r25	; 0x30
    2278:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    227a:	8f a5       	ldd	r24, Y+47	; 0x2f
    227c:	98 a9       	ldd	r25, Y+48	; 0x30
    227e:	00 97       	sbiw	r24, 0x00	; 0
    2280:	69 f7       	brne	.-38     	; 0x225c <LCD_sendCommand+0xc6>
    2282:	14 c0       	rjmp	.+40     	; 0x22ac <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2284:	69 a9       	ldd	r22, Y+49	; 0x31
    2286:	7a a9       	ldd	r23, Y+50	; 0x32
    2288:	8b a9       	ldd	r24, Y+51	; 0x33
    228a:	9c a9       	ldd	r25, Y+52	; 0x34
    228c:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    2290:	dc 01       	movw	r26, r24
    2292:	cb 01       	movw	r24, r22
    2294:	98 ab       	std	Y+48, r25	; 0x30
    2296:	8f a7       	std	Y+47, r24	; 0x2f
    2298:	8f a5       	ldd	r24, Y+47	; 0x2f
    229a:	98 a9       	ldd	r25, Y+48	; 0x30
    229c:	9c a7       	std	Y+44, r25	; 0x2c
    229e:	8b a7       	std	Y+43, r24	; 0x2b
    22a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    22a2:	9c a5       	ldd	r25, Y+44	; 0x2c
    22a4:	01 97       	sbiw	r24, 0x01	; 1
    22a6:	f1 f7       	brne	.-4      	; 0x22a4 <LCD_sendCommand+0x10e>
    22a8:	9c a7       	std	Y+44, r25	; 0x2c
    22aa:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    22ac:	a2 e3       	ldi	r26, 0x32	; 50
    22ae:	b0 e0       	ldi	r27, 0x00	; 0
    22b0:	e2 e3       	ldi	r30, 0x32	; 50
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	80 81       	ld	r24, Z
    22b6:	80 64       	ori	r24, 0x40	; 64
    22b8:	8c 93       	st	X, r24
    22ba:	80 e0       	ldi	r24, 0x00	; 0
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	a0 e8       	ldi	r26, 0x80	; 128
    22c0:	bf e3       	ldi	r27, 0x3F	; 63
    22c2:	8f a3       	std	Y+39, r24	; 0x27
    22c4:	98 a7       	std	Y+40, r25	; 0x28
    22c6:	a9 a7       	std	Y+41, r26	; 0x29
    22c8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ca:	6f a1       	ldd	r22, Y+39	; 0x27
    22cc:	78 a5       	ldd	r23, Y+40	; 0x28
    22ce:	89 a5       	ldd	r24, Y+41	; 0x29
    22d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	4a e7       	ldi	r20, 0x7A	; 122
    22d8:	53 e4       	ldi	r21, 0x43	; 67
    22da:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	8b a3       	std	Y+35, r24	; 0x23
    22e4:	9c a3       	std	Y+36, r25	; 0x24
    22e6:	ad a3       	std	Y+37, r26	; 0x25
    22e8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22ea:	6b a1       	ldd	r22, Y+35	; 0x23
    22ec:	7c a1       	ldd	r23, Y+36	; 0x24
    22ee:	8d a1       	ldd	r24, Y+37	; 0x25
    22f0:	9e a1       	ldd	r25, Y+38	; 0x26
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	40 e8       	ldi	r20, 0x80	; 128
    22f8:	5f e3       	ldi	r21, 0x3F	; 63
    22fa:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__ltsf2>
    22fe:	88 23       	and	r24, r24
    2300:	2c f4       	brge	.+10     	; 0x230c <LCD_sendCommand+0x176>
		__ticks = 1;
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	9a a3       	std	Y+34, r25	; 0x22
    2308:	89 a3       	std	Y+33, r24	; 0x21
    230a:	3f c0       	rjmp	.+126    	; 0x238a <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    230c:	6b a1       	ldd	r22, Y+35	; 0x23
    230e:	7c a1       	ldd	r23, Y+36	; 0x24
    2310:	8d a1       	ldd	r24, Y+37	; 0x25
    2312:	9e a1       	ldd	r25, Y+38	; 0x26
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	3f ef       	ldi	r19, 0xFF	; 255
    2318:	4f e7       	ldi	r20, 0x7F	; 127
    231a:	57 e4       	ldi	r21, 0x47	; 71
    231c:	0e 94 08 03 	call	0x610	; 0x610 <__gtsf2>
    2320:	18 16       	cp	r1, r24
    2322:	4c f5       	brge	.+82     	; 0x2376 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2324:	6f a1       	ldd	r22, Y+39	; 0x27
    2326:	78 a5       	ldd	r23, Y+40	; 0x28
    2328:	89 a5       	ldd	r24, Y+41	; 0x29
    232a:	9a a5       	ldd	r25, Y+42	; 0x2a
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	40 e2       	ldi	r20, 0x20	; 32
    2332:	51 e4       	ldi	r21, 0x41	; 65
    2334:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	bc 01       	movw	r22, r24
    233e:	cd 01       	movw	r24, r26
    2340:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	9a a3       	std	Y+34, r25	; 0x22
    234a:	89 a3       	std	Y+33, r24	; 0x21
    234c:	0f c0       	rjmp	.+30     	; 0x236c <LCD_sendCommand+0x1d6>
    234e:	89 e1       	ldi	r24, 0x19	; 25
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	98 a3       	std	Y+32, r25	; 0x20
    2354:	8f 8f       	std	Y+31, r24	; 0x1f
    2356:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2358:	98 a1       	ldd	r25, Y+32	; 0x20
    235a:	01 97       	sbiw	r24, 0x01	; 1
    235c:	f1 f7       	brne	.-4      	; 0x235a <LCD_sendCommand+0x1c4>
    235e:	98 a3       	std	Y+32, r25	; 0x20
    2360:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2362:	89 a1       	ldd	r24, Y+33	; 0x21
    2364:	9a a1       	ldd	r25, Y+34	; 0x22
    2366:	01 97       	sbiw	r24, 0x01	; 1
    2368:	9a a3       	std	Y+34, r25	; 0x22
    236a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    236c:	89 a1       	ldd	r24, Y+33	; 0x21
    236e:	9a a1       	ldd	r25, Y+34	; 0x22
    2370:	00 97       	sbiw	r24, 0x00	; 0
    2372:	69 f7       	brne	.-38     	; 0x234e <LCD_sendCommand+0x1b8>
    2374:	14 c0       	rjmp	.+40     	; 0x239e <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2376:	6b a1       	ldd	r22, Y+35	; 0x23
    2378:	7c a1       	ldd	r23, Y+36	; 0x24
    237a:	8d a1       	ldd	r24, Y+37	; 0x25
    237c:	9e a1       	ldd	r25, Y+38	; 0x26
    237e:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    2382:	dc 01       	movw	r26, r24
    2384:	cb 01       	movw	r24, r22
    2386:	9a a3       	std	Y+34, r25	; 0x22
    2388:	89 a3       	std	Y+33, r24	; 0x21
    238a:	89 a1       	ldd	r24, Y+33	; 0x21
    238c:	9a a1       	ldd	r25, Y+34	; 0x22
    238e:	9e 8f       	std	Y+30, r25	; 0x1e
    2390:	8d 8f       	std	Y+29, r24	; 0x1d
    2392:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2394:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2396:	01 97       	sbiw	r24, 0x01	; 1
    2398:	f1 f7       	brne	.-4      	; 0x2396 <LCD_sendCommand+0x200>
    239a:	9e 8f       	std	Y+30, r25	; 0x1e
    239c:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    239e:	e5 e3       	ldi	r30, 0x35	; 53
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	89 ad       	ldd	r24, Y+57	; 0x39
    23a4:	80 83       	st	Z, r24
    23a6:	80 e0       	ldi	r24, 0x00	; 0
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	a0 e8       	ldi	r26, 0x80	; 128
    23ac:	bf e3       	ldi	r27, 0x3F	; 63
    23ae:	89 8f       	std	Y+25, r24	; 0x19
    23b0:	9a 8f       	std	Y+26, r25	; 0x1a
    23b2:	ab 8f       	std	Y+27, r26	; 0x1b
    23b4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b6:	69 8d       	ldd	r22, Y+25	; 0x19
    23b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	4a e7       	ldi	r20, 0x7A	; 122
    23c4:	53 e4       	ldi	r21, 0x43	; 67
    23c6:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	8d 8b       	std	Y+21, r24	; 0x15
    23d0:	9e 8b       	std	Y+22, r25	; 0x16
    23d2:	af 8b       	std	Y+23, r26	; 0x17
    23d4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23d6:	6d 89       	ldd	r22, Y+21	; 0x15
    23d8:	7e 89       	ldd	r23, Y+22	; 0x16
    23da:	8f 89       	ldd	r24, Y+23	; 0x17
    23dc:	98 8d       	ldd	r25, Y+24	; 0x18
    23de:	20 e0       	ldi	r18, 0x00	; 0
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	40 e8       	ldi	r20, 0x80	; 128
    23e4:	5f e3       	ldi	r21, 0x3F	; 63
    23e6:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__ltsf2>
    23ea:	88 23       	and	r24, r24
    23ec:	2c f4       	brge	.+10     	; 0x23f8 <LCD_sendCommand+0x262>
		__ticks = 1;
    23ee:	81 e0       	ldi	r24, 0x01	; 1
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	9c 8b       	std	Y+20, r25	; 0x14
    23f4:	8b 8b       	std	Y+19, r24	; 0x13
    23f6:	3f c0       	rjmp	.+126    	; 0x2476 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    23f8:	6d 89       	ldd	r22, Y+21	; 0x15
    23fa:	7e 89       	ldd	r23, Y+22	; 0x16
    23fc:	8f 89       	ldd	r24, Y+23	; 0x17
    23fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	3f ef       	ldi	r19, 0xFF	; 255
    2404:	4f e7       	ldi	r20, 0x7F	; 127
    2406:	57 e4       	ldi	r21, 0x47	; 71
    2408:	0e 94 08 03 	call	0x610	; 0x610 <__gtsf2>
    240c:	18 16       	cp	r1, r24
    240e:	4c f5       	brge	.+82     	; 0x2462 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2410:	69 8d       	ldd	r22, Y+25	; 0x19
    2412:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2414:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2416:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	40 e2       	ldi	r20, 0x20	; 32
    241e:	51 e4       	ldi	r21, 0x41	; 65
    2420:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	bc 01       	movw	r22, r24
    242a:	cd 01       	movw	r24, r26
    242c:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    2430:	dc 01       	movw	r26, r24
    2432:	cb 01       	movw	r24, r22
    2434:	9c 8b       	std	Y+20, r25	; 0x14
    2436:	8b 8b       	std	Y+19, r24	; 0x13
    2438:	0f c0       	rjmp	.+30     	; 0x2458 <LCD_sendCommand+0x2c2>
    243a:	89 e1       	ldi	r24, 0x19	; 25
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	9a 8b       	std	Y+18, r25	; 0x12
    2440:	89 8b       	std	Y+17, r24	; 0x11
    2442:	89 89       	ldd	r24, Y+17	; 0x11
    2444:	9a 89       	ldd	r25, Y+18	; 0x12
    2446:	01 97       	sbiw	r24, 0x01	; 1
    2448:	f1 f7       	brne	.-4      	; 0x2446 <LCD_sendCommand+0x2b0>
    244a:	9a 8b       	std	Y+18, r25	; 0x12
    244c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    244e:	8b 89       	ldd	r24, Y+19	; 0x13
    2450:	9c 89       	ldd	r25, Y+20	; 0x14
    2452:	01 97       	sbiw	r24, 0x01	; 1
    2454:	9c 8b       	std	Y+20, r25	; 0x14
    2456:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2458:	8b 89       	ldd	r24, Y+19	; 0x13
    245a:	9c 89       	ldd	r25, Y+20	; 0x14
    245c:	00 97       	sbiw	r24, 0x00	; 0
    245e:	69 f7       	brne	.-38     	; 0x243a <LCD_sendCommand+0x2a4>
    2460:	14 c0       	rjmp	.+40     	; 0x248a <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2462:	6d 89       	ldd	r22, Y+21	; 0x15
    2464:	7e 89       	ldd	r23, Y+22	; 0x16
    2466:	8f 89       	ldd	r24, Y+23	; 0x17
    2468:	98 8d       	ldd	r25, Y+24	; 0x18
    246a:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    246e:	dc 01       	movw	r26, r24
    2470:	cb 01       	movw	r24, r22
    2472:	9c 8b       	std	Y+20, r25	; 0x14
    2474:	8b 8b       	std	Y+19, r24	; 0x13
    2476:	8b 89       	ldd	r24, Y+19	; 0x13
    2478:	9c 89       	ldd	r25, Y+20	; 0x14
    247a:	98 8b       	std	Y+16, r25	; 0x10
    247c:	8f 87       	std	Y+15, r24	; 0x0f
    247e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2480:	98 89       	ldd	r25, Y+16	; 0x10
    2482:	01 97       	sbiw	r24, 0x01	; 1
    2484:	f1 f7       	brne	.-4      	; 0x2482 <LCD_sendCommand+0x2ec>
    2486:	98 8b       	std	Y+16, r25	; 0x10
    2488:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    248a:	a2 e3       	ldi	r26, 0x32	; 50
    248c:	b0 e0       	ldi	r27, 0x00	; 0
    248e:	e2 e3       	ldi	r30, 0x32	; 50
    2490:	f0 e0       	ldi	r31, 0x00	; 0
    2492:	80 81       	ld	r24, Z
    2494:	8f 7b       	andi	r24, 0xBF	; 191
    2496:	8c 93       	st	X, r24
    2498:	80 e0       	ldi	r24, 0x00	; 0
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	a0 e8       	ldi	r26, 0x80	; 128
    249e:	bf e3       	ldi	r27, 0x3F	; 63
    24a0:	8b 87       	std	Y+11, r24	; 0x0b
    24a2:	9c 87       	std	Y+12, r25	; 0x0c
    24a4:	ad 87       	std	Y+13, r26	; 0x0d
    24a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    24aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	4a e7       	ldi	r20, 0x7A	; 122
    24b6:	53 e4       	ldi	r21, 0x43	; 67
    24b8:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22
    24c0:	8f 83       	std	Y+7, r24	; 0x07
    24c2:	98 87       	std	Y+8, r25	; 0x08
    24c4:	a9 87       	std	Y+9, r26	; 0x09
    24c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24c8:	6f 81       	ldd	r22, Y+7	; 0x07
    24ca:	78 85       	ldd	r23, Y+8	; 0x08
    24cc:	89 85       	ldd	r24, Y+9	; 0x09
    24ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	40 e8       	ldi	r20, 0x80	; 128
    24d6:	5f e3       	ldi	r21, 0x3F	; 63
    24d8:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__ltsf2>
    24dc:	88 23       	and	r24, r24
    24de:	2c f4       	brge	.+10     	; 0x24ea <LCD_sendCommand+0x354>
		__ticks = 1;
    24e0:	81 e0       	ldi	r24, 0x01	; 1
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	9e 83       	std	Y+6, r25	; 0x06
    24e6:	8d 83       	std	Y+5, r24	; 0x05
    24e8:	3f c0       	rjmp	.+126    	; 0x2568 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    24ea:	6f 81       	ldd	r22, Y+7	; 0x07
    24ec:	78 85       	ldd	r23, Y+8	; 0x08
    24ee:	89 85       	ldd	r24, Y+9	; 0x09
    24f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	3f ef       	ldi	r19, 0xFF	; 255
    24f6:	4f e7       	ldi	r20, 0x7F	; 127
    24f8:	57 e4       	ldi	r21, 0x47	; 71
    24fa:	0e 94 08 03 	call	0x610	; 0x610 <__gtsf2>
    24fe:	18 16       	cp	r1, r24
    2500:	4c f5       	brge	.+82     	; 0x2554 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2502:	6b 85       	ldd	r22, Y+11	; 0x0b
    2504:	7c 85       	ldd	r23, Y+12	; 0x0c
    2506:	8d 85       	ldd	r24, Y+13	; 0x0d
    2508:	9e 85       	ldd	r25, Y+14	; 0x0e
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	40 e2       	ldi	r20, 0x20	; 32
    2510:	51 e4       	ldi	r21, 0x41	; 65
    2512:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    2516:	dc 01       	movw	r26, r24
    2518:	cb 01       	movw	r24, r22
    251a:	bc 01       	movw	r22, r24
    251c:	cd 01       	movw	r24, r26
    251e:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    2522:	dc 01       	movw	r26, r24
    2524:	cb 01       	movw	r24, r22
    2526:	9e 83       	std	Y+6, r25	; 0x06
    2528:	8d 83       	std	Y+5, r24	; 0x05
    252a:	0f c0       	rjmp	.+30     	; 0x254a <LCD_sendCommand+0x3b4>
    252c:	89 e1       	ldi	r24, 0x19	; 25
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	9c 83       	std	Y+4, r25	; 0x04
    2532:	8b 83       	std	Y+3, r24	; 0x03
    2534:	8b 81       	ldd	r24, Y+3	; 0x03
    2536:	9c 81       	ldd	r25, Y+4	; 0x04
    2538:	01 97       	sbiw	r24, 0x01	; 1
    253a:	f1 f7       	brne	.-4      	; 0x2538 <LCD_sendCommand+0x3a2>
    253c:	9c 83       	std	Y+4, r25	; 0x04
    253e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2540:	8d 81       	ldd	r24, Y+5	; 0x05
    2542:	9e 81       	ldd	r25, Y+6	; 0x06
    2544:	01 97       	sbiw	r24, 0x01	; 1
    2546:	9e 83       	std	Y+6, r25	; 0x06
    2548:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    254a:	8d 81       	ldd	r24, Y+5	; 0x05
    254c:	9e 81       	ldd	r25, Y+6	; 0x06
    254e:	00 97       	sbiw	r24, 0x00	; 0
    2550:	69 f7       	brne	.-38     	; 0x252c <LCD_sendCommand+0x396>
    2552:	14 c0       	rjmp	.+40     	; 0x257c <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2554:	6f 81       	ldd	r22, Y+7	; 0x07
    2556:	78 85       	ldd	r23, Y+8	; 0x08
    2558:	89 85       	ldd	r24, Y+9	; 0x09
    255a:	9a 85       	ldd	r25, Y+10	; 0x0a
    255c:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22
    2564:	9e 83       	std	Y+6, r25	; 0x06
    2566:	8d 83       	std	Y+5, r24	; 0x05
    2568:	8d 81       	ldd	r24, Y+5	; 0x05
    256a:	9e 81       	ldd	r25, Y+6	; 0x06
    256c:	9a 83       	std	Y+2, r25	; 0x02
    256e:	89 83       	std	Y+1, r24	; 0x01
    2570:	89 81       	ldd	r24, Y+1	; 0x01
    2572:	9a 81       	ldd	r25, Y+2	; 0x02
    2574:	01 97       	sbiw	r24, 0x01	; 1
    2576:	f1 f7       	brne	.-4      	; 0x2574 <LCD_sendCommand+0x3de>
    2578:	9a 83       	std	Y+2, r25	; 0x02
    257a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    257c:	e9 96       	adiw	r28, 0x39	; 57
    257e:	0f b6       	in	r0, 0x3f	; 63
    2580:	f8 94       	cli
    2582:	de bf       	out	0x3e, r29	; 62
    2584:	0f be       	out	0x3f, r0	; 63
    2586:	cd bf       	out	0x3d, r28	; 61
    2588:	cf 91       	pop	r28
    258a:	df 91       	pop	r29
    258c:	08 95       	ret

0000258e <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    258e:	df 93       	push	r29
    2590:	cf 93       	push	r28
    2592:	cd b7       	in	r28, 0x3d	; 61
    2594:	de b7       	in	r29, 0x3e	; 62
    2596:	e9 97       	sbiw	r28, 0x39	; 57
    2598:	0f b6       	in	r0, 0x3f	; 63
    259a:	f8 94       	cli
    259c:	de bf       	out	0x3e, r29	; 62
    259e:	0f be       	out	0x3f, r0	; 63
    25a0:	cd bf       	out	0x3d, r28	; 61
    25a2:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    25a4:	a2 e3       	ldi	r26, 0x32	; 50
    25a6:	b0 e0       	ldi	r27, 0x00	; 0
    25a8:	e2 e3       	ldi	r30, 0x32	; 50
    25aa:	f0 e0       	ldi	r31, 0x00	; 0
    25ac:	80 81       	ld	r24, Z
    25ae:	80 61       	ori	r24, 0x10	; 16
    25b0:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    25b2:	a2 e3       	ldi	r26, 0x32	; 50
    25b4:	b0 e0       	ldi	r27, 0x00	; 0
    25b6:	e2 e3       	ldi	r30, 0x32	; 50
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	80 81       	ld	r24, Z
    25bc:	8f 7d       	andi	r24, 0xDF	; 223
    25be:	8c 93       	st	X, r24
    25c0:	80 e0       	ldi	r24, 0x00	; 0
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	a0 e8       	ldi	r26, 0x80	; 128
    25c6:	bf e3       	ldi	r27, 0x3F	; 63
    25c8:	8d ab       	std	Y+53, r24	; 0x35
    25ca:	9e ab       	std	Y+54, r25	; 0x36
    25cc:	af ab       	std	Y+55, r26	; 0x37
    25ce:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25d0:	6d a9       	ldd	r22, Y+53	; 0x35
    25d2:	7e a9       	ldd	r23, Y+54	; 0x36
    25d4:	8f a9       	ldd	r24, Y+55	; 0x37
    25d6:	98 ad       	ldd	r25, Y+56	; 0x38
    25d8:	20 e0       	ldi	r18, 0x00	; 0
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	4a e7       	ldi	r20, 0x7A	; 122
    25de:	53 e4       	ldi	r21, 0x43	; 67
    25e0:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    25e4:	dc 01       	movw	r26, r24
    25e6:	cb 01       	movw	r24, r22
    25e8:	89 ab       	std	Y+49, r24	; 0x31
    25ea:	9a ab       	std	Y+50, r25	; 0x32
    25ec:	ab ab       	std	Y+51, r26	; 0x33
    25ee:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    25f0:	69 a9       	ldd	r22, Y+49	; 0x31
    25f2:	7a a9       	ldd	r23, Y+50	; 0x32
    25f4:	8b a9       	ldd	r24, Y+51	; 0x33
    25f6:	9c a9       	ldd	r25, Y+52	; 0x34
    25f8:	20 e0       	ldi	r18, 0x00	; 0
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	40 e8       	ldi	r20, 0x80	; 128
    25fe:	5f e3       	ldi	r21, 0x3F	; 63
    2600:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__ltsf2>
    2604:	88 23       	and	r24, r24
    2606:	2c f4       	brge	.+10     	; 0x2612 <LCD_displayCharacter+0x84>
		__ticks = 1;
    2608:	81 e0       	ldi	r24, 0x01	; 1
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	98 ab       	std	Y+48, r25	; 0x30
    260e:	8f a7       	std	Y+47, r24	; 0x2f
    2610:	3f c0       	rjmp	.+126    	; 0x2690 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    2612:	69 a9       	ldd	r22, Y+49	; 0x31
    2614:	7a a9       	ldd	r23, Y+50	; 0x32
    2616:	8b a9       	ldd	r24, Y+51	; 0x33
    2618:	9c a9       	ldd	r25, Y+52	; 0x34
    261a:	20 e0       	ldi	r18, 0x00	; 0
    261c:	3f ef       	ldi	r19, 0xFF	; 255
    261e:	4f e7       	ldi	r20, 0x7F	; 127
    2620:	57 e4       	ldi	r21, 0x47	; 71
    2622:	0e 94 08 03 	call	0x610	; 0x610 <__gtsf2>
    2626:	18 16       	cp	r1, r24
    2628:	4c f5       	brge	.+82     	; 0x267c <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    262a:	6d a9       	ldd	r22, Y+53	; 0x35
    262c:	7e a9       	ldd	r23, Y+54	; 0x36
    262e:	8f a9       	ldd	r24, Y+55	; 0x37
    2630:	98 ad       	ldd	r25, Y+56	; 0x38
    2632:	20 e0       	ldi	r18, 0x00	; 0
    2634:	30 e0       	ldi	r19, 0x00	; 0
    2636:	40 e2       	ldi	r20, 0x20	; 32
    2638:	51 e4       	ldi	r21, 0x41	; 65
    263a:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    263e:	dc 01       	movw	r26, r24
    2640:	cb 01       	movw	r24, r22
    2642:	bc 01       	movw	r22, r24
    2644:	cd 01       	movw	r24, r26
    2646:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    264a:	dc 01       	movw	r26, r24
    264c:	cb 01       	movw	r24, r22
    264e:	98 ab       	std	Y+48, r25	; 0x30
    2650:	8f a7       	std	Y+47, r24	; 0x2f
    2652:	0f c0       	rjmp	.+30     	; 0x2672 <LCD_displayCharacter+0xe4>
    2654:	89 e1       	ldi	r24, 0x19	; 25
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	9e a7       	std	Y+46, r25	; 0x2e
    265a:	8d a7       	std	Y+45, r24	; 0x2d
    265c:	8d a5       	ldd	r24, Y+45	; 0x2d
    265e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2660:	01 97       	sbiw	r24, 0x01	; 1
    2662:	f1 f7       	brne	.-4      	; 0x2660 <LCD_displayCharacter+0xd2>
    2664:	9e a7       	std	Y+46, r25	; 0x2e
    2666:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2668:	8f a5       	ldd	r24, Y+47	; 0x2f
    266a:	98 a9       	ldd	r25, Y+48	; 0x30
    266c:	01 97       	sbiw	r24, 0x01	; 1
    266e:	98 ab       	std	Y+48, r25	; 0x30
    2670:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2672:	8f a5       	ldd	r24, Y+47	; 0x2f
    2674:	98 a9       	ldd	r25, Y+48	; 0x30
    2676:	00 97       	sbiw	r24, 0x00	; 0
    2678:	69 f7       	brne	.-38     	; 0x2654 <LCD_displayCharacter+0xc6>
    267a:	14 c0       	rjmp	.+40     	; 0x26a4 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    267c:	69 a9       	ldd	r22, Y+49	; 0x31
    267e:	7a a9       	ldd	r23, Y+50	; 0x32
    2680:	8b a9       	ldd	r24, Y+51	; 0x33
    2682:	9c a9       	ldd	r25, Y+52	; 0x34
    2684:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    2688:	dc 01       	movw	r26, r24
    268a:	cb 01       	movw	r24, r22
    268c:	98 ab       	std	Y+48, r25	; 0x30
    268e:	8f a7       	std	Y+47, r24	; 0x2f
    2690:	8f a5       	ldd	r24, Y+47	; 0x2f
    2692:	98 a9       	ldd	r25, Y+48	; 0x30
    2694:	9c a7       	std	Y+44, r25	; 0x2c
    2696:	8b a7       	std	Y+43, r24	; 0x2b
    2698:	8b a5       	ldd	r24, Y+43	; 0x2b
    269a:	9c a5       	ldd	r25, Y+44	; 0x2c
    269c:	01 97       	sbiw	r24, 0x01	; 1
    269e:	f1 f7       	brne	.-4      	; 0x269c <LCD_displayCharacter+0x10e>
    26a0:	9c a7       	std	Y+44, r25	; 0x2c
    26a2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    26a4:	a2 e3       	ldi	r26, 0x32	; 50
    26a6:	b0 e0       	ldi	r27, 0x00	; 0
    26a8:	e2 e3       	ldi	r30, 0x32	; 50
    26aa:	f0 e0       	ldi	r31, 0x00	; 0
    26ac:	80 81       	ld	r24, Z
    26ae:	80 64       	ori	r24, 0x40	; 64
    26b0:	8c 93       	st	X, r24
    26b2:	80 e0       	ldi	r24, 0x00	; 0
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	a0 e8       	ldi	r26, 0x80	; 128
    26b8:	bf e3       	ldi	r27, 0x3F	; 63
    26ba:	8f a3       	std	Y+39, r24	; 0x27
    26bc:	98 a7       	std	Y+40, r25	; 0x28
    26be:	a9 a7       	std	Y+41, r26	; 0x29
    26c0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26c2:	6f a1       	ldd	r22, Y+39	; 0x27
    26c4:	78 a5       	ldd	r23, Y+40	; 0x28
    26c6:	89 a5       	ldd	r24, Y+41	; 0x29
    26c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    26ca:	20 e0       	ldi	r18, 0x00	; 0
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	4a e7       	ldi	r20, 0x7A	; 122
    26d0:	53 e4       	ldi	r21, 0x43	; 67
    26d2:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    26d6:	dc 01       	movw	r26, r24
    26d8:	cb 01       	movw	r24, r22
    26da:	8b a3       	std	Y+35, r24	; 0x23
    26dc:	9c a3       	std	Y+36, r25	; 0x24
    26de:	ad a3       	std	Y+37, r26	; 0x25
    26e0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    26e2:	6b a1       	ldd	r22, Y+35	; 0x23
    26e4:	7c a1       	ldd	r23, Y+36	; 0x24
    26e6:	8d a1       	ldd	r24, Y+37	; 0x25
    26e8:	9e a1       	ldd	r25, Y+38	; 0x26
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	40 e8       	ldi	r20, 0x80	; 128
    26f0:	5f e3       	ldi	r21, 0x3F	; 63
    26f2:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__ltsf2>
    26f6:	88 23       	and	r24, r24
    26f8:	2c f4       	brge	.+10     	; 0x2704 <LCD_displayCharacter+0x176>
		__ticks = 1;
    26fa:	81 e0       	ldi	r24, 0x01	; 1
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	9a a3       	std	Y+34, r25	; 0x22
    2700:	89 a3       	std	Y+33, r24	; 0x21
    2702:	3f c0       	rjmp	.+126    	; 0x2782 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    2704:	6b a1       	ldd	r22, Y+35	; 0x23
    2706:	7c a1       	ldd	r23, Y+36	; 0x24
    2708:	8d a1       	ldd	r24, Y+37	; 0x25
    270a:	9e a1       	ldd	r25, Y+38	; 0x26
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	3f ef       	ldi	r19, 0xFF	; 255
    2710:	4f e7       	ldi	r20, 0x7F	; 127
    2712:	57 e4       	ldi	r21, 0x47	; 71
    2714:	0e 94 08 03 	call	0x610	; 0x610 <__gtsf2>
    2718:	18 16       	cp	r1, r24
    271a:	4c f5       	brge	.+82     	; 0x276e <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    271c:	6f a1       	ldd	r22, Y+39	; 0x27
    271e:	78 a5       	ldd	r23, Y+40	; 0x28
    2720:	89 a5       	ldd	r24, Y+41	; 0x29
    2722:	9a a5       	ldd	r25, Y+42	; 0x2a
    2724:	20 e0       	ldi	r18, 0x00	; 0
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	40 e2       	ldi	r20, 0x20	; 32
    272a:	51 e4       	ldi	r21, 0x41	; 65
    272c:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    2730:	dc 01       	movw	r26, r24
    2732:	cb 01       	movw	r24, r22
    2734:	bc 01       	movw	r22, r24
    2736:	cd 01       	movw	r24, r26
    2738:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    273c:	dc 01       	movw	r26, r24
    273e:	cb 01       	movw	r24, r22
    2740:	9a a3       	std	Y+34, r25	; 0x22
    2742:	89 a3       	std	Y+33, r24	; 0x21
    2744:	0f c0       	rjmp	.+30     	; 0x2764 <LCD_displayCharacter+0x1d6>
    2746:	89 e1       	ldi	r24, 0x19	; 25
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	98 a3       	std	Y+32, r25	; 0x20
    274c:	8f 8f       	std	Y+31, r24	; 0x1f
    274e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2750:	98 a1       	ldd	r25, Y+32	; 0x20
    2752:	01 97       	sbiw	r24, 0x01	; 1
    2754:	f1 f7       	brne	.-4      	; 0x2752 <LCD_displayCharacter+0x1c4>
    2756:	98 a3       	std	Y+32, r25	; 0x20
    2758:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    275a:	89 a1       	ldd	r24, Y+33	; 0x21
    275c:	9a a1       	ldd	r25, Y+34	; 0x22
    275e:	01 97       	sbiw	r24, 0x01	; 1
    2760:	9a a3       	std	Y+34, r25	; 0x22
    2762:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2764:	89 a1       	ldd	r24, Y+33	; 0x21
    2766:	9a a1       	ldd	r25, Y+34	; 0x22
    2768:	00 97       	sbiw	r24, 0x00	; 0
    276a:	69 f7       	brne	.-38     	; 0x2746 <LCD_displayCharacter+0x1b8>
    276c:	14 c0       	rjmp	.+40     	; 0x2796 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    276e:	6b a1       	ldd	r22, Y+35	; 0x23
    2770:	7c a1       	ldd	r23, Y+36	; 0x24
    2772:	8d a1       	ldd	r24, Y+37	; 0x25
    2774:	9e a1       	ldd	r25, Y+38	; 0x26
    2776:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    277a:	dc 01       	movw	r26, r24
    277c:	cb 01       	movw	r24, r22
    277e:	9a a3       	std	Y+34, r25	; 0x22
    2780:	89 a3       	std	Y+33, r24	; 0x21
    2782:	89 a1       	ldd	r24, Y+33	; 0x21
    2784:	9a a1       	ldd	r25, Y+34	; 0x22
    2786:	9e 8f       	std	Y+30, r25	; 0x1e
    2788:	8d 8f       	std	Y+29, r24	; 0x1d
    278a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    278c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    278e:	01 97       	sbiw	r24, 0x01	; 1
    2790:	f1 f7       	brne	.-4      	; 0x278e <LCD_displayCharacter+0x200>
    2792:	9e 8f       	std	Y+30, r25	; 0x1e
    2794:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = data; /* out the required command to the data bus D0 --> D7 */
    2796:	e5 e3       	ldi	r30, 0x35	; 53
    2798:	f0 e0       	ldi	r31, 0x00	; 0
    279a:	89 ad       	ldd	r24, Y+57	; 0x39
    279c:	80 83       	st	Z, r24
    279e:	80 e0       	ldi	r24, 0x00	; 0
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	a0 e8       	ldi	r26, 0x80	; 128
    27a4:	bf e3       	ldi	r27, 0x3F	; 63
    27a6:	89 8f       	std	Y+25, r24	; 0x19
    27a8:	9a 8f       	std	Y+26, r25	; 0x1a
    27aa:	ab 8f       	std	Y+27, r26	; 0x1b
    27ac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ae:	69 8d       	ldd	r22, Y+25	; 0x19
    27b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27b6:	20 e0       	ldi	r18, 0x00	; 0
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	4a e7       	ldi	r20, 0x7A	; 122
    27bc:	53 e4       	ldi	r21, 0x43	; 67
    27be:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    27c2:	dc 01       	movw	r26, r24
    27c4:	cb 01       	movw	r24, r22
    27c6:	8d 8b       	std	Y+21, r24	; 0x15
    27c8:	9e 8b       	std	Y+22, r25	; 0x16
    27ca:	af 8b       	std	Y+23, r26	; 0x17
    27cc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27ce:	6d 89       	ldd	r22, Y+21	; 0x15
    27d0:	7e 89       	ldd	r23, Y+22	; 0x16
    27d2:	8f 89       	ldd	r24, Y+23	; 0x17
    27d4:	98 8d       	ldd	r25, Y+24	; 0x18
    27d6:	20 e0       	ldi	r18, 0x00	; 0
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	40 e8       	ldi	r20, 0x80	; 128
    27dc:	5f e3       	ldi	r21, 0x3F	; 63
    27de:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__ltsf2>
    27e2:	88 23       	and	r24, r24
    27e4:	2c f4       	brge	.+10     	; 0x27f0 <LCD_displayCharacter+0x262>
		__ticks = 1;
    27e6:	81 e0       	ldi	r24, 0x01	; 1
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	9c 8b       	std	Y+20, r25	; 0x14
    27ec:	8b 8b       	std	Y+19, r24	; 0x13
    27ee:	3f c0       	rjmp	.+126    	; 0x286e <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    27f0:	6d 89       	ldd	r22, Y+21	; 0x15
    27f2:	7e 89       	ldd	r23, Y+22	; 0x16
    27f4:	8f 89       	ldd	r24, Y+23	; 0x17
    27f6:	98 8d       	ldd	r25, Y+24	; 0x18
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	3f ef       	ldi	r19, 0xFF	; 255
    27fc:	4f e7       	ldi	r20, 0x7F	; 127
    27fe:	57 e4       	ldi	r21, 0x47	; 71
    2800:	0e 94 08 03 	call	0x610	; 0x610 <__gtsf2>
    2804:	18 16       	cp	r1, r24
    2806:	4c f5       	brge	.+82     	; 0x285a <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2808:	69 8d       	ldd	r22, Y+25	; 0x19
    280a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    280c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    280e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	40 e2       	ldi	r20, 0x20	; 32
    2816:	51 e4       	ldi	r21, 0x41	; 65
    2818:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    281c:	dc 01       	movw	r26, r24
    281e:	cb 01       	movw	r24, r22
    2820:	bc 01       	movw	r22, r24
    2822:	cd 01       	movw	r24, r26
    2824:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    2828:	dc 01       	movw	r26, r24
    282a:	cb 01       	movw	r24, r22
    282c:	9c 8b       	std	Y+20, r25	; 0x14
    282e:	8b 8b       	std	Y+19, r24	; 0x13
    2830:	0f c0       	rjmp	.+30     	; 0x2850 <LCD_displayCharacter+0x2c2>
    2832:	89 e1       	ldi	r24, 0x19	; 25
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	9a 8b       	std	Y+18, r25	; 0x12
    2838:	89 8b       	std	Y+17, r24	; 0x11
    283a:	89 89       	ldd	r24, Y+17	; 0x11
    283c:	9a 89       	ldd	r25, Y+18	; 0x12
    283e:	01 97       	sbiw	r24, 0x01	; 1
    2840:	f1 f7       	brne	.-4      	; 0x283e <LCD_displayCharacter+0x2b0>
    2842:	9a 8b       	std	Y+18, r25	; 0x12
    2844:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2846:	8b 89       	ldd	r24, Y+19	; 0x13
    2848:	9c 89       	ldd	r25, Y+20	; 0x14
    284a:	01 97       	sbiw	r24, 0x01	; 1
    284c:	9c 8b       	std	Y+20, r25	; 0x14
    284e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2850:	8b 89       	ldd	r24, Y+19	; 0x13
    2852:	9c 89       	ldd	r25, Y+20	; 0x14
    2854:	00 97       	sbiw	r24, 0x00	; 0
    2856:	69 f7       	brne	.-38     	; 0x2832 <LCD_displayCharacter+0x2a4>
    2858:	14 c0       	rjmp	.+40     	; 0x2882 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    285a:	6d 89       	ldd	r22, Y+21	; 0x15
    285c:	7e 89       	ldd	r23, Y+22	; 0x16
    285e:	8f 89       	ldd	r24, Y+23	; 0x17
    2860:	98 8d       	ldd	r25, Y+24	; 0x18
    2862:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    2866:	dc 01       	movw	r26, r24
    2868:	cb 01       	movw	r24, r22
    286a:	9c 8b       	std	Y+20, r25	; 0x14
    286c:	8b 8b       	std	Y+19, r24	; 0x13
    286e:	8b 89       	ldd	r24, Y+19	; 0x13
    2870:	9c 89       	ldd	r25, Y+20	; 0x14
    2872:	98 8b       	std	Y+16, r25	; 0x10
    2874:	8f 87       	std	Y+15, r24	; 0x0f
    2876:	8f 85       	ldd	r24, Y+15	; 0x0f
    2878:	98 89       	ldd	r25, Y+16	; 0x10
    287a:	01 97       	sbiw	r24, 0x01	; 1
    287c:	f1 f7       	brne	.-4      	; 0x287a <LCD_displayCharacter+0x2ec>
    287e:	98 8b       	std	Y+16, r25	; 0x10
    2880:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2882:	a2 e3       	ldi	r26, 0x32	; 50
    2884:	b0 e0       	ldi	r27, 0x00	; 0
    2886:	e2 e3       	ldi	r30, 0x32	; 50
    2888:	f0 e0       	ldi	r31, 0x00	; 0
    288a:	80 81       	ld	r24, Z
    288c:	8f 7b       	andi	r24, 0xBF	; 191
    288e:	8c 93       	st	X, r24
    2890:	80 e0       	ldi	r24, 0x00	; 0
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	a0 e8       	ldi	r26, 0x80	; 128
    2896:	bf e3       	ldi	r27, 0x3F	; 63
    2898:	8b 87       	std	Y+11, r24	; 0x0b
    289a:	9c 87       	std	Y+12, r25	; 0x0c
    289c:	ad 87       	std	Y+13, r26	; 0x0d
    289e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    28a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    28a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    28a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    28a8:	20 e0       	ldi	r18, 0x00	; 0
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	4a e7       	ldi	r20, 0x7A	; 122
    28ae:	53 e4       	ldi	r21, 0x43	; 67
    28b0:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    28b4:	dc 01       	movw	r26, r24
    28b6:	cb 01       	movw	r24, r22
    28b8:	8f 83       	std	Y+7, r24	; 0x07
    28ba:	98 87       	std	Y+8, r25	; 0x08
    28bc:	a9 87       	std	Y+9, r26	; 0x09
    28be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28c0:	6f 81       	ldd	r22, Y+7	; 0x07
    28c2:	78 85       	ldd	r23, Y+8	; 0x08
    28c4:	89 85       	ldd	r24, Y+9	; 0x09
    28c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	40 e8       	ldi	r20, 0x80	; 128
    28ce:	5f e3       	ldi	r21, 0x3F	; 63
    28d0:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__ltsf2>
    28d4:	88 23       	and	r24, r24
    28d6:	2c f4       	brge	.+10     	; 0x28e2 <LCD_displayCharacter+0x354>
		__ticks = 1;
    28d8:	81 e0       	ldi	r24, 0x01	; 1
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	9e 83       	std	Y+6, r25	; 0x06
    28de:	8d 83       	std	Y+5, r24	; 0x05
    28e0:	3f c0       	rjmp	.+126    	; 0x2960 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    28e2:	6f 81       	ldd	r22, Y+7	; 0x07
    28e4:	78 85       	ldd	r23, Y+8	; 0x08
    28e6:	89 85       	ldd	r24, Y+9	; 0x09
    28e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	3f ef       	ldi	r19, 0xFF	; 255
    28ee:	4f e7       	ldi	r20, 0x7F	; 127
    28f0:	57 e4       	ldi	r21, 0x47	; 71
    28f2:	0e 94 08 03 	call	0x610	; 0x610 <__gtsf2>
    28f6:	18 16       	cp	r1, r24
    28f8:	4c f5       	brge	.+82     	; 0x294c <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    28fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    28fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2900:	9e 85       	ldd	r25, Y+14	; 0x0e
    2902:	20 e0       	ldi	r18, 0x00	; 0
    2904:	30 e0       	ldi	r19, 0x00	; 0
    2906:	40 e2       	ldi	r20, 0x20	; 32
    2908:	51 e4       	ldi	r21, 0x41	; 65
    290a:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    290e:	dc 01       	movw	r26, r24
    2910:	cb 01       	movw	r24, r22
    2912:	bc 01       	movw	r22, r24
    2914:	cd 01       	movw	r24, r26
    2916:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    291a:	dc 01       	movw	r26, r24
    291c:	cb 01       	movw	r24, r22
    291e:	9e 83       	std	Y+6, r25	; 0x06
    2920:	8d 83       	std	Y+5, r24	; 0x05
    2922:	0f c0       	rjmp	.+30     	; 0x2942 <LCD_displayCharacter+0x3b4>
    2924:	89 e1       	ldi	r24, 0x19	; 25
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	9c 83       	std	Y+4, r25	; 0x04
    292a:	8b 83       	std	Y+3, r24	; 0x03
    292c:	8b 81       	ldd	r24, Y+3	; 0x03
    292e:	9c 81       	ldd	r25, Y+4	; 0x04
    2930:	01 97       	sbiw	r24, 0x01	; 1
    2932:	f1 f7       	brne	.-4      	; 0x2930 <LCD_displayCharacter+0x3a2>
    2934:	9c 83       	std	Y+4, r25	; 0x04
    2936:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2938:	8d 81       	ldd	r24, Y+5	; 0x05
    293a:	9e 81       	ldd	r25, Y+6	; 0x06
    293c:	01 97       	sbiw	r24, 0x01	; 1
    293e:	9e 83       	std	Y+6, r25	; 0x06
    2940:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2942:	8d 81       	ldd	r24, Y+5	; 0x05
    2944:	9e 81       	ldd	r25, Y+6	; 0x06
    2946:	00 97       	sbiw	r24, 0x00	; 0
    2948:	69 f7       	brne	.-38     	; 0x2924 <LCD_displayCharacter+0x396>
    294a:	14 c0       	rjmp	.+40     	; 0x2974 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    294c:	6f 81       	ldd	r22, Y+7	; 0x07
    294e:	78 85       	ldd	r23, Y+8	; 0x08
    2950:	89 85       	ldd	r24, Y+9	; 0x09
    2952:	9a 85       	ldd	r25, Y+10	; 0x0a
    2954:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    2958:	dc 01       	movw	r26, r24
    295a:	cb 01       	movw	r24, r22
    295c:	9e 83       	std	Y+6, r25	; 0x06
    295e:	8d 83       	std	Y+5, r24	; 0x05
    2960:	8d 81       	ldd	r24, Y+5	; 0x05
    2962:	9e 81       	ldd	r25, Y+6	; 0x06
    2964:	9a 83       	std	Y+2, r25	; 0x02
    2966:	89 83       	std	Y+1, r24	; 0x01
    2968:	89 81       	ldd	r24, Y+1	; 0x01
    296a:	9a 81       	ldd	r25, Y+2	; 0x02
    296c:	01 97       	sbiw	r24, 0x01	; 1
    296e:	f1 f7       	brne	.-4      	; 0x296c <LCD_displayCharacter+0x3de>
    2970:	9a 83       	std	Y+2, r25	; 0x02
    2972:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2974:	e9 96       	adiw	r28, 0x39	; 57
    2976:	0f b6       	in	r0, 0x3f	; 63
    2978:	f8 94       	cli
    297a:	de bf       	out	0x3e, r29	; 62
    297c:	0f be       	out	0x3f, r0	; 63
    297e:	cd bf       	out	0x3d, r28	; 61
    2980:	cf 91       	pop	r28
    2982:	df 91       	pop	r29
    2984:	08 95       	ret

00002986 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    2986:	df 93       	push	r29
    2988:	cf 93       	push	r28
    298a:	00 d0       	rcall	.+0      	; 0x298c <LCD_displayString+0x6>
    298c:	0f 92       	push	r0
    298e:	cd b7       	in	r28, 0x3d	; 61
    2990:	de b7       	in	r29, 0x3e	; 62
    2992:	9b 83       	std	Y+3, r25	; 0x03
    2994:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2996:	19 82       	std	Y+1, r1	; 0x01
    2998:	0d c0       	rjmp	.+26     	; 0x29b4 <LCD_displayString+0x2e>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    299a:	89 81       	ldd	r24, Y+1	; 0x01
    299c:	28 2f       	mov	r18, r24
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	8a 81       	ldd	r24, Y+2	; 0x02
    29a2:	9b 81       	ldd	r25, Y+3	; 0x03
    29a4:	fc 01       	movw	r30, r24
    29a6:	e2 0f       	add	r30, r18
    29a8:	f3 1f       	adc	r31, r19
    29aa:	80 81       	ld	r24, Z
    29ac:	f0 dd       	rcall	.-1056   	; 0x258e <LCD_displayCharacter>
    29ae:	89 81       	ldd	r24, Y+1	; 0x01
		i++;
    29b0:	8f 5f       	subi	r24, 0xFF	; 255
    29b2:	89 83       	std	Y+1, r24	; 0x01
    29b4:	89 81       	ldd	r24, Y+1	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    29b6:	28 2f       	mov	r18, r24
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	8a 81       	ldd	r24, Y+2	; 0x02
    29bc:	9b 81       	ldd	r25, Y+3	; 0x03
    29be:	fc 01       	movw	r30, r24
    29c0:	e2 0f       	add	r30, r18
    29c2:	f3 1f       	adc	r31, r19
    29c4:	80 81       	ld	r24, Z
    29c6:	88 23       	and	r24, r24
    29c8:	41 f7       	brne	.-48     	; 0x299a <LCD_displayString+0x14>
    29ca:	0f 90       	pop	r0
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
    29cc:	0f 90       	pop	r0
    29ce:	0f 90       	pop	r0
    29d0:	cf 91       	pop	r28
    29d2:	df 91       	pop	r29
    29d4:	08 95       	ret

000029d6 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    29d6:	df 93       	push	r29
    29d8:	cf 93       	push	r28
    29da:	00 d0       	rcall	.+0      	; 0x29dc <LCD_goToRowColumn+0x6>
    29dc:	00 d0       	rcall	.+0      	; 0x29de <LCD_goToRowColumn+0x8>
    29de:	0f 92       	push	r0
    29e0:	cd b7       	in	r28, 0x3d	; 61
    29e2:	de b7       	in	r29, 0x3e	; 62
    29e4:	8a 83       	std	Y+2, r24	; 0x02
    29e6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    29e8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ea:	28 2f       	mov	r18, r24
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	3d 83       	std	Y+5, r19	; 0x05
    29f0:	2c 83       	std	Y+4, r18	; 0x04
    29f2:	8c 81       	ldd	r24, Y+4	; 0x04
    29f4:	9d 81       	ldd	r25, Y+5	; 0x05
    29f6:	81 30       	cpi	r24, 0x01	; 1
    29f8:	91 05       	cpc	r25, r1
    29fa:	c1 f0       	breq	.+48     	; 0x2a2c <LCD_goToRowColumn+0x56>
    29fc:	2c 81       	ldd	r18, Y+4	; 0x04
    29fe:	3d 81       	ldd	r19, Y+5	; 0x05
    2a00:	22 30       	cpi	r18, 0x02	; 2
    2a02:	31 05       	cpc	r19, r1
    2a04:	2c f4       	brge	.+10     	; 0x2a10 <LCD_goToRowColumn+0x3a>
    2a06:	8c 81       	ldd	r24, Y+4	; 0x04
    2a08:	9d 81       	ldd	r25, Y+5	; 0x05
    2a0a:	00 97       	sbiw	r24, 0x00	; 0
    2a0c:	61 f0       	breq	.+24     	; 0x2a26 <LCD_goToRowColumn+0x50>
    2a0e:	19 c0       	rjmp	.+50     	; 0x2a42 <LCD_goToRowColumn+0x6c>
    2a10:	2c 81       	ldd	r18, Y+4	; 0x04
    2a12:	3d 81       	ldd	r19, Y+5	; 0x05
    2a14:	22 30       	cpi	r18, 0x02	; 2
    2a16:	31 05       	cpc	r19, r1
    2a18:	69 f0       	breq	.+26     	; 0x2a34 <LCD_goToRowColumn+0x5e>
    2a1a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a1c:	9d 81       	ldd	r25, Y+5	; 0x05
    2a1e:	83 30       	cpi	r24, 0x03	; 3
    2a20:	91 05       	cpc	r25, r1
    2a22:	61 f0       	breq	.+24     	; 0x2a3c <LCD_goToRowColumn+0x66>
    2a24:	0e c0       	rjmp	.+28     	; 0x2a42 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    2a26:	8b 81       	ldd	r24, Y+3	; 0x03
    2a28:	89 83       	std	Y+1, r24	; 0x01
    2a2a:	0b c0       	rjmp	.+22     	; 0x2a42 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    2a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a2e:	80 5c       	subi	r24, 0xC0	; 192
    2a30:	89 83       	std	Y+1, r24	; 0x01
    2a32:	07 c0       	rjmp	.+14     	; 0x2a42 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    2a34:	8b 81       	ldd	r24, Y+3	; 0x03
    2a36:	80 5f       	subi	r24, 0xF0	; 240
    2a38:	89 83       	std	Y+1, r24	; 0x01
    2a3a:	03 c0       	rjmp	.+6      	; 0x2a42 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    2a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a3e:	80 5b       	subi	r24, 0xB0	; 176
    2a40:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    2a42:	89 81       	ldd	r24, Y+1	; 0x01
    2a44:	80 68       	ori	r24, 0x80	; 128
    2a46:	a7 db       	rcall	.-2226   	; 0x2196 <LCD_sendCommand>
    2a48:	0f 90       	pop	r0
}
    2a4a:	0f 90       	pop	r0
    2a4c:	0f 90       	pop	r0
    2a4e:	0f 90       	pop	r0
    2a50:	0f 90       	pop	r0
    2a52:	cf 91       	pop	r28
    2a54:	df 91       	pop	r29
    2a56:	08 95       	ret

00002a58 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2a58:	df 93       	push	r29
    2a5a:	cf 93       	push	r28
    2a5c:	00 d0       	rcall	.+0      	; 0x2a5e <LCD_displayStringRowColumn+0x6>
    2a5e:	00 d0       	rcall	.+0      	; 0x2a60 <LCD_displayStringRowColumn+0x8>
    2a60:	cd b7       	in	r28, 0x3d	; 61
    2a62:	de b7       	in	r29, 0x3e	; 62
    2a64:	89 83       	std	Y+1, r24	; 0x01
    2a66:	6a 83       	std	Y+2, r22	; 0x02
    2a68:	5c 83       	std	Y+4, r21	; 0x04
    2a6a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    2a6c:	89 81       	ldd	r24, Y+1	; 0x01
    2a6e:	6a 81       	ldd	r22, Y+2	; 0x02
    2a70:	b2 df       	rcall	.-156    	; 0x29d6 <LCD_goToRowColumn>
    2a72:	8b 81       	ldd	r24, Y+3	; 0x03
	LCD_displayString(Str); /* display the string */
    2a74:	9c 81       	ldd	r25, Y+4	; 0x04
    2a76:	87 df       	rcall	.-242    	; 0x2986 <LCD_displayString>
    2a78:	0f 90       	pop	r0
    2a7a:	0f 90       	pop	r0
}
    2a7c:	0f 90       	pop	r0
    2a7e:	0f 90       	pop	r0
    2a80:	cf 91       	pop	r28
    2a82:	df 91       	pop	r29
    2a84:	08 95       	ret

00002a86 <LCD_clearScreen>:
   itoa(data,buff,10); /* 10 for decimal */
   LCD_displayString(buff);
}

void LCD_clearScreen(void)
{
    2a86:	df 93       	push	r29
    2a88:	cf 93       	push	r28
    2a8a:	cd b7       	in	r28, 0x3d	; 61
    2a8c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    2a8e:	81 e0       	ldi	r24, 0x01	; 1
    2a90:	82 db       	rcall	.-2300   	; 0x2196 <LCD_sendCommand>
    2a92:	cf 91       	pop	r28
}
    2a94:	df 91       	pop	r29
    2a96:	08 95       	ret

00002a98 <__vector_9>:



						       // ISR DEFINITIONS //

ISR (TIMER0_OVF_vect)   { 	    SECONDS_T0 ++;    }
    2a98:	1f 92       	push	r1
    2a9a:	0f 92       	push	r0
    2a9c:	0f b6       	in	r0, 0x3f	; 63
    2a9e:	0f 92       	push	r0
    2aa0:	11 24       	eor	r1, r1
    2aa2:	8f 93       	push	r24
    2aa4:	9f 93       	push	r25
    2aa6:	af 93       	push	r26
    2aa8:	bf 93       	push	r27
    2aaa:	df 93       	push	r29
    2aac:	cf 93       	push	r28
    2aae:	cd b7       	in	r28, 0x3d	; 61
    2ab0:	de b7       	in	r29, 0x3e	; 62
    2ab2:	80 91 fc 00 	lds	r24, 0x00FC
    2ab6:	90 91 fd 00 	lds	r25, 0x00FD
    2aba:	a0 91 fe 00 	lds	r26, 0x00FE
    2abe:	b0 91 ff 00 	lds	r27, 0x00FF
    2ac2:	01 96       	adiw	r24, 0x01	; 1
    2ac4:	a1 1d       	adc	r26, r1
    2ac6:	b1 1d       	adc	r27, r1
    2ac8:	80 93 fc 00 	sts	0x00FC, r24
    2acc:	90 93 fd 00 	sts	0x00FD, r25
    2ad0:	a0 93 fe 00 	sts	0x00FE, r26
    2ad4:	b0 93 ff 00 	sts	0x00FF, r27
    2ad8:	cf 91       	pop	r28
    2ada:	df 91       	pop	r29
    2adc:	bf 91       	pop	r27
    2ade:	af 91       	pop	r26
    2ae0:	9f 91       	pop	r25
    2ae2:	8f 91       	pop	r24
    2ae4:	0f 90       	pop	r0
    2ae6:	0f be       	out	0x3f, r0	; 63
    2ae8:	0f 90       	pop	r0
    2aea:	1f 90       	pop	r1
    2aec:	18 95       	reti

00002aee <__vector_19>:

ISR (TIMER0_COMP_vect)  {		SECONDS_T0 ++;	  }
    2aee:	1f 92       	push	r1
    2af0:	0f 92       	push	r0
    2af2:	0f b6       	in	r0, 0x3f	; 63
    2af4:	0f 92       	push	r0
    2af6:	11 24       	eor	r1, r1
    2af8:	8f 93       	push	r24
    2afa:	9f 93       	push	r25
    2afc:	af 93       	push	r26
    2afe:	bf 93       	push	r27
    2b00:	df 93       	push	r29
    2b02:	cf 93       	push	r28
    2b04:	cd b7       	in	r28, 0x3d	; 61
    2b06:	de b7       	in	r29, 0x3e	; 62
    2b08:	80 91 fc 00 	lds	r24, 0x00FC
    2b0c:	90 91 fd 00 	lds	r25, 0x00FD
    2b10:	a0 91 fe 00 	lds	r26, 0x00FE
    2b14:	b0 91 ff 00 	lds	r27, 0x00FF
    2b18:	01 96       	adiw	r24, 0x01	; 1
    2b1a:	a1 1d       	adc	r26, r1
    2b1c:	b1 1d       	adc	r27, r1
    2b1e:	80 93 fc 00 	sts	0x00FC, r24
    2b22:	90 93 fd 00 	sts	0x00FD, r25
    2b26:	a0 93 fe 00 	sts	0x00FE, r26
    2b2a:	b0 93 ff 00 	sts	0x00FF, r27
    2b2e:	cf 91       	pop	r28
    2b30:	df 91       	pop	r29
    2b32:	bf 91       	pop	r27
    2b34:	af 91       	pop	r26
    2b36:	9f 91       	pop	r25
    2b38:	8f 91       	pop	r24
    2b3a:	0f 90       	pop	r0
    2b3c:	0f be       	out	0x3f, r0	; 63
    2b3e:	0f 90       	pop	r0
    2b40:	1f 90       	pop	r1
    2b42:	18 95       	reti

00002b44 <__vector_8>:

ISR (TIMER1_OVF_vect)   {       SECONDS_T1_MC1 ++; SECONDS_T1_MC2 ++;     }
    2b44:	1f 92       	push	r1
    2b46:	0f 92       	push	r0
    2b48:	0f b6       	in	r0, 0x3f	; 63
    2b4a:	0f 92       	push	r0
    2b4c:	11 24       	eor	r1, r1
    2b4e:	8f 93       	push	r24
    2b50:	9f 93       	push	r25
    2b52:	af 93       	push	r26
    2b54:	bf 93       	push	r27
    2b56:	df 93       	push	r29
    2b58:	cf 93       	push	r28
    2b5a:	cd b7       	in	r28, 0x3d	; 61
    2b5c:	de b7       	in	r29, 0x3e	; 62
    2b5e:	80 91 00 01 	lds	r24, 0x0100
    2b62:	90 91 01 01 	lds	r25, 0x0101
    2b66:	a0 91 02 01 	lds	r26, 0x0102
    2b6a:	b0 91 03 01 	lds	r27, 0x0103
    2b6e:	01 96       	adiw	r24, 0x01	; 1
    2b70:	a1 1d       	adc	r26, r1
    2b72:	b1 1d       	adc	r27, r1
    2b74:	80 93 00 01 	sts	0x0100, r24
    2b78:	90 93 01 01 	sts	0x0101, r25
    2b7c:	a0 93 02 01 	sts	0x0102, r26
    2b80:	b0 93 03 01 	sts	0x0103, r27
    2b84:	80 91 04 01 	lds	r24, 0x0104
    2b88:	90 91 05 01 	lds	r25, 0x0105
    2b8c:	a0 91 06 01 	lds	r26, 0x0106
    2b90:	b0 91 07 01 	lds	r27, 0x0107
    2b94:	01 96       	adiw	r24, 0x01	; 1
    2b96:	a1 1d       	adc	r26, r1
    2b98:	b1 1d       	adc	r27, r1
    2b9a:	80 93 04 01 	sts	0x0104, r24
    2b9e:	90 93 05 01 	sts	0x0105, r25
    2ba2:	a0 93 06 01 	sts	0x0106, r26
    2ba6:	b0 93 07 01 	sts	0x0107, r27
    2baa:	cf 91       	pop	r28
    2bac:	df 91       	pop	r29
    2bae:	bf 91       	pop	r27
    2bb0:	af 91       	pop	r26
    2bb2:	9f 91       	pop	r25
    2bb4:	8f 91       	pop	r24
    2bb6:	0f 90       	pop	r0
    2bb8:	0f be       	out	0x3f, r0	; 63
    2bba:	0f 90       	pop	r0
    2bbc:	1f 90       	pop	r1
    2bbe:	18 95       	reti

00002bc0 <__vector_6>:


ISR (TIMER1_COMPA_vect) { 	    SECONDS_T1_MC1 ++; SECONDS_T1_MC2 ++;     }
    2bc0:	1f 92       	push	r1
    2bc2:	0f 92       	push	r0
    2bc4:	0f b6       	in	r0, 0x3f	; 63
    2bc6:	0f 92       	push	r0
    2bc8:	11 24       	eor	r1, r1
    2bca:	8f 93       	push	r24
    2bcc:	9f 93       	push	r25
    2bce:	af 93       	push	r26
    2bd0:	bf 93       	push	r27
    2bd2:	df 93       	push	r29
    2bd4:	cf 93       	push	r28
    2bd6:	cd b7       	in	r28, 0x3d	; 61
    2bd8:	de b7       	in	r29, 0x3e	; 62
    2bda:	80 91 00 01 	lds	r24, 0x0100
    2bde:	90 91 01 01 	lds	r25, 0x0101
    2be2:	a0 91 02 01 	lds	r26, 0x0102
    2be6:	b0 91 03 01 	lds	r27, 0x0103
    2bea:	01 96       	adiw	r24, 0x01	; 1
    2bec:	a1 1d       	adc	r26, r1
    2bee:	b1 1d       	adc	r27, r1
    2bf0:	80 93 00 01 	sts	0x0100, r24
    2bf4:	90 93 01 01 	sts	0x0101, r25
    2bf8:	a0 93 02 01 	sts	0x0102, r26
    2bfc:	b0 93 03 01 	sts	0x0103, r27
    2c00:	80 91 04 01 	lds	r24, 0x0104
    2c04:	90 91 05 01 	lds	r25, 0x0105
    2c08:	a0 91 06 01 	lds	r26, 0x0106
    2c0c:	b0 91 07 01 	lds	r27, 0x0107
    2c10:	01 96       	adiw	r24, 0x01	; 1
    2c12:	a1 1d       	adc	r26, r1
    2c14:	b1 1d       	adc	r27, r1
    2c16:	80 93 04 01 	sts	0x0104, r24
    2c1a:	90 93 05 01 	sts	0x0105, r25
    2c1e:	a0 93 06 01 	sts	0x0106, r26
    2c22:	b0 93 07 01 	sts	0x0107, r27
    2c26:	cf 91       	pop	r28
    2c28:	df 91       	pop	r29
    2c2a:	bf 91       	pop	r27
    2c2c:	af 91       	pop	r26
    2c2e:	9f 91       	pop	r25
    2c30:	8f 91       	pop	r24
    2c32:	0f 90       	pop	r0
    2c34:	0f be       	out	0x3f, r0	; 63
    2c36:	0f 90       	pop	r0
    2c38:	1f 90       	pop	r1
    2c3a:	18 95       	reti

00002c3c <Timer1_init>:
	TCCR0 = (TCCR0 & ~0x07);							//CLEAR PRESCALE BITS
}


void Timer1_init(const TimerConfig *configuration)
{
    2c3c:	df 93       	push	r29
    2c3e:	cf 93       	push	r28
    2c40:	00 d0       	rcall	.+0      	; 0x2c42 <Timer1_init+0x6>
    2c42:	cd b7       	in	r28, 0x3d	; 61
    2c44:	de b7       	in	r29, 0x3e	; 62
    2c46:	9a 83       	std	Y+2, r25	; 0x02
    2c48:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = (TCCR1B & ~0x07) | configuration->clock; //ADJUSTS PRESACALAR BITS
    2c4a:	ae e4       	ldi	r26, 0x4E	; 78
    2c4c:	b0 e0       	ldi	r27, 0x00	; 0
    2c4e:	ee e4       	ldi	r30, 0x4E	; 78
    2c50:	f0 e0       	ldi	r31, 0x00	; 0
    2c52:	80 81       	ld	r24, Z
    2c54:	98 2f       	mov	r25, r24
    2c56:	98 7f       	andi	r25, 0xF8	; 248
    2c58:	e9 81       	ldd	r30, Y+1	; 0x01
    2c5a:	fa 81       	ldd	r31, Y+2	; 0x02
    2c5c:	81 81       	ldd	r24, Z+1	; 0x01
    2c5e:	89 2b       	or	r24, r25
    2c60:	8c 93       	st	X, r24

	TCCR1B = (TCCR1B & ~0x08) | (configuration->mode); //FOR WGM12 IF CTC MODE 1 / NORMAL MODE 0
    2c62:	ae e4       	ldi	r26, 0x4E	; 78
    2c64:	b0 e0       	ldi	r27, 0x00	; 0
    2c66:	ee e4       	ldi	r30, 0x4E	; 78
    2c68:	f0 e0       	ldi	r31, 0x00	; 0
    2c6a:	80 81       	ld	r24, Z
    2c6c:	98 2f       	mov	r25, r24
    2c6e:	97 7f       	andi	r25, 0xF7	; 247
    2c70:	e9 81       	ldd	r30, Y+1	; 0x01
    2c72:	fa 81       	ldd	r31, Y+2	; 0x02
    2c74:	80 81       	ld	r24, Z
    2c76:	89 2b       	or	r24, r25
    2c78:	8c 93       	st	X, r24

	TCCR1A = (1<<FOC1A);  							  //TIMER1 ONLY SUPPORTS CTC MODE AND NORMAL MODE
    2c7a:	ef e4       	ldi	r30, 0x4F	; 79
    2c7c:	f0 e0       	ldi	r31, 0x00	; 0
    2c7e:	88 e0       	ldi	r24, 0x08	; 8
    2c80:	80 83       	st	Z, r24

    TCNT1 = configuration->initial_value;
    2c82:	ac e4       	ldi	r26, 0x4C	; 76
    2c84:	b0 e0       	ldi	r27, 0x00	; 0
    2c86:	e9 81       	ldd	r30, Y+1	; 0x01
    2c88:	fa 81       	ldd	r31, Y+2	; 0x02
    2c8a:	82 81       	ldd	r24, Z+2	; 0x02
    2c8c:	93 81       	ldd	r25, Z+3	; 0x03
    2c8e:	11 96       	adiw	r26, 0x01	; 1
    2c90:	9c 93       	st	X, r25
    2c92:	8e 93       	st	-X, r24

	if (configuration->mode == NORMAL)
    2c94:	e9 81       	ldd	r30, Y+1	; 0x01
    2c96:	fa 81       	ldd	r31, Y+2	; 0x02
    2c98:	80 81       	ld	r24, Z
    2c9a:	80 38       	cpi	r24, 0x80	; 128
    2c9c:	39 f4       	brne	.+14     	; 0x2cac <Timer1_init+0x70>
	{
		TIMSK|=(1<<TOIE1);							//TIMER OVERFLOW INTERRUPT ENABLE
    2c9e:	a9 e5       	ldi	r26, 0x59	; 89
    2ca0:	b0 e0       	ldi	r27, 0x00	; 0
    2ca2:	e9 e5       	ldi	r30, 0x59	; 89
    2ca4:	f0 e0       	ldi	r31, 0x00	; 0
    2ca6:	80 81       	ld	r24, Z
    2ca8:	84 60       	ori	r24, 0x04	; 4
    2caa:	8c 93       	st	X, r24
	}

	if (configuration->mode == CTC)
    2cac:	e9 81       	ldd	r30, Y+1	; 0x01
    2cae:	fa 81       	ldd	r31, Y+2	; 0x02
    2cb0:	80 81       	ld	r24, Z
    2cb2:	88 38       	cpi	r24, 0x88	; 136
    2cb4:	81 f4       	brne	.+32     	; 0x2cd6 <Timer1_init+0x9a>
	{
		OCR1A= configuration->compare_value;        //SET COMPARE VALUE
    2cb6:	aa e4       	ldi	r26, 0x4A	; 74
    2cb8:	b0 e0       	ldi	r27, 0x00	; 0
    2cba:	e9 81       	ldd	r30, Y+1	; 0x01
    2cbc:	fa 81       	ldd	r31, Y+2	; 0x02
    2cbe:	84 81       	ldd	r24, Z+4	; 0x04
    2cc0:	95 81       	ldd	r25, Z+5	; 0x05
    2cc2:	11 96       	adiw	r26, 0x01	; 1
    2cc4:	9c 93       	st	X, r25
    2cc6:	8e 93       	st	-X, r24
		TIMSK|=(1<<OCIE1A);
    2cc8:	a9 e5       	ldi	r26, 0x59	; 89
    2cca:	b0 e0       	ldi	r27, 0x00	; 0
    2ccc:	e9 e5       	ldi	r30, 0x59	; 89
    2cce:	f0 e0       	ldi	r31, 0x00	; 0
    2cd0:	80 81       	ld	r24, Z
    2cd2:	80 61       	ori	r24, 0x10	; 16
    2cd4:	8c 93       	st	X, r24
	}
}
    2cd6:	0f 90       	pop	r0
    2cd8:	0f 90       	pop	r0
    2cda:	cf 91       	pop	r28
    2cdc:	df 91       	pop	r29
    2cde:	08 95       	ret

00002ce0 <UART_init>:

#define BAUD_PRESCALE_U2X (((F_CPU / (USART_BAUDRATE * 8UL))) - 1)      // 8 -> DOUBLE SPEED ASYNCHRONOUS
#define BAUD_PRESCALE_SYNCH (((F_CPU / (USART_BAUDRATE * 16UL))) - 1)  // 16 -> ASYNCHRONOUS

void UART_init( UART_Config *config )
{
    2ce0:	df 93       	push	r29
    2ce2:	cf 93       	push	r28
    2ce4:	00 d0       	rcall	.+0      	; 0x2ce6 <UART_init+0x6>
    2ce6:	cd b7       	in	r28, 0x3d	; 61
    2ce8:	de b7       	in	r29, 0x3e	; 62
    2cea:	9a 83       	std	Y+2, r25	; 0x02
    2cec:	89 83       	std	Y+1, r24	; 0x01
	/*  UCSRB REGISTER
	 *  RXC,TXC,UDR INTERRUPT ENABLE = 0,  T/R DATA BIT 8 = 0
	 */

	UCSRB|= (1<<RXEN) | (1<<TXEN) ;    // TRANSMITER ENABLE AND RECIEVER ENABLE
    2cee:	aa e2       	ldi	r26, 0x2A	; 42
    2cf0:	b0 e0       	ldi	r27, 0x00	; 0
    2cf2:	ea e2       	ldi	r30, 0x2A	; 42
    2cf4:	f0 e0       	ldi	r31, 0x00	; 0
    2cf6:	80 81       	ld	r24, Z
    2cf8:	88 61       	ori	r24, 0x18	; 24
    2cfa:	8c 93       	st	X, r24
	/* UCSRC REGISTER
	 * USBS=0 -> 1 STOP BIT
	 * UPM0 =0 ,UPM1=1 -> EVEN PARITY BIT
	 */

	UCSRC|= (1<<URSEL); // SELECTING UCSRC BY SETTING 1 TO 'URSEL'
    2cfc:	a0 e4       	ldi	r26, 0x40	; 64
    2cfe:	b0 e0       	ldi	r27, 0x00	; 0
    2d00:	e0 e4       	ldi	r30, 0x40	; 64
    2d02:	f0 e0       	ldi	r31, 0x00	; 0
    2d04:	80 81       	ld	r24, Z
    2d06:	80 68       	ori	r24, 0x80	; 128
    2d08:	8c 93       	st	X, r24
	UCSRC|= (1<<UCSZ0) | (1<<UCSZ1);   //CHARCTER SIZE 8 BITS IN FRAME TRANSFERED
    2d0a:	a0 e4       	ldi	r26, 0x40	; 64
    2d0c:	b0 e0       	ldi	r27, 0x00	; 0
    2d0e:	e0 e4       	ldi	r30, 0x40	; 64
    2d10:	f0 e0       	ldi	r31, 0x00	; 0
    2d12:	80 81       	ld	r24, Z
    2d14:	86 60       	ori	r24, 0x06	; 6
    2d16:	8c 93       	st	X, r24

	UCSRC|= ( (config->ParityBits) << 4); //CHOOSE PARITY BITS
    2d18:	a0 e4       	ldi	r26, 0x40	; 64
    2d1a:	b0 e0       	ldi	r27, 0x00	; 0
    2d1c:	e0 e4       	ldi	r30, 0x40	; 64
    2d1e:	f0 e0       	ldi	r31, 0x00	; 0
    2d20:	80 81       	ld	r24, Z
    2d22:	28 2f       	mov	r18, r24
    2d24:	e9 81       	ldd	r30, Y+1	; 0x01
    2d26:	fa 81       	ldd	r31, Y+2	; 0x02
    2d28:	81 81       	ldd	r24, Z+1	; 0x01
    2d2a:	88 2f       	mov	r24, r24
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	82 95       	swap	r24
    2d30:	92 95       	swap	r25
    2d32:	90 7f       	andi	r25, 0xF0	; 240
    2d34:	98 27       	eor	r25, r24
    2d36:	80 7f       	andi	r24, 0xF0	; 240
    2d38:	98 27       	eor	r25, r24
    2d3a:	82 2b       	or	r24, r18
    2d3c:	8c 93       	st	X, r24



		if (config->mode) //1 IF SYNCH
    2d3e:	e9 81       	ldd	r30, Y+1	; 0x01
    2d40:	fa 81       	ldd	r31, Y+2	; 0x02
    2d42:	80 81       	ld	r24, Z
    2d44:	88 23       	and	r24, r24
    2d46:	29 f1       	breq	.+74     	; 0x2d92 <UART_init+0xb2>
		{
			UCSRC |= ((config->mode) << 6);  // SYNCHRONOUS OPERATION
    2d48:	a0 e4       	ldi	r26, 0x40	; 64
    2d4a:	b0 e0       	ldi	r27, 0x00	; 0
    2d4c:	e0 e4       	ldi	r30, 0x40	; 64
    2d4e:	f0 e0       	ldi	r31, 0x00	; 0
    2d50:	80 81       	ld	r24, Z
    2d52:	28 2f       	mov	r18, r24
    2d54:	e9 81       	ldd	r30, Y+1	; 0x01
    2d56:	fa 81       	ldd	r31, Y+2	; 0x02
    2d58:	80 81       	ld	r24, Z
    2d5a:	88 2f       	mov	r24, r24
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	00 24       	eor	r0, r0
    2d60:	96 95       	lsr	r25
    2d62:	87 95       	ror	r24
    2d64:	07 94       	ror	r0
    2d66:	96 95       	lsr	r25
    2d68:	87 95       	ror	r24
    2d6a:	07 94       	ror	r0
    2d6c:	98 2f       	mov	r25, r24
    2d6e:	80 2d       	mov	r24, r0
    2d70:	82 2b       	or	r24, r18
    2d72:	8c 93       	st	X, r24

			UCSRC |= (1<<UCPOL); // DATA TRANSMITTED ON FALLING EDGE , AND SAMPLED ON POSITIVE EDGE
    2d74:	a0 e4       	ldi	r26, 0x40	; 64
    2d76:	b0 e0       	ldi	r27, 0x00	; 0
    2d78:	e0 e4       	ldi	r30, 0x40	; 64
    2d7a:	f0 e0       	ldi	r31, 0x00	; 0
    2d7c:	80 81       	ld	r24, Z
    2d7e:	81 60       	ori	r24, 0x01	; 1
    2d80:	8c 93       	st	X, r24

			UBRRH = (BAUD_PRESCALE_SYNCH>>8);
    2d82:	e0 e4       	ldi	r30, 0x40	; 64
    2d84:	f0 e0       	ldi	r31, 0x00	; 0
    2d86:	10 82       	st	Z, r1
			UBRRL =  BAUD_PRESCALE_SYNCH;
    2d88:	e9 e2       	ldi	r30, 0x29	; 41
    2d8a:	f0 e0       	ldi	r31, 0x00	; 0
    2d8c:	85 e0       	ldi	r24, 0x05	; 5
    2d8e:	80 83       	st	Z, r24
    2d90:	25 c0       	rjmp	.+74     	; 0x2ddc <UART_init+0xfc>
		}

		else
		{							/* UMSEL =0 -> ASYNCHRONOUS OPERATION
		 	 	 	 	 	 	 	 * U2X =1 DOUBLE TRANSMISSION SPEED FOR ASYNCHRONOUS */
			UCSRC &= ~((config->mode) << 6);
    2d92:	a0 e4       	ldi	r26, 0x40	; 64
    2d94:	b0 e0       	ldi	r27, 0x00	; 0
    2d96:	e0 e4       	ldi	r30, 0x40	; 64
    2d98:	f0 e0       	ldi	r31, 0x00	; 0
    2d9a:	80 81       	ld	r24, Z
    2d9c:	28 2f       	mov	r18, r24
    2d9e:	e9 81       	ldd	r30, Y+1	; 0x01
    2da0:	fa 81       	ldd	r31, Y+2	; 0x02
    2da2:	80 81       	ld	r24, Z
    2da4:	88 2f       	mov	r24, r24
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	00 24       	eor	r0, r0
    2daa:	96 95       	lsr	r25
    2dac:	87 95       	ror	r24
    2dae:	07 94       	ror	r0
    2db0:	96 95       	lsr	r25
    2db2:	87 95       	ror	r24
    2db4:	07 94       	ror	r0
    2db6:	98 2f       	mov	r25, r24
    2db8:	80 2d       	mov	r24, r0
    2dba:	80 95       	com	r24
    2dbc:	82 23       	and	r24, r18
    2dbe:	8c 93       	st	X, r24
			UCSRA |= (1<<U2X);
    2dc0:	ab e2       	ldi	r26, 0x2B	; 43
    2dc2:	b0 e0       	ldi	r27, 0x00	; 0
    2dc4:	eb e2       	ldi	r30, 0x2B	; 43
    2dc6:	f0 e0       	ldi	r31, 0x00	; 0
    2dc8:	80 81       	ld	r24, Z
    2dca:	82 60       	ori	r24, 0x02	; 2
    2dcc:	8c 93       	st	X, r24
			UBRRH = (BAUD_PRESCALE_U2X>>8);
    2dce:	e0 e4       	ldi	r30, 0x40	; 64
    2dd0:	f0 e0       	ldi	r31, 0x00	; 0
    2dd2:	10 82       	st	Z, r1
			UBRRL =  BAUD_PRESCALE_U2X;
    2dd4:	e9 e2       	ldi	r30, 0x29	; 41
    2dd6:	f0 e0       	ldi	r31, 0x00	; 0
    2dd8:	8c e0       	ldi	r24, 0x0C	; 12
    2dda:	80 83       	st	Z, r24
		}
}
    2ddc:	0f 90       	pop	r0
    2dde:	0f 90       	pop	r0
    2de0:	cf 91       	pop	r28
    2de2:	df 91       	pop	r29
    2de4:	08 95       	ret

00002de6 <UART_sendByte>:

void UART_sendByte(uint8 data)
{
    2de6:	df 93       	push	r29
    2de8:	cf 93       	push	r28
    2dea:	0f 92       	push	r0
    2dec:	cd b7       	in	r28, 0x3d	; 61
    2dee:	de b7       	in	r29, 0x3e	; 62
    2df0:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    2df2:	eb e2       	ldi	r30, 0x2B	; 43
    2df4:	f0 e0       	ldi	r31, 0x00	; 0
    2df6:	80 81       	ld	r24, Z
    2df8:	88 2f       	mov	r24, r24
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	80 72       	andi	r24, 0x20	; 32
    2dfe:	90 70       	andi	r25, 0x00	; 0
    2e00:	00 97       	sbiw	r24, 0x00	; 0
    2e02:	b9 f3       	breq	.-18     	; 0x2df2 <UART_sendByte+0xc>
	UDR=data;
    2e04:	ec e2       	ldi	r30, 0x2C	; 44
    2e06:	f0 e0       	ldi	r31, 0x00	; 0
    2e08:	89 81       	ldd	r24, Y+1	; 0x01
    2e0a:	80 83       	st	Z, r24
}
    2e0c:	0f 90       	pop	r0
    2e0e:	cf 91       	pop	r28
    2e10:	df 91       	pop	r29
    2e12:	08 95       	ret

00002e14 <UART_receiveByte>:

uint8 UART_receiveByte()
{
    2e14:	df 93       	push	r29
    2e16:	cf 93       	push	r28
    2e18:	cd b7       	in	r28, 0x3d	; 61
    2e1a:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC));
    2e1c:	eb e2       	ldi	r30, 0x2B	; 43
    2e1e:	f0 e0       	ldi	r31, 0x00	; 0
    2e20:	80 81       	ld	r24, Z
    2e22:	88 23       	and	r24, r24
    2e24:	dc f7       	brge	.-10     	; 0x2e1c <UART_receiveByte+0x8>
	return UDR;
    2e26:	ec e2       	ldi	r30, 0x2C	; 44
    2e28:	f0 e0       	ldi	r31, 0x00	; 0
    2e2a:	80 81       	ld	r24, Z
}
    2e2c:	cf 91       	pop	r28
    2e2e:	df 91       	pop	r29
    2e30:	08 95       	ret

00002e32 <__prologue_saves__>:
    2e32:	2f 92       	push	r2
    2e34:	3f 92       	push	r3
    2e36:	4f 92       	push	r4
    2e38:	5f 92       	push	r5
    2e3a:	6f 92       	push	r6
    2e3c:	7f 92       	push	r7
    2e3e:	8f 92       	push	r8
    2e40:	9f 92       	push	r9
    2e42:	af 92       	push	r10
    2e44:	bf 92       	push	r11
    2e46:	cf 92       	push	r12
    2e48:	df 92       	push	r13
    2e4a:	ef 92       	push	r14
    2e4c:	ff 92       	push	r15
    2e4e:	0f 93       	push	r16
    2e50:	1f 93       	push	r17
    2e52:	cf 93       	push	r28
    2e54:	df 93       	push	r29
    2e56:	cd b7       	in	r28, 0x3d	; 61
    2e58:	de b7       	in	r29, 0x3e	; 62
    2e5a:	ca 1b       	sub	r28, r26
    2e5c:	db 0b       	sbc	r29, r27
    2e5e:	0f b6       	in	r0, 0x3f	; 63
    2e60:	f8 94       	cli
    2e62:	de bf       	out	0x3e, r29	; 62
    2e64:	0f be       	out	0x3f, r0	; 63
    2e66:	cd bf       	out	0x3d, r28	; 61
    2e68:	09 94       	ijmp

00002e6a <__epilogue_restores__>:
    2e6a:	2a 88       	ldd	r2, Y+18	; 0x12
    2e6c:	39 88       	ldd	r3, Y+17	; 0x11
    2e6e:	48 88       	ldd	r4, Y+16	; 0x10
    2e70:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e72:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e74:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e76:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e78:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e7a:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e7c:	b9 84       	ldd	r11, Y+9	; 0x09
    2e7e:	c8 84       	ldd	r12, Y+8	; 0x08
    2e80:	df 80       	ldd	r13, Y+7	; 0x07
    2e82:	ee 80       	ldd	r14, Y+6	; 0x06
    2e84:	fd 80       	ldd	r15, Y+5	; 0x05
    2e86:	0c 81       	ldd	r16, Y+4	; 0x04
    2e88:	1b 81       	ldd	r17, Y+3	; 0x03
    2e8a:	aa 81       	ldd	r26, Y+2	; 0x02
    2e8c:	b9 81       	ldd	r27, Y+1	; 0x01
    2e8e:	ce 0f       	add	r28, r30
    2e90:	d1 1d       	adc	r29, r1
    2e92:	0f b6       	in	r0, 0x3f	; 63
    2e94:	f8 94       	cli
    2e96:	de bf       	out	0x3e, r29	; 62
    2e98:	0f be       	out	0x3f, r0	; 63
    2e9a:	cd bf       	out	0x3d, r28	; 61
    2e9c:	ed 01       	movw	r28, r26
    2e9e:	08 95       	ret

00002ea0 <_exit>:
    2ea0:	f8 94       	cli

00002ea2 <__stop_program>:
    2ea2:	ff cf       	rjmp	.-2      	; 0x2ea2 <__stop_program>
