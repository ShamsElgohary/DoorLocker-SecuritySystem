
FinalProject_MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000026d4  00002768  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800074  00800074  0000277c  2**0
                  ALLOC
  3 .stab         000025e0  00000000  00000000  0000277c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010f1  00000000  00000000  00004d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005e4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005f8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000060fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007d46  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008c31  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000099e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009dcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a59b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 20 10 	jmp	0x2040	; 0x2040 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 e2 0f 	jmp	0x1fc4	; 0x1fc4 <__vector_8>
      24:	0c 94 8c 0f 	jmp	0x1f18	; 0x1f18 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 b7 0f 	jmp	0x1f6e	; 0x1f6e <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ed       	ldi	r30, 0xD4	; 212
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 38       	cpi	r26, 0x81	; 129
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 68 13 	jmp	0x26d0	; 0x26d0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ec 12 	jmp	0x25d8	; 0x25d8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 08 13 	jmp	0x2610	; 0x2610 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f8 12 	jmp	0x25f0	; 0x25f0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 14 13 	jmp	0x2628	; 0x2628 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f8 12 	jmp	0x25f0	; 0x25f0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 14 13 	jmp	0x2628	; 0x2628 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ec 12 	jmp	0x25d8	; 0x25d8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 08 13 	jmp	0x2610	; 0x2610 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f8 12 	jmp	0x25f0	; 0x25f0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 14 13 	jmp	0x2628	; 0x2628 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f8 12 	jmp	0x25f0	; 0x25f0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 14 13 	jmp	0x2628	; 0x2628 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f8 12 	jmp	0x25f0	; 0x25f0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 14 13 	jmp	0x2628	; 0x2628 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 fc 12 	jmp	0x25f8	; 0x25f8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 18 13 	jmp	0x2630	; 0x2630 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
void RECEIVE_PW(uint8 PassW[] );
void VERIFY_PW( uint8 PassW[] , uint8 CheckPW[] );


int main()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	eb 97       	sbiw	r28, 0x3b	; 59
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	uint8 PW[4];
	uint8 CHECK[4];

	DDRD |= (1<<PD7) | (1<<PD6); 		//PD6 AND PD7 OUTPUT PINS FOR THE BUZZER
     b5a:	a1 e3       	ldi	r26, 0x31	; 49
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	e1 e3       	ldi	r30, 0x31	; 49
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	80 6c       	ori	r24, 0xC0	; 192
     b66:	8c 93       	st	X, r24
	PORTD &= ~(1<<PD7) & ~(1<<PD6);		// BY DEFAULT OUTPUT PINS ARE 0
     b68:	a2 e3       	ldi	r26, 0x32	; 50
     b6a:	b0 e0       	ldi	r27, 0x00	; 0
     b6c:	e2 e3       	ldi	r30, 0x32	; 50
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	80 81       	ld	r24, Z
     b72:	8f 73       	andi	r24, 0x3F	; 63
     b74:	8c 93       	st	X, r24

	EEPROM_init();
     b76:	0e 94 db 09 	call	0x13b6	; 0x13b6 <EEPROM_init>
	MOTOR_init();
     b7a:	0e 94 77 0f 	call	0x1eee	; 0x1eee <MOTOR_init>

	UART_Config UConfig = {ASYNCH,ENABLED_EVEN,BIT_1};
     b7e:	ce 01       	movw	r24, r28
     b80:	89 96       	adiw	r24, 0x29	; 41
     b82:	9b ab       	std	Y+51, r25	; 0x33
     b84:	8a ab       	std	Y+50, r24	; 0x32
     b86:	ee e6       	ldi	r30, 0x6E	; 110
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	fd ab       	std	Y+53, r31	; 0x35
     b8c:	ec ab       	std	Y+52, r30	; 0x34
     b8e:	f3 e0       	ldi	r31, 0x03	; 3
     b90:	fe ab       	std	Y+54, r31	; 0x36
     b92:	ec a9       	ldd	r30, Y+52	; 0x34
     b94:	fd a9       	ldd	r31, Y+53	; 0x35
     b96:	00 80       	ld	r0, Z
     b98:	8c a9       	ldd	r24, Y+52	; 0x34
     b9a:	9d a9       	ldd	r25, Y+53	; 0x35
     b9c:	01 96       	adiw	r24, 0x01	; 1
     b9e:	9d ab       	std	Y+53, r25	; 0x35
     ba0:	8c ab       	std	Y+52, r24	; 0x34
     ba2:	ea a9       	ldd	r30, Y+50	; 0x32
     ba4:	fb a9       	ldd	r31, Y+51	; 0x33
     ba6:	00 82       	st	Z, r0
     ba8:	8a a9       	ldd	r24, Y+50	; 0x32
     baa:	9b a9       	ldd	r25, Y+51	; 0x33
     bac:	01 96       	adiw	r24, 0x01	; 1
     bae:	9b ab       	std	Y+51, r25	; 0x33
     bb0:	8a ab       	std	Y+50, r24	; 0x32
     bb2:	9e a9       	ldd	r25, Y+54	; 0x36
     bb4:	91 50       	subi	r25, 0x01	; 1
     bb6:	9e ab       	std	Y+54, r25	; 0x36
     bb8:	ee a9       	ldd	r30, Y+54	; 0x36
     bba:	ee 23       	and	r30, r30
     bbc:	51 f7       	brne	.-44     	; 0xb92 <main+0x4c>
	UART_init(&UConfig);
     bbe:	ce 01       	movw	r24, r28
     bc0:	89 96       	adiw	r24, 0x29	; 41
     bc2:	0e 94 d7 11 	call	0x23ae	; 0x23ae <UART_init>

	TimerConfig T1_Configuration={CTC,F_CPU_1024,0,7813};
     bc6:	ce 01       	movw	r24, r28
     bc8:	8c 96       	adiw	r24, 0x2c	; 44
     bca:	98 af       	std	Y+56, r25	; 0x38
     bcc:	8f ab       	std	Y+55, r24	; 0x37
     bce:	e8 e6       	ldi	r30, 0x68	; 104
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	fa af       	std	Y+58, r31	; 0x3a
     bd4:	e9 af       	std	Y+57, r30	; 0x39
     bd6:	f6 e0       	ldi	r31, 0x06	; 6
     bd8:	fb af       	std	Y+59, r31	; 0x3b
     bda:	e9 ad       	ldd	r30, Y+57	; 0x39
     bdc:	fa ad       	ldd	r31, Y+58	; 0x3a
     bde:	00 80       	ld	r0, Z
     be0:	89 ad       	ldd	r24, Y+57	; 0x39
     be2:	9a ad       	ldd	r25, Y+58	; 0x3a
     be4:	01 96       	adiw	r24, 0x01	; 1
     be6:	9a af       	std	Y+58, r25	; 0x3a
     be8:	89 af       	std	Y+57, r24	; 0x39
     bea:	ef a9       	ldd	r30, Y+55	; 0x37
     bec:	f8 ad       	ldd	r31, Y+56	; 0x38
     bee:	00 82       	st	Z, r0
     bf0:	8f a9       	ldd	r24, Y+55	; 0x37
     bf2:	98 ad       	ldd	r25, Y+56	; 0x38
     bf4:	01 96       	adiw	r24, 0x01	; 1
     bf6:	98 af       	std	Y+56, r25	; 0x38
     bf8:	8f ab       	std	Y+55, r24	; 0x37
     bfa:	9b ad       	ldd	r25, Y+59	; 0x3b
     bfc:	91 50       	subi	r25, 0x01	; 1
     bfe:	9b af       	std	Y+59, r25	; 0x3b
     c00:	eb ad       	ldd	r30, Y+59	; 0x3b
     c02:	ee 23       	and	r30, r30
     c04:	51 f7       	brne	.-44     	; 0xbda <main+0x94>
	Timer1_init(&T1_Configuration); 			 //Initialize timer1
     c06:	ce 01       	movw	r24, r28
     c08:	8c 96       	adiw	r24, 0x2c	; 44
     c0a:	0e 94 ca 10 	call	0x2194	; 0x2194 <Timer1_init>
	SREG |= (1<<7);
     c0e:	af e5       	ldi	r26, 0x5F	; 95
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	ef e5       	ldi	r30, 0x5F	; 95
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	80 68       	ori	r24, 0x80	; 128
     c1a:	8c 93       	st	X, r24



		/* RECIEVE PASSWORDS AND VERIFY THE PW'S FROM THE HMI ECU */
		do{
		RECEIVE_PW( PW );        	// RECIEVE FIRST PW USER SENDS
     c1c:	ce 01       	movw	r24, r28
     c1e:	81 96       	adiw	r24, 0x21	; 33
     c20:	0e 94 12 08 	call	0x1024	; 0x1024 <RECEIVE_PW>
		RECEIVE_PW( CHECK );        // RECIEVE VERIFYING PW USER SENDS
     c24:	ce 01       	movw	r24, r28
     c26:	85 96       	adiw	r24, 0x25	; 37
     c28:	0e 94 12 08 	call	0x1024	; 0x1024 <RECEIVE_PW>
		VERIFY_PW (PW,CHECK);		//CHECK IF PW'S SENT FROM THE HMI MATCH
     c2c:	ce 01       	movw	r24, r28
     c2e:	81 96       	adiw	r24, 0x21	; 33
     c30:	9e 01       	movw	r18, r28
     c32:	2b 5d       	subi	r18, 0xDB	; 219
     c34:	3f 4f       	sbci	r19, 0xFF	; 255
     c36:	b9 01       	movw	r22, r18
     c38:	0e 94 b1 08 	call	0x1162	; 0x1162 <VERIFY_PW>
		}while (Valid_Flag == 0);
     c3c:	80 91 80 00 	lds	r24, 0x0080
     c40:	88 23       	and	r24, r24
     c42:	61 f3       	breq	.-40     	; 0xc1c <main+0xd6>

while(1)
{
/////////////////////////////////////////* PHASE 2 *//////////////////////////////////////////////

		uint8 command=UART_receiveByte();
     c44:	0e 94 71 12 	call	0x24e2	; 0x24e2 <UART_receiveByte>
     c48:	88 a3       	std	Y+32, r24	; 0x20

		if (command=='+')
     c4a:	88 a1       	ldd	r24, Y+32	; 0x20
     c4c:	8b 32       	cpi	r24, 0x2B	; 43
     c4e:	a1 f4       	brne	.+40     	; 0xc78 <main+0x132>
		{
			/* RECIEVE PASSWORD AND VERIFYING PW FROM THE HMI ECU */
			do{
			RECEIVE_PW( PW );        	// RECIEVE FIRST PW USER SENDS
     c50:	ce 01       	movw	r24, r28
     c52:	81 96       	adiw	r24, 0x21	; 33
     c54:	0e 94 12 08 	call	0x1024	; 0x1024 <RECEIVE_PW>
			RECEIVE_PW( CHECK );        // RECIEVE VERIFYING PW USER SENDS
     c58:	ce 01       	movw	r24, r28
     c5a:	85 96       	adiw	r24, 0x25	; 37
     c5c:	0e 94 12 08 	call	0x1024	; 0x1024 <RECEIVE_PW>
			VERIFY_PW (PW,CHECK);		//CHECK IF PW'S SENT FROM THE HMI MATCH
     c60:	ce 01       	movw	r24, r28
     c62:	81 96       	adiw	r24, 0x21	; 33
     c64:	9e 01       	movw	r18, r28
     c66:	2b 5d       	subi	r18, 0xDB	; 219
     c68:	3f 4f       	sbci	r19, 0xFF	; 255
     c6a:	b9 01       	movw	r22, r18
     c6c:	0e 94 b1 08 	call	0x1162	; 0x1162 <VERIFY_PW>
			}while (Valid_Flag == 0);
     c70:	80 91 80 00 	lds	r24, 0x0080
     c74:	88 23       	and	r24, r24
     c76:	61 f3       	breq	.-40     	; 0xc50 <main+0x10a>
		}


//////////////////////////////////* SAVE PASSWORD IN EEPROM *//////////////////////////

		for (uint8 i = 0; i < 4; i++) {
     c78:	1f 8e       	std	Y+31, r1	; 0x1f
     c7a:	88 c0       	rjmp	.+272    	; 0xd8c <main+0x246>
			// Increment address in EEPROM for every new byte in PW array
			EEPROM_writeByte( (0x0090 + i), PW[i] );
     c7c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c7e:	88 2f       	mov	r24, r24
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	80 57       	subi	r24, 0x70	; 112
     c84:	9f 4f       	sbci	r25, 0xFF	; 255
     c86:	ac 01       	movw	r20, r24
     c88:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c8a:	28 2f       	mov	r18, r24
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	ce 01       	movw	r24, r28
     c90:	81 96       	adiw	r24, 0x21	; 33
     c92:	fc 01       	movw	r30, r24
     c94:	e2 0f       	add	r30, r18
     c96:	f3 1f       	adc	r31, r19
     c98:	20 81       	ld	r18, Z
     c9a:	ca 01       	movw	r24, r20
     c9c:	62 2f       	mov	r22, r18
     c9e:	0e 94 12 0a 	call	0x1424	; 0x1424 <EEPROM_writeByte>
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	a2 e0       	ldi	r26, 0x02	; 2
     ca8:	b3 e4       	ldi	r27, 0x43	; 67
     caa:	89 8f       	std	Y+25, r24	; 0x19
     cac:	9a 8f       	std	Y+26, r25	; 0x1a
     cae:	ab 8f       	std	Y+27, r26	; 0x1b
     cb0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cb2:	69 8d       	ldd	r22, Y+25	; 0x19
     cb4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cb6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cb8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cba:	20 e0       	ldi	r18, 0x00	; 0
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	4a e7       	ldi	r20, 0x7A	; 122
     cc0:	53 e4       	ldi	r21, 0x43	; 67
     cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cc6:	dc 01       	movw	r26, r24
     cc8:	cb 01       	movw	r24, r22
     cca:	8d 8b       	std	Y+21, r24	; 0x15
     ccc:	9e 8b       	std	Y+22, r25	; 0x16
     cce:	af 8b       	std	Y+23, r26	; 0x17
     cd0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     cd2:	6d 89       	ldd	r22, Y+21	; 0x15
     cd4:	7e 89       	ldd	r23, Y+22	; 0x16
     cd6:	8f 89       	ldd	r24, Y+23	; 0x17
     cd8:	98 8d       	ldd	r25, Y+24	; 0x18
     cda:	20 e0       	ldi	r18, 0x00	; 0
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	40 e8       	ldi	r20, 0x80	; 128
     ce0:	5f e3       	ldi	r21, 0x3F	; 63
     ce2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ce6:	88 23       	and	r24, r24
     ce8:	2c f4       	brge	.+10     	; 0xcf4 <main+0x1ae>
		__ticks = 1;
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	9c 8b       	std	Y+20, r25	; 0x14
     cf0:	8b 8b       	std	Y+19, r24	; 0x13
     cf2:	3f c0       	rjmp	.+126    	; 0xd72 <main+0x22c>
	else if (__tmp > 65535)
     cf4:	6d 89       	ldd	r22, Y+21	; 0x15
     cf6:	7e 89       	ldd	r23, Y+22	; 0x16
     cf8:	8f 89       	ldd	r24, Y+23	; 0x17
     cfa:	98 8d       	ldd	r25, Y+24	; 0x18
     cfc:	20 e0       	ldi	r18, 0x00	; 0
     cfe:	3f ef       	ldi	r19, 0xFF	; 255
     d00:	4f e7       	ldi	r20, 0x7F	; 127
     d02:	57 e4       	ldi	r21, 0x47	; 71
     d04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d08:	18 16       	cp	r1, r24
     d0a:	4c f5       	brge	.+82     	; 0xd5e <main+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d0c:	69 8d       	ldd	r22, Y+25	; 0x19
     d0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d10:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d12:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d14:	20 e0       	ldi	r18, 0x00	; 0
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	40 e2       	ldi	r20, 0x20	; 32
     d1a:	51 e4       	ldi	r21, 0x41	; 65
     d1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d20:	dc 01       	movw	r26, r24
     d22:	cb 01       	movw	r24, r22
     d24:	bc 01       	movw	r22, r24
     d26:	cd 01       	movw	r24, r26
     d28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d2c:	dc 01       	movw	r26, r24
     d2e:	cb 01       	movw	r24, r22
     d30:	9c 8b       	std	Y+20, r25	; 0x14
     d32:	8b 8b       	std	Y+19, r24	; 0x13
     d34:	0f c0       	rjmp	.+30     	; 0xd54 <main+0x20e>
     d36:	89 e1       	ldi	r24, 0x19	; 25
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	9a 8b       	std	Y+18, r25	; 0x12
     d3c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d3e:	89 89       	ldd	r24, Y+17	; 0x11
     d40:	9a 89       	ldd	r25, Y+18	; 0x12
     d42:	01 97       	sbiw	r24, 0x01	; 1
     d44:	f1 f7       	brne	.-4      	; 0xd42 <main+0x1fc>
     d46:	9a 8b       	std	Y+18, r25	; 0x12
     d48:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d4a:	8b 89       	ldd	r24, Y+19	; 0x13
     d4c:	9c 89       	ldd	r25, Y+20	; 0x14
     d4e:	01 97       	sbiw	r24, 0x01	; 1
     d50:	9c 8b       	std	Y+20, r25	; 0x14
     d52:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d54:	8b 89       	ldd	r24, Y+19	; 0x13
     d56:	9c 89       	ldd	r25, Y+20	; 0x14
     d58:	00 97       	sbiw	r24, 0x00	; 0
     d5a:	69 f7       	brne	.-38     	; 0xd36 <main+0x1f0>
     d5c:	14 c0       	rjmp	.+40     	; 0xd86 <main+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d5e:	6d 89       	ldd	r22, Y+21	; 0x15
     d60:	7e 89       	ldd	r23, Y+22	; 0x16
     d62:	8f 89       	ldd	r24, Y+23	; 0x17
     d64:	98 8d       	ldd	r25, Y+24	; 0x18
     d66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d6a:	dc 01       	movw	r26, r24
     d6c:	cb 01       	movw	r24, r22
     d6e:	9c 8b       	std	Y+20, r25	; 0x14
     d70:	8b 8b       	std	Y+19, r24	; 0x13
     d72:	8b 89       	ldd	r24, Y+19	; 0x13
     d74:	9c 89       	ldd	r25, Y+20	; 0x14
     d76:	98 8b       	std	Y+16, r25	; 0x10
     d78:	8f 87       	std	Y+15, r24	; 0x0f
     d7a:	8f 85       	ldd	r24, Y+15	; 0x0f
     d7c:	98 89       	ldd	r25, Y+16	; 0x10
     d7e:	01 97       	sbiw	r24, 0x01	; 1
     d80:	f1 f7       	brne	.-4      	; 0xd7e <main+0x238>
     d82:	98 8b       	std	Y+16, r25	; 0x10
     d84:	8f 87       	std	Y+15, r24	; 0x0f
		}


//////////////////////////////////* SAVE PASSWORD IN EEPROM *//////////////////////////

		for (uint8 i = 0; i < 4; i++) {
     d86:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d88:	8f 5f       	subi	r24, 0xFF	; 255
     d8a:	8f 8f       	std	Y+31, r24	; 0x1f
     d8c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d8e:	84 30       	cpi	r24, 0x04	; 4
     d90:	08 f4       	brcc	.+2      	; 0xd94 <main+0x24e>
     d92:	74 cf       	rjmp	.-280    	; 0xc7c <main+0x136>
		}

/////////////////////////////////////////* PHASE 3 *//////////////////////////////////////////////////


		if (command=='-')			/* RECIEVE "command" OF USER FROM THE HMI ECU */
     d94:	88 a1       	ldd	r24, Y+32	; 0x20
     d96:	8d 32       	cpi	r24, 0x2D	; 45
     d98:	09 f0       	breq	.+2      	; 0xd9c <main+0x256>
     d9a:	54 cf       	rjmp	.-344    	; 0xc44 <main+0xfe>
		{
			/* GET PASSWORD IN EEPROM AND SAVE IT IN A VARIABLE TO CHECK PW USER SENT */
			for (uint8 i = 0; i < 4; i++)
     d9c:	1d 8e       	std	Y+29, r1	; 0x1d
     d9e:	87 c0       	rjmp	.+270    	; 0xeae <main+0x368>
			  {  EEPROM_readByte( (0x0090 + i), (PW+i)); _delay_ms(100); }
     da0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     da2:	88 2f       	mov	r24, r24
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	80 57       	subi	r24, 0x70	; 112
     da8:	9f 4f       	sbci	r25, 0xFF	; 255
     daa:	ac 01       	movw	r20, r24
     dac:	8d 8d       	ldd	r24, Y+29	; 0x1d
     dae:	88 2f       	mov	r24, r24
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	9e 01       	movw	r18, r28
     db4:	2f 5d       	subi	r18, 0xDF	; 223
     db6:	3f 4f       	sbci	r19, 0xFF	; 255
     db8:	28 0f       	add	r18, r24
     dba:	39 1f       	adc	r19, r25
     dbc:	ca 01       	movw	r24, r20
     dbe:	b9 01       	movw	r22, r18
     dc0:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <EEPROM_readByte>
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	a8 ec       	ldi	r26, 0xC8	; 200
     dca:	b2 e4       	ldi	r27, 0x42	; 66
     dcc:	8b 87       	std	Y+11, r24	; 0x0b
     dce:	9c 87       	std	Y+12, r25	; 0x0c
     dd0:	ad 87       	std	Y+13, r26	; 0x0d
     dd2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dd4:	6b 85       	ldd	r22, Y+11	; 0x0b
     dd6:	7c 85       	ldd	r23, Y+12	; 0x0c
     dd8:	8d 85       	ldd	r24, Y+13	; 0x0d
     dda:	9e 85       	ldd	r25, Y+14	; 0x0e
     ddc:	20 e0       	ldi	r18, 0x00	; 0
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	4a e7       	ldi	r20, 0x7A	; 122
     de2:	53 e4       	ldi	r21, 0x43	; 67
     de4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     de8:	dc 01       	movw	r26, r24
     dea:	cb 01       	movw	r24, r22
     dec:	8f 83       	std	Y+7, r24	; 0x07
     dee:	98 87       	std	Y+8, r25	; 0x08
     df0:	a9 87       	std	Y+9, r26	; 0x09
     df2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     df4:	6f 81       	ldd	r22, Y+7	; 0x07
     df6:	78 85       	ldd	r23, Y+8	; 0x08
     df8:	89 85       	ldd	r24, Y+9	; 0x09
     dfa:	9a 85       	ldd	r25, Y+10	; 0x0a
     dfc:	20 e0       	ldi	r18, 0x00	; 0
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	40 e8       	ldi	r20, 0x80	; 128
     e02:	5f e3       	ldi	r21, 0x3F	; 63
     e04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e08:	88 23       	and	r24, r24
     e0a:	2c f4       	brge	.+10     	; 0xe16 <main+0x2d0>
		__ticks = 1;
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	9e 83       	std	Y+6, r25	; 0x06
     e12:	8d 83       	std	Y+5, r24	; 0x05
     e14:	3f c0       	rjmp	.+126    	; 0xe94 <main+0x34e>
	else if (__tmp > 65535)
     e16:	6f 81       	ldd	r22, Y+7	; 0x07
     e18:	78 85       	ldd	r23, Y+8	; 0x08
     e1a:	89 85       	ldd	r24, Y+9	; 0x09
     e1c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e1e:	20 e0       	ldi	r18, 0x00	; 0
     e20:	3f ef       	ldi	r19, 0xFF	; 255
     e22:	4f e7       	ldi	r20, 0x7F	; 127
     e24:	57 e4       	ldi	r21, 0x47	; 71
     e26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e2a:	18 16       	cp	r1, r24
     e2c:	4c f5       	brge	.+82     	; 0xe80 <main+0x33a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e2e:	6b 85       	ldd	r22, Y+11	; 0x0b
     e30:	7c 85       	ldd	r23, Y+12	; 0x0c
     e32:	8d 85       	ldd	r24, Y+13	; 0x0d
     e34:	9e 85       	ldd	r25, Y+14	; 0x0e
     e36:	20 e0       	ldi	r18, 0x00	; 0
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	40 e2       	ldi	r20, 0x20	; 32
     e3c:	51 e4       	ldi	r21, 0x41	; 65
     e3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e42:	dc 01       	movw	r26, r24
     e44:	cb 01       	movw	r24, r22
     e46:	bc 01       	movw	r22, r24
     e48:	cd 01       	movw	r24, r26
     e4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e4e:	dc 01       	movw	r26, r24
     e50:	cb 01       	movw	r24, r22
     e52:	9e 83       	std	Y+6, r25	; 0x06
     e54:	8d 83       	std	Y+5, r24	; 0x05
     e56:	0f c0       	rjmp	.+30     	; 0xe76 <main+0x330>
     e58:	89 e1       	ldi	r24, 0x19	; 25
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	9c 83       	std	Y+4, r25	; 0x04
     e5e:	8b 83       	std	Y+3, r24	; 0x03
     e60:	8b 81       	ldd	r24, Y+3	; 0x03
     e62:	9c 81       	ldd	r25, Y+4	; 0x04
     e64:	01 97       	sbiw	r24, 0x01	; 1
     e66:	f1 f7       	brne	.-4      	; 0xe64 <main+0x31e>
     e68:	9c 83       	std	Y+4, r25	; 0x04
     e6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e6c:	8d 81       	ldd	r24, Y+5	; 0x05
     e6e:	9e 81       	ldd	r25, Y+6	; 0x06
     e70:	01 97       	sbiw	r24, 0x01	; 1
     e72:	9e 83       	std	Y+6, r25	; 0x06
     e74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e76:	8d 81       	ldd	r24, Y+5	; 0x05
     e78:	9e 81       	ldd	r25, Y+6	; 0x06
     e7a:	00 97       	sbiw	r24, 0x00	; 0
     e7c:	69 f7       	brne	.-38     	; 0xe58 <main+0x312>
     e7e:	14 c0       	rjmp	.+40     	; 0xea8 <main+0x362>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e80:	6f 81       	ldd	r22, Y+7	; 0x07
     e82:	78 85       	ldd	r23, Y+8	; 0x08
     e84:	89 85       	ldd	r24, Y+9	; 0x09
     e86:	9a 85       	ldd	r25, Y+10	; 0x0a
     e88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e8c:	dc 01       	movw	r26, r24
     e8e:	cb 01       	movw	r24, r22
     e90:	9e 83       	std	Y+6, r25	; 0x06
     e92:	8d 83       	std	Y+5, r24	; 0x05
     e94:	8d 81       	ldd	r24, Y+5	; 0x05
     e96:	9e 81       	ldd	r25, Y+6	; 0x06
     e98:	9a 83       	std	Y+2, r25	; 0x02
     e9a:	89 83       	std	Y+1, r24	; 0x01
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
     e9e:	9a 81       	ldd	r25, Y+2	; 0x02
     ea0:	01 97       	sbiw	r24, 0x01	; 1
     ea2:	f1 f7       	brne	.-4      	; 0xea0 <main+0x35a>
     ea4:	9a 83       	std	Y+2, r25	; 0x02
     ea6:	89 83       	std	Y+1, r24	; 0x01


		if (command=='-')			/* RECIEVE "command" OF USER FROM THE HMI ECU */
		{
			/* GET PASSWORD IN EEPROM AND SAVE IT IN A VARIABLE TO CHECK PW USER SENT */
			for (uint8 i = 0; i < 4; i++)
     ea8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     eaa:	8f 5f       	subi	r24, 0xFF	; 255
     eac:	8d 8f       	std	Y+29, r24	; 0x1d
     eae:	8d 8d       	ldd	r24, Y+29	; 0x1d
     eb0:	84 30       	cpi	r24, 0x04	; 4
     eb2:	08 f4       	brcc	.+2      	; 0xeb6 <main+0x370>
     eb4:	75 cf       	rjmp	.-278    	; 0xda0 <main+0x25a>
			  {  EEPROM_readByte( (0x0090 + i), (PW+i)); _delay_ms(100); }


			/* 3 CHANCES FOR USER TO ENTER PW CORRECTLY */

			uint8 count=0;
     eb6:	1e 8e       	std	Y+30, r1	; 0x1e
			do{
			count++;
     eb8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     eba:	8f 5f       	subi	r24, 0xFF	; 255
     ebc:	8e 8f       	std	Y+30, r24	; 0x1e
			RECEIVE_PW( CHECK );        			// RECIEVE PW USER SENDS WE WANT TO CHECK
     ebe:	ce 01       	movw	r24, r28
     ec0:	85 96       	adiw	r24, 0x25	; 37
     ec2:	0e 94 12 08 	call	0x1024	; 0x1024 <RECEIVE_PW>
			VERIFY_PW (PW,CHECK);					//CHECK IF PW USER SENT IS CORRECT
     ec6:	ce 01       	movw	r24, r28
     ec8:	81 96       	adiw	r24, 0x21	; 33
     eca:	9e 01       	movw	r18, r28
     ecc:	2b 5d       	subi	r18, 0xDB	; 219
     ece:	3f 4f       	sbci	r19, 0xFF	; 255
     ed0:	b9 01       	movw	r22, r18
     ed2:	0e 94 b1 08 	call	0x1162	; 0x1162 <VERIFY_PW>
			} while(Valid_Flag == 0 && count<3);
     ed6:	80 91 80 00 	lds	r24, 0x0080
     eda:	88 23       	and	r24, r24
     edc:	19 f4       	brne	.+6      	; 0xee4 <main+0x39e>
     ede:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ee0:	83 30       	cpi	r24, 0x03	; 3
     ee2:	50 f3       	brcs	.-44     	; 0xeb8 <main+0x372>


			if (Valid_Flag)
     ee4:	80 91 80 00 	lds	r24, 0x0080
     ee8:	88 23       	and	r24, r24
     eea:	09 f4       	brne	.+2      	; 0xeee <main+0x3a8>
     eec:	6b c0       	rjmp	.+214    	; 0xfc4 <main+0x47e>
			{
			/* DOOR OPENS IN 15 SECONDS (MOVES CLOCKWISE) AND THEN THE DOOR
			 * IS OPENED FOR 3 SECONDS AND THEN CLOSES IN 15 SECONDS */
			SECONDS_T1_MC2 = 0;
     eee:	10 92 7c 00 	sts	0x007C, r1
     ef2:	10 92 7d 00 	sts	0x007D, r1
     ef6:	10 92 7e 00 	sts	0x007E, r1
     efa:	10 92 7f 00 	sts	0x007F, r1
     efe:	0e c0       	rjmp	.+28     	; 0xf1c <main+0x3d6>
			while ( SECONDS_T1_MC2 <= 15)   { 	MOTOR_clockw;       }
     f00:	a5 e3       	ldi	r26, 0x35	; 53
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e5 e3       	ldi	r30, 0x35	; 53
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	80 62       	ori	r24, 0x20	; 32
     f0c:	8c 93       	st	X, r24
     f0e:	a5 e3       	ldi	r26, 0x35	; 53
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e5 e3       	ldi	r30, 0x35	; 53
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	8f 7b       	andi	r24, 0xBF	; 191
     f1a:	8c 93       	st	X, r24
     f1c:	80 91 7c 00 	lds	r24, 0x007C
     f20:	90 91 7d 00 	lds	r25, 0x007D
     f24:	a0 91 7e 00 	lds	r26, 0x007E
     f28:	b0 91 7f 00 	lds	r27, 0x007F
     f2c:	80 31       	cpi	r24, 0x10	; 16
     f2e:	91 05       	cpc	r25, r1
     f30:	a1 05       	cpc	r26, r1
     f32:	b1 05       	cpc	r27, r1
     f34:	28 f3       	brcs	.-54     	; 0xf00 <main+0x3ba>
     f36:	0e c0       	rjmp	.+28     	; 0xf54 <main+0x40e>
			while ( SECONDS_T1_MC2 <= 18)	{   MOTOR_stop;			}
     f38:	a5 e3       	ldi	r26, 0x35	; 53
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	e5 e3       	ldi	r30, 0x35	; 53
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	8f 7d       	andi	r24, 0xDF	; 223
     f44:	8c 93       	st	X, r24
     f46:	a5 e3       	ldi	r26, 0x35	; 53
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e5 e3       	ldi	r30, 0x35	; 53
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	8f 7b       	andi	r24, 0xBF	; 191
     f52:	8c 93       	st	X, r24
     f54:	80 91 7c 00 	lds	r24, 0x007C
     f58:	90 91 7d 00 	lds	r25, 0x007D
     f5c:	a0 91 7e 00 	lds	r26, 0x007E
     f60:	b0 91 7f 00 	lds	r27, 0x007F
     f64:	83 31       	cpi	r24, 0x13	; 19
     f66:	91 05       	cpc	r25, r1
     f68:	a1 05       	cpc	r26, r1
     f6a:	b1 05       	cpc	r27, r1
     f6c:	28 f3       	brcs	.-54     	; 0xf38 <main+0x3f2>
     f6e:	0e c0       	rjmp	.+28     	; 0xf8c <main+0x446>
			while ( SECONDS_T1_MC2 <= 33)   {   MOTOR_anti_clockw;  }
     f70:	a5 e3       	ldi	r26, 0x35	; 53
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e5 e3       	ldi	r30, 0x35	; 53
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	8f 7d       	andi	r24, 0xDF	; 223
     f7c:	8c 93       	st	X, r24
     f7e:	a5 e3       	ldi	r26, 0x35	; 53
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	e5 e3       	ldi	r30, 0x35	; 53
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	80 64       	ori	r24, 0x40	; 64
     f8a:	8c 93       	st	X, r24
     f8c:	80 91 7c 00 	lds	r24, 0x007C
     f90:	90 91 7d 00 	lds	r25, 0x007D
     f94:	a0 91 7e 00 	lds	r26, 0x007E
     f98:	b0 91 7f 00 	lds	r27, 0x007F
     f9c:	82 32       	cpi	r24, 0x22	; 34
     f9e:	91 05       	cpc	r25, r1
     fa0:	a1 05       	cpc	r26, r1
     fa2:	b1 05       	cpc	r27, r1
     fa4:	28 f3       	brcs	.-54     	; 0xf70 <main+0x42a>
			MOTOR_stop;
     fa6:	a5 e3       	ldi	r26, 0x35	; 53
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e5 e3       	ldi	r30, 0x35	; 53
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	8f 7d       	andi	r24, 0xDF	; 223
     fb2:	8c 93       	st	X, r24
     fb4:	a5 e3       	ldi	r26, 0x35	; 53
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e5 e3       	ldi	r30, 0x35	; 53
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	8f 7b       	andi	r24, 0xBF	; 191
     fc0:	8c 93       	st	X, r24
     fc2:	40 ce       	rjmp	.-896    	; 0xc44 <main+0xfe>
			}

			else if(!Valid_Flag) 							//ALARM -> ACTIVATE BUZZER
     fc4:	80 91 80 00 	lds	r24, 0x0080
     fc8:	88 23       	and	r24, r24
     fca:	09 f0       	breq	.+2      	; 0xfce <main+0x488>
     fcc:	3b ce       	rjmp	.-906    	; 0xc44 <main+0xfe>
			{
			PORTD |= (1<<PD6);
     fce:	a2 e3       	ldi	r26, 0x32	; 50
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e2 e3       	ldi	r30, 0x32	; 50
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	80 64       	ori	r24, 0x40	; 64
     fda:	8c 93       	st	X, r24
			PORTD &= ~(1<<PD7);
     fdc:	a2 e3       	ldi	r26, 0x32	; 50
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e2 e3       	ldi	r30, 0x32	; 50
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	8f 77       	andi	r24, 0x7F	; 127
     fe8:	8c 93       	st	X, r24
			SECONDS_T1_MC2 = 0;
     fea:	10 92 7c 00 	sts	0x007C, r1
     fee:	10 92 7d 00 	sts	0x007D, r1
     ff2:	10 92 7e 00 	sts	0x007E, r1
     ff6:	10 92 7f 00 	sts	0x007F, r1
			while ( SECONDS_T1_MC2 <= 60);         			// LOCK MC1 FOR 60 SECONDS
     ffa:	80 91 7c 00 	lds	r24, 0x007C
     ffe:	90 91 7d 00 	lds	r25, 0x007D
    1002:	a0 91 7e 00 	lds	r26, 0x007E
    1006:	b0 91 7f 00 	lds	r27, 0x007F
    100a:	8d 33       	cpi	r24, 0x3D	; 61
    100c:	91 05       	cpc	r25, r1
    100e:	a1 05       	cpc	r26, r1
    1010:	b1 05       	cpc	r27, r1
    1012:	98 f3       	brcs	.-26     	; 0xffa <main+0x4b4>
			PORTD &= ~(1<<PD6);
    1014:	a2 e3       	ldi	r26, 0x32	; 50
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	e2 e3       	ldi	r30, 0x32	; 50
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	8f 7b       	andi	r24, 0xBF	; 191
    1020:	8c 93       	st	X, r24
    1022:	10 ce       	rjmp	.-992    	; 0xc44 <main+0xfe>

00001024 <RECEIVE_PW>:

	}
}

void RECEIVE_PW(uint8 PassW[] )
{
    1024:	0f 93       	push	r16
    1026:	1f 93       	push	r17
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
    1030:	61 97       	sbiw	r28, 0x11	; 17
    1032:	0f b6       	in	r0, 0x3f	; 63
    1034:	f8 94       	cli
    1036:	de bf       	out	0x3e, r29	; 62
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	cd bf       	out	0x3d, r28	; 61
    103c:	99 8b       	std	Y+17, r25	; 0x11
    103e:	88 8b       	std	Y+16, r24	; 0x10
	for (uint8 i = 0; i < 4; i++) {
    1040:	1f 86       	std	Y+15, r1	; 0x0f
    1042:	0f c0       	rjmp	.+30     	; 0x1062 <RECEIVE_PW+0x3e>
		PassW[i]=UART_receiveByte();
    1044:	8f 85       	ldd	r24, Y+15	; 0x0f
    1046:	28 2f       	mov	r18, r24
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	88 89       	ldd	r24, Y+16	; 0x10
    104c:	99 89       	ldd	r25, Y+17	; 0x11
    104e:	8c 01       	movw	r16, r24
    1050:	02 0f       	add	r16, r18
    1052:	13 1f       	adc	r17, r19
    1054:	0e 94 71 12 	call	0x24e2	; 0x24e2 <UART_receiveByte>
    1058:	f8 01       	movw	r30, r16
    105a:	80 83       	st	Z, r24
	}
}

void RECEIVE_PW(uint8 PassW[] )
{
	for (uint8 i = 0; i < 4; i++) {
    105c:	8f 85       	ldd	r24, Y+15	; 0x0f
    105e:	8f 5f       	subi	r24, 0xFF	; 255
    1060:	8f 87       	std	Y+15, r24	; 0x0f
    1062:	8f 85       	ldd	r24, Y+15	; 0x0f
    1064:	84 30       	cpi	r24, 0x04	; 4
    1066:	70 f3       	brcs	.-36     	; 0x1044 <RECEIVE_PW+0x20>
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	a2 e0       	ldi	r26, 0x02	; 2
    106e:	b3 e4       	ldi	r27, 0x43	; 67
    1070:	8b 87       	std	Y+11, r24	; 0x0b
    1072:	9c 87       	std	Y+12, r25	; 0x0c
    1074:	ad 87       	std	Y+13, r26	; 0x0d
    1076:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1078:	6b 85       	ldd	r22, Y+11	; 0x0b
    107a:	7c 85       	ldd	r23, Y+12	; 0x0c
    107c:	8d 85       	ldd	r24, Y+13	; 0x0d
    107e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1080:	20 e0       	ldi	r18, 0x00	; 0
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	4a e7       	ldi	r20, 0x7A	; 122
    1086:	53 e4       	ldi	r21, 0x43	; 67
    1088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    108c:	dc 01       	movw	r26, r24
    108e:	cb 01       	movw	r24, r22
    1090:	8f 83       	std	Y+7, r24	; 0x07
    1092:	98 87       	std	Y+8, r25	; 0x08
    1094:	a9 87       	std	Y+9, r26	; 0x09
    1096:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1098:	6f 81       	ldd	r22, Y+7	; 0x07
    109a:	78 85       	ldd	r23, Y+8	; 0x08
    109c:	89 85       	ldd	r24, Y+9	; 0x09
    109e:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	40 e8       	ldi	r20, 0x80	; 128
    10a6:	5f e3       	ldi	r21, 0x3F	; 63
    10a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10ac:	88 23       	and	r24, r24
    10ae:	2c f4       	brge	.+10     	; 0x10ba <RECEIVE_PW+0x96>
		__ticks = 1;
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	9e 83       	std	Y+6, r25	; 0x06
    10b6:	8d 83       	std	Y+5, r24	; 0x05
    10b8:	3f c0       	rjmp	.+126    	; 0x1138 <RECEIVE_PW+0x114>
	else if (__tmp > 65535)
    10ba:	6f 81       	ldd	r22, Y+7	; 0x07
    10bc:	78 85       	ldd	r23, Y+8	; 0x08
    10be:	89 85       	ldd	r24, Y+9	; 0x09
    10c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	3f ef       	ldi	r19, 0xFF	; 255
    10c6:	4f e7       	ldi	r20, 0x7F	; 127
    10c8:	57 e4       	ldi	r21, 0x47	; 71
    10ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10ce:	18 16       	cp	r1, r24
    10d0:	4c f5       	brge	.+82     	; 0x1124 <RECEIVE_PW+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    10d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    10d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    10d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	40 e2       	ldi	r20, 0x20	; 32
    10e0:	51 e4       	ldi	r21, 0x41	; 65
    10e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10e6:	dc 01       	movw	r26, r24
    10e8:	cb 01       	movw	r24, r22
    10ea:	bc 01       	movw	r22, r24
    10ec:	cd 01       	movw	r24, r26
    10ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10f2:	dc 01       	movw	r26, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	9e 83       	std	Y+6, r25	; 0x06
    10f8:	8d 83       	std	Y+5, r24	; 0x05
    10fa:	0f c0       	rjmp	.+30     	; 0x111a <RECEIVE_PW+0xf6>
    10fc:	89 e1       	ldi	r24, 0x19	; 25
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	9c 83       	std	Y+4, r25	; 0x04
    1102:	8b 83       	std	Y+3, r24	; 0x03
    1104:	8b 81       	ldd	r24, Y+3	; 0x03
    1106:	9c 81       	ldd	r25, Y+4	; 0x04
    1108:	01 97       	sbiw	r24, 0x01	; 1
    110a:	f1 f7       	brne	.-4      	; 0x1108 <RECEIVE_PW+0xe4>
    110c:	9c 83       	std	Y+4, r25	; 0x04
    110e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1110:	8d 81       	ldd	r24, Y+5	; 0x05
    1112:	9e 81       	ldd	r25, Y+6	; 0x06
    1114:	01 97       	sbiw	r24, 0x01	; 1
    1116:	9e 83       	std	Y+6, r25	; 0x06
    1118:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    111a:	8d 81       	ldd	r24, Y+5	; 0x05
    111c:	9e 81       	ldd	r25, Y+6	; 0x06
    111e:	00 97       	sbiw	r24, 0x00	; 0
    1120:	69 f7       	brne	.-38     	; 0x10fc <RECEIVE_PW+0xd8>
    1122:	14 c0       	rjmp	.+40     	; 0x114c <RECEIVE_PW+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1124:	6f 81       	ldd	r22, Y+7	; 0x07
    1126:	78 85       	ldd	r23, Y+8	; 0x08
    1128:	89 85       	ldd	r24, Y+9	; 0x09
    112a:	9a 85       	ldd	r25, Y+10	; 0x0a
    112c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1130:	dc 01       	movw	r26, r24
    1132:	cb 01       	movw	r24, r22
    1134:	9e 83       	std	Y+6, r25	; 0x06
    1136:	8d 83       	std	Y+5, r24	; 0x05
    1138:	8d 81       	ldd	r24, Y+5	; 0x05
    113a:	9e 81       	ldd	r25, Y+6	; 0x06
    113c:	9a 83       	std	Y+2, r25	; 0x02
    113e:	89 83       	std	Y+1, r24	; 0x01
    1140:	89 81       	ldd	r24, Y+1	; 0x01
    1142:	9a 81       	ldd	r25, Y+2	; 0x02
    1144:	01 97       	sbiw	r24, 0x01	; 1
    1146:	f1 f7       	brne	.-4      	; 0x1144 <RECEIVE_PW+0x120>
    1148:	9a 83       	std	Y+2, r25	; 0x02
    114a:	89 83       	std	Y+1, r24	; 0x01
		PassW[i]=UART_receiveByte();
	}
	_delay_ms(DELAY_UART);

}
    114c:	61 96       	adiw	r28, 0x11	; 17
    114e:	0f b6       	in	r0, 0x3f	; 63
    1150:	f8 94       	cli
    1152:	de bf       	out	0x3e, r29	; 62
    1154:	0f be       	out	0x3f, r0	; 63
    1156:	cd bf       	out	0x3d, r28	; 61
    1158:	cf 91       	pop	r28
    115a:	df 91       	pop	r29
    115c:	1f 91       	pop	r17
    115e:	0f 91       	pop	r16
    1160:	08 95       	ret

00001162 <VERIFY_PW>:


void VERIFY_PW (uint8 PassW[] , uint8 CheckPW[])
{
    1162:	df 93       	push	r29
    1164:	cf 93       	push	r28
    1166:	cd b7       	in	r28, 0x3d	; 61
    1168:	de b7       	in	r29, 0x3e	; 62
    116a:	a1 97       	sbiw	r28, 0x21	; 33
    116c:	0f b6       	in	r0, 0x3f	; 63
    116e:	f8 94       	cli
    1170:	de bf       	out	0x3e, r29	; 62
    1172:	0f be       	out	0x3f, r0	; 63
    1174:	cd bf       	out	0x3d, r28	; 61
    1176:	9f 8f       	std	Y+31, r25	; 0x1f
    1178:	8e 8f       	std	Y+30, r24	; 0x1e
    117a:	79 a3       	std	Y+33, r23	; 0x21
    117c:	68 a3       	std	Y+32, r22	; 0x20

	for (uint8 i = 0; i < 4; i++)
    117e:	1d 8e       	std	Y+29, r1	; 0x1d
    1180:	93 c0       	rjmp	.+294    	; 0x12a8 <VERIFY_PW+0x146>
	{
		if (PassW[i] != CheckPW[i])			//IF ONE CHAR IS DIFFRENT THEN PW IS INVALID
    1182:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1184:	28 2f       	mov	r18, r24
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	8e 8d       	ldd	r24, Y+30	; 0x1e
    118a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    118c:	fc 01       	movw	r30, r24
    118e:	e2 0f       	add	r30, r18
    1190:	f3 1f       	adc	r31, r19
    1192:	40 81       	ld	r20, Z
    1194:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	88 a1       	ldd	r24, Y+32	; 0x20
    119c:	99 a1       	ldd	r25, Y+33	; 0x21
    119e:	fc 01       	movw	r30, r24
    11a0:	e2 0f       	add	r30, r18
    11a2:	f3 1f       	adc	r31, r19
    11a4:	80 81       	ld	r24, Z
    11a6:	48 17       	cp	r20, r24
    11a8:	09 f4       	brne	.+2      	; 0x11ac <VERIFY_PW+0x4a>
    11aa:	78 c0       	rjmp	.+240    	; 0x129c <VERIFY_PW+0x13a>
		{
			UART_sendByte(0);
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <UART_sendByte>
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	a2 e0       	ldi	r26, 0x02	; 2
    11b8:	b3 e4       	ldi	r27, 0x43	; 67
    11ba:	89 8f       	std	Y+25, r24	; 0x19
    11bc:	9a 8f       	std	Y+26, r25	; 0x1a
    11be:	ab 8f       	std	Y+27, r26	; 0x1b
    11c0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11c2:	69 8d       	ldd	r22, Y+25	; 0x19
    11c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	4a e7       	ldi	r20, 0x7A	; 122
    11d0:	53 e4       	ldi	r21, 0x43	; 67
    11d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11d6:	dc 01       	movw	r26, r24
    11d8:	cb 01       	movw	r24, r22
    11da:	8d 8b       	std	Y+21, r24	; 0x15
    11dc:	9e 8b       	std	Y+22, r25	; 0x16
    11de:	af 8b       	std	Y+23, r26	; 0x17
    11e0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    11e2:	6d 89       	ldd	r22, Y+21	; 0x15
    11e4:	7e 89       	ldd	r23, Y+22	; 0x16
    11e6:	8f 89       	ldd	r24, Y+23	; 0x17
    11e8:	98 8d       	ldd	r25, Y+24	; 0x18
    11ea:	20 e0       	ldi	r18, 0x00	; 0
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	40 e8       	ldi	r20, 0x80	; 128
    11f0:	5f e3       	ldi	r21, 0x3F	; 63
    11f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11f6:	88 23       	and	r24, r24
    11f8:	2c f4       	brge	.+10     	; 0x1204 <VERIFY_PW+0xa2>
		__ticks = 1;
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	9c 8b       	std	Y+20, r25	; 0x14
    1200:	8b 8b       	std	Y+19, r24	; 0x13
    1202:	3f c0       	rjmp	.+126    	; 0x1282 <VERIFY_PW+0x120>
	else if (__tmp > 65535)
    1204:	6d 89       	ldd	r22, Y+21	; 0x15
    1206:	7e 89       	ldd	r23, Y+22	; 0x16
    1208:	8f 89       	ldd	r24, Y+23	; 0x17
    120a:	98 8d       	ldd	r25, Y+24	; 0x18
    120c:	20 e0       	ldi	r18, 0x00	; 0
    120e:	3f ef       	ldi	r19, 0xFF	; 255
    1210:	4f e7       	ldi	r20, 0x7F	; 127
    1212:	57 e4       	ldi	r21, 0x47	; 71
    1214:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1218:	18 16       	cp	r1, r24
    121a:	4c f5       	brge	.+82     	; 0x126e <VERIFY_PW+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    121c:	69 8d       	ldd	r22, Y+25	; 0x19
    121e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1220:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1222:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1224:	20 e0       	ldi	r18, 0x00	; 0
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	40 e2       	ldi	r20, 0x20	; 32
    122a:	51 e4       	ldi	r21, 0x41	; 65
    122c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1230:	dc 01       	movw	r26, r24
    1232:	cb 01       	movw	r24, r22
    1234:	bc 01       	movw	r22, r24
    1236:	cd 01       	movw	r24, r26
    1238:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    123c:	dc 01       	movw	r26, r24
    123e:	cb 01       	movw	r24, r22
    1240:	9c 8b       	std	Y+20, r25	; 0x14
    1242:	8b 8b       	std	Y+19, r24	; 0x13
    1244:	0f c0       	rjmp	.+30     	; 0x1264 <VERIFY_PW+0x102>
    1246:	89 e1       	ldi	r24, 0x19	; 25
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	9a 8b       	std	Y+18, r25	; 0x12
    124c:	89 8b       	std	Y+17, r24	; 0x11
    124e:	89 89       	ldd	r24, Y+17	; 0x11
    1250:	9a 89       	ldd	r25, Y+18	; 0x12
    1252:	01 97       	sbiw	r24, 0x01	; 1
    1254:	f1 f7       	brne	.-4      	; 0x1252 <VERIFY_PW+0xf0>
    1256:	9a 8b       	std	Y+18, r25	; 0x12
    1258:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    125a:	8b 89       	ldd	r24, Y+19	; 0x13
    125c:	9c 89       	ldd	r25, Y+20	; 0x14
    125e:	01 97       	sbiw	r24, 0x01	; 1
    1260:	9c 8b       	std	Y+20, r25	; 0x14
    1262:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1264:	8b 89       	ldd	r24, Y+19	; 0x13
    1266:	9c 89       	ldd	r25, Y+20	; 0x14
    1268:	00 97       	sbiw	r24, 0x00	; 0
    126a:	69 f7       	brne	.-38     	; 0x1246 <VERIFY_PW+0xe4>
    126c:	14 c0       	rjmp	.+40     	; 0x1296 <VERIFY_PW+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    126e:	6d 89       	ldd	r22, Y+21	; 0x15
    1270:	7e 89       	ldd	r23, Y+22	; 0x16
    1272:	8f 89       	ldd	r24, Y+23	; 0x17
    1274:	98 8d       	ldd	r25, Y+24	; 0x18
    1276:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    127a:	dc 01       	movw	r26, r24
    127c:	cb 01       	movw	r24, r22
    127e:	9c 8b       	std	Y+20, r25	; 0x14
    1280:	8b 8b       	std	Y+19, r24	; 0x13
    1282:	8b 89       	ldd	r24, Y+19	; 0x13
    1284:	9c 89       	ldd	r25, Y+20	; 0x14
    1286:	98 8b       	std	Y+16, r25	; 0x10
    1288:	8f 87       	std	Y+15, r24	; 0x0f
    128a:	8f 85       	ldd	r24, Y+15	; 0x0f
    128c:	98 89       	ldd	r25, Y+16	; 0x10
    128e:	01 97       	sbiw	r24, 0x01	; 1
    1290:	f1 f7       	brne	.-4      	; 0x128e <VERIFY_PW+0x12c>
    1292:	98 8b       	std	Y+16, r25	; 0x10
    1294:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(DELAY_UART);
			Valid_Flag=0;
    1296:	10 92 80 00 	sts	0x0080, r1
    129a:	0a c0       	rjmp	.+20     	; 0x12b0 <VERIFY_PW+0x14e>
			break;
		}
		Valid_Flag=1;
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	80 93 80 00 	sts	0x0080, r24


void VERIFY_PW (uint8 PassW[] , uint8 CheckPW[])
{

	for (uint8 i = 0; i < 4; i++)
    12a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12a4:	8f 5f       	subi	r24, 0xFF	; 255
    12a6:	8d 8f       	std	Y+29, r24	; 0x1d
    12a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12aa:	84 30       	cpi	r24, 0x04	; 4
    12ac:	08 f4       	brcc	.+2      	; 0x12b0 <VERIFY_PW+0x14e>
    12ae:	69 cf       	rjmp	.-302    	; 0x1182 <VERIFY_PW+0x20>
			break;
		}
		Valid_Flag=1;
	}

	if(Valid_Flag) {	UART_sendByte(1); _delay_ms(DELAY_UART);}
    12b0:	80 91 80 00 	lds	r24, 0x0080
    12b4:	88 23       	and	r24, r24
    12b6:	09 f4       	brne	.+2      	; 0x12ba <VERIFY_PW+0x158>
    12b8:	75 c0       	rjmp	.+234    	; 0x13a4 <VERIFY_PW+0x242>
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <UART_sendByte>
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	a2 e0       	ldi	r26, 0x02	; 2
    12c6:	b3 e4       	ldi	r27, 0x43	; 67
    12c8:	8b 87       	std	Y+11, r24	; 0x0b
    12ca:	9c 87       	std	Y+12, r25	; 0x0c
    12cc:	ad 87       	std	Y+13, r26	; 0x0d
    12ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    12d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    12d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    12d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    12d8:	20 e0       	ldi	r18, 0x00	; 0
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	4a e7       	ldi	r20, 0x7A	; 122
    12de:	53 e4       	ldi	r21, 0x43	; 67
    12e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12e4:	dc 01       	movw	r26, r24
    12e6:	cb 01       	movw	r24, r22
    12e8:	8f 83       	std	Y+7, r24	; 0x07
    12ea:	98 87       	std	Y+8, r25	; 0x08
    12ec:	a9 87       	std	Y+9, r26	; 0x09
    12ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12f0:	6f 81       	ldd	r22, Y+7	; 0x07
    12f2:	78 85       	ldd	r23, Y+8	; 0x08
    12f4:	89 85       	ldd	r24, Y+9	; 0x09
    12f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	40 e8       	ldi	r20, 0x80	; 128
    12fe:	5f e3       	ldi	r21, 0x3F	; 63
    1300:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1304:	88 23       	and	r24, r24
    1306:	2c f4       	brge	.+10     	; 0x1312 <VERIFY_PW+0x1b0>
		__ticks = 1;
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	9e 83       	std	Y+6, r25	; 0x06
    130e:	8d 83       	std	Y+5, r24	; 0x05
    1310:	3f c0       	rjmp	.+126    	; 0x1390 <VERIFY_PW+0x22e>
	else if (__tmp > 65535)
    1312:	6f 81       	ldd	r22, Y+7	; 0x07
    1314:	78 85       	ldd	r23, Y+8	; 0x08
    1316:	89 85       	ldd	r24, Y+9	; 0x09
    1318:	9a 85       	ldd	r25, Y+10	; 0x0a
    131a:	20 e0       	ldi	r18, 0x00	; 0
    131c:	3f ef       	ldi	r19, 0xFF	; 255
    131e:	4f e7       	ldi	r20, 0x7F	; 127
    1320:	57 e4       	ldi	r21, 0x47	; 71
    1322:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1326:	18 16       	cp	r1, r24
    1328:	4c f5       	brge	.+82     	; 0x137c <VERIFY_PW+0x21a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    132a:	6b 85       	ldd	r22, Y+11	; 0x0b
    132c:	7c 85       	ldd	r23, Y+12	; 0x0c
    132e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1330:	9e 85       	ldd	r25, Y+14	; 0x0e
    1332:	20 e0       	ldi	r18, 0x00	; 0
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	40 e2       	ldi	r20, 0x20	; 32
    1338:	51 e4       	ldi	r21, 0x41	; 65
    133a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    133e:	dc 01       	movw	r26, r24
    1340:	cb 01       	movw	r24, r22
    1342:	bc 01       	movw	r22, r24
    1344:	cd 01       	movw	r24, r26
    1346:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    134a:	dc 01       	movw	r26, r24
    134c:	cb 01       	movw	r24, r22
    134e:	9e 83       	std	Y+6, r25	; 0x06
    1350:	8d 83       	std	Y+5, r24	; 0x05
    1352:	0f c0       	rjmp	.+30     	; 0x1372 <VERIFY_PW+0x210>
    1354:	89 e1       	ldi	r24, 0x19	; 25
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	9c 83       	std	Y+4, r25	; 0x04
    135a:	8b 83       	std	Y+3, r24	; 0x03
    135c:	8b 81       	ldd	r24, Y+3	; 0x03
    135e:	9c 81       	ldd	r25, Y+4	; 0x04
    1360:	01 97       	sbiw	r24, 0x01	; 1
    1362:	f1 f7       	brne	.-4      	; 0x1360 <VERIFY_PW+0x1fe>
    1364:	9c 83       	std	Y+4, r25	; 0x04
    1366:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1368:	8d 81       	ldd	r24, Y+5	; 0x05
    136a:	9e 81       	ldd	r25, Y+6	; 0x06
    136c:	01 97       	sbiw	r24, 0x01	; 1
    136e:	9e 83       	std	Y+6, r25	; 0x06
    1370:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1372:	8d 81       	ldd	r24, Y+5	; 0x05
    1374:	9e 81       	ldd	r25, Y+6	; 0x06
    1376:	00 97       	sbiw	r24, 0x00	; 0
    1378:	69 f7       	brne	.-38     	; 0x1354 <VERIFY_PW+0x1f2>
    137a:	14 c0       	rjmp	.+40     	; 0x13a4 <VERIFY_PW+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    137c:	6f 81       	ldd	r22, Y+7	; 0x07
    137e:	78 85       	ldd	r23, Y+8	; 0x08
    1380:	89 85       	ldd	r24, Y+9	; 0x09
    1382:	9a 85       	ldd	r25, Y+10	; 0x0a
    1384:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1388:	dc 01       	movw	r26, r24
    138a:	cb 01       	movw	r24, r22
    138c:	9e 83       	std	Y+6, r25	; 0x06
    138e:	8d 83       	std	Y+5, r24	; 0x05
    1390:	8d 81       	ldd	r24, Y+5	; 0x05
    1392:	9e 81       	ldd	r25, Y+6	; 0x06
    1394:	9a 83       	std	Y+2, r25	; 0x02
    1396:	89 83       	std	Y+1, r24	; 0x01
    1398:	89 81       	ldd	r24, Y+1	; 0x01
    139a:	9a 81       	ldd	r25, Y+2	; 0x02
    139c:	01 97       	sbiw	r24, 0x01	; 1
    139e:	f1 f7       	brne	.-4      	; 0x139c <VERIFY_PW+0x23a>
    13a0:	9a 83       	std	Y+2, r25	; 0x02
    13a2:	89 83       	std	Y+1, r24	; 0x01
}
    13a4:	a1 96       	adiw	r28, 0x21	; 33
    13a6:	0f b6       	in	r0, 0x3f	; 63
    13a8:	f8 94       	cli
    13aa:	de bf       	out	0x3e, r29	; 62
    13ac:	0f be       	out	0x3f, r0	; 63
    13ae:	cd bf       	out	0x3d, r28	; 61
    13b0:	cf 91       	pop	r28
    13b2:	df 91       	pop	r29
    13b4:	08 95       	ret

000013b6 <EEPROM_init>:
 *******************************************************************************/
#include "twi.h"
#include "external_eeprom.h"

void EEPROM_init(void)
{
    13b6:	df 93       	push	r29
    13b8:	cf 93       	push	r28
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
    13be:	28 97       	sbiw	r28, 0x08	; 8
    13c0:	0f b6       	in	r0, 0x3f	; 63
    13c2:	f8 94       	cli
    13c4:	de bf       	out	0x3e, r29	; 62
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	cd bf       	out	0x3d, r28	; 61
	I2C_Config config= { PRESCALE_1, 2 , 2 }; 					//TWBR =2 AND ADDRESS = 2
    13ca:	ce 01       	movw	r24, r28
    13cc:	01 96       	adiw	r24, 0x01	; 1
    13ce:	9d 83       	std	Y+5, r25	; 0x05
    13d0:	8c 83       	std	Y+4, r24	; 0x04
    13d2:	e1 e7       	ldi	r30, 0x71	; 113
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	ff 83       	std	Y+7, r31	; 0x07
    13d8:	ee 83       	std	Y+6, r30	; 0x06
    13da:	f3 e0       	ldi	r31, 0x03	; 3
    13dc:	f8 87       	std	Y+8, r31	; 0x08
    13de:	ee 81       	ldd	r30, Y+6	; 0x06
    13e0:	ff 81       	ldd	r31, Y+7	; 0x07
    13e2:	00 80       	ld	r0, Z
    13e4:	8e 81       	ldd	r24, Y+6	; 0x06
    13e6:	9f 81       	ldd	r25, Y+7	; 0x07
    13e8:	01 96       	adiw	r24, 0x01	; 1
    13ea:	9f 83       	std	Y+7, r25	; 0x07
    13ec:	8e 83       	std	Y+6, r24	; 0x06
    13ee:	ec 81       	ldd	r30, Y+4	; 0x04
    13f0:	fd 81       	ldd	r31, Y+5	; 0x05
    13f2:	00 82       	st	Z, r0
    13f4:	8c 81       	ldd	r24, Y+4	; 0x04
    13f6:	9d 81       	ldd	r25, Y+5	; 0x05
    13f8:	01 96       	adiw	r24, 0x01	; 1
    13fa:	9d 83       	std	Y+5, r25	; 0x05
    13fc:	8c 83       	std	Y+4, r24	; 0x04
    13fe:	98 85       	ldd	r25, Y+8	; 0x08
    1400:	91 50       	subi	r25, 0x01	; 1
    1402:	98 87       	std	Y+8, r25	; 0x08
    1404:	e8 85       	ldd	r30, Y+8	; 0x08
    1406:	ee 23       	and	r30, r30
    1408:	51 f7       	brne	.-44     	; 0x13de <EEPROM_init+0x28>
	TWI_init( &config );
    140a:	ce 01       	movw	r24, r28
    140c:	01 96       	adiw	r24, 0x01	; 1
    140e:	0e 94 42 11 	call	0x2284	; 0x2284 <TWI_init>
}
    1412:	28 96       	adiw	r28, 0x08	; 8
    1414:	0f b6       	in	r0, 0x3f	; 63
    1416:	f8 94       	cli
    1418:	de bf       	out	0x3e, r29	; 62
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	cd bf       	out	0x3d, r28	; 61
    141e:	cf 91       	pop	r28
    1420:	df 91       	pop	r29
    1422:	08 95       	ret

00001424 <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16address,uint8 u8data)
{
    1424:	df 93       	push	r29
    1426:	cf 93       	push	r28
    1428:	00 d0       	rcall	.+0      	; 0x142a <EEPROM_writeByte+0x6>
    142a:	00 d0       	rcall	.+0      	; 0x142c <EEPROM_writeByte+0x8>
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62
    1430:	9a 83       	std	Y+2, r25	; 0x02
    1432:	89 83       	std	Y+1, r24	; 0x01
    1434:	6b 83       	std	Y+3, r22	; 0x03
		TWI_start();             								// SEND START BIT
    1436:	0e 94 70 11 	call	0x22e0	; 0x22e0 <TWI_start>
		if ( TWI_getStatus() != TW_START) return ERROR;     //If status of TWI isn't start return 0 (ERROR)
    143a:	0e 94 c8 11 	call	0x2390	; 0x2390 <TWI_getStatus>
    143e:	88 30       	cpi	r24, 0x08	; 8
    1440:	11 f0       	breq	.+4      	; 0x1446 <EEPROM_writeByte+0x22>
    1442:	1c 82       	std	Y+4, r1	; 0x04
    1444:	28 c0       	rjmp	.+80     	; 0x1496 <EEPROM_writeByte+0x72>

		/* WRITE THE SLAVE ADDRESS (DEVICE MEMORY ADDRESS)
		   MEMORY ADDRESS =  1010 (A10 A9 A8)(W=0)          */
		TWI_write( (uint8) ( 0xA0 | ((u16address & 0x0700) >> 7)));
    1446:	89 81       	ldd	r24, Y+1	; 0x01
    1448:	9a 81       	ldd	r25, Y+2	; 0x02
    144a:	80 70       	andi	r24, 0x00	; 0
    144c:	97 70       	andi	r25, 0x07	; 7
    144e:	88 0f       	add	r24, r24
    1450:	89 2f       	mov	r24, r25
    1452:	88 1f       	adc	r24, r24
    1454:	99 0b       	sbc	r25, r25
    1456:	91 95       	neg	r25
    1458:	80 6a       	ori	r24, 0xA0	; 160
    145a:	0e 94 8b 11 	call	0x2316	; 0x2316 <TWI_write>
		if ( TWI_getStatus() != TW_MT_SLA_W_ACK) return ERROR;
    145e:	0e 94 c8 11 	call	0x2390	; 0x2390 <TWI_getStatus>
    1462:	88 31       	cpi	r24, 0x18	; 24
    1464:	11 f0       	breq	.+4      	; 0x146a <EEPROM_writeByte+0x46>
    1466:	1c 82       	std	Y+4, r1	; 0x04
    1468:	16 c0       	rjmp	.+44     	; 0x1496 <EEPROM_writeByte+0x72>

		TWI_write((uint8) (u16address)); 							//WORD ADDRESS IN EEPROM
    146a:	89 81       	ldd	r24, Y+1	; 0x01
    146c:	0e 94 8b 11 	call	0x2316	; 0x2316 <TWI_write>
		if ( TWI_getStatus() != TW_MT_DATA_ACK) return ERROR;
    1470:	0e 94 c8 11 	call	0x2390	; 0x2390 <TWI_getStatus>
    1474:	88 32       	cpi	r24, 0x28	; 40
    1476:	11 f0       	breq	.+4      	; 0x147c <EEPROM_writeByte+0x58>
    1478:	1c 82       	std	Y+4, r1	; 0x04
    147a:	0d c0       	rjmp	.+26     	; 0x1496 <EEPROM_writeByte+0x72>

		TWI_write(u8data);										// WRITE DATA IN WORD ADDRESS IN EEPROM
    147c:	8b 81       	ldd	r24, Y+3	; 0x03
    147e:	0e 94 8b 11 	call	0x2316	; 0x2316 <TWI_write>
		if ( TWI_getStatus() != TW_MT_DATA_ACK) return ERROR;
    1482:	0e 94 c8 11 	call	0x2390	; 0x2390 <TWI_getStatus>
    1486:	88 32       	cpi	r24, 0x28	; 40
    1488:	11 f0       	breq	.+4      	; 0x148e <EEPROM_writeByte+0x6a>
    148a:	1c 82       	std	Y+4, r1	; 0x04
    148c:	04 c0       	rjmp	.+8      	; 0x1496 <EEPROM_writeByte+0x72>

		TWI_stop();												//SEND STOP BIT
    148e:	0e 94 80 11 	call	0x2300	; 0x2300 <TWI_stop>

		return SUCCESS;
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	8c 83       	std	Y+4, r24	; 0x04
    1496:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0
    149e:	0f 90       	pop	r0
    14a0:	cf 91       	pop	r28
    14a2:	df 91       	pop	r29
    14a4:	08 95       	ret

000014a6 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16address,uint8 *u8data)
{
    14a6:	df 93       	push	r29
    14a8:	cf 93       	push	r28
    14aa:	00 d0       	rcall	.+0      	; 0x14ac <EEPROM_readByte+0x6>
    14ac:	00 d0       	rcall	.+0      	; 0x14ae <EEPROM_readByte+0x8>
    14ae:	0f 92       	push	r0
    14b0:	cd b7       	in	r28, 0x3d	; 61
    14b2:	de b7       	in	r29, 0x3e	; 62
    14b4:	9a 83       	std	Y+2, r25	; 0x02
    14b6:	89 83       	std	Y+1, r24	; 0x01
    14b8:	7c 83       	std	Y+4, r23	; 0x04
    14ba:	6b 83       	std	Y+3, r22	; 0x03
		TWI_start();             								// SEND START BIT
    14bc:	0e 94 70 11 	call	0x22e0	; 0x22e0 <TWI_start>
		if ( TWI_getStatus() != TW_START) return ERROR;     //If status of TWI isn't start return 0 (ERROR)
    14c0:	0e 94 c8 11 	call	0x2390	; 0x2390 <TWI_getStatus>
    14c4:	88 30       	cpi	r24, 0x08	; 8
    14c6:	11 f0       	breq	.+4      	; 0x14cc <EEPROM_readByte+0x26>
    14c8:	1d 82       	std	Y+5, r1	; 0x05
    14ca:	44 c0       	rjmp	.+136    	; 0x1554 <EEPROM_readByte+0xae>

		/* WRITE THE SLAVE ADDRESS (DEVICE MEMORY ADDRESS)
		   MEMORY ADDRESS =  1010 (A10 A9 A8)(W=0)          */
		TWI_write( (uint8) ( 0xA0 | ((u16address & 0x0700) >> 7)));
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
    14ce:	9a 81       	ldd	r25, Y+2	; 0x02
    14d0:	80 70       	andi	r24, 0x00	; 0
    14d2:	97 70       	andi	r25, 0x07	; 7
    14d4:	88 0f       	add	r24, r24
    14d6:	89 2f       	mov	r24, r25
    14d8:	88 1f       	adc	r24, r24
    14da:	99 0b       	sbc	r25, r25
    14dc:	91 95       	neg	r25
    14de:	80 6a       	ori	r24, 0xA0	; 160
    14e0:	0e 94 8b 11 	call	0x2316	; 0x2316 <TWI_write>
		if ( TWI_getStatus() != TW_MT_SLA_W_ACK) return ERROR;
    14e4:	0e 94 c8 11 	call	0x2390	; 0x2390 <TWI_getStatus>
    14e8:	88 31       	cpi	r24, 0x18	; 24
    14ea:	11 f0       	breq	.+4      	; 0x14f0 <EEPROM_readByte+0x4a>
    14ec:	1d 82       	std	Y+5, r1	; 0x05
    14ee:	32 c0       	rjmp	.+100    	; 0x1554 <EEPROM_readByte+0xae>

		TWI_write((uint8) (u16address)); 							//WORD ADDRESS IN EEPROM
    14f0:	89 81       	ldd	r24, Y+1	; 0x01
    14f2:	0e 94 8b 11 	call	0x2316	; 0x2316 <TWI_write>
		if ( TWI_getStatus() != TW_MT_DATA_ACK)  return ERROR;
    14f6:	0e 94 c8 11 	call	0x2390	; 0x2390 <TWI_getStatus>
    14fa:	88 32       	cpi	r24, 0x28	; 40
    14fc:	11 f0       	breq	.+4      	; 0x1502 <EEPROM_readByte+0x5c>
    14fe:	1d 82       	std	Y+5, r1	; 0x05
    1500:	29 c0       	rjmp	.+82     	; 0x1554 <EEPROM_readByte+0xae>

		TWI_start();             								// SEND REPEATED START BIT
    1502:	0e 94 70 11 	call	0x22e0	; 0x22e0 <TWI_start>
		if (TWI_getStatus() != TW_REP_START)     return ERROR;
    1506:	0e 94 c8 11 	call	0x2390	; 0x2390 <TWI_getStatus>
    150a:	80 31       	cpi	r24, 0x10	; 16
    150c:	11 f0       	breq	.+4      	; 0x1512 <EEPROM_readByte+0x6c>
    150e:	1d 82       	std	Y+5, r1	; 0x05
    1510:	21 c0       	rjmp	.+66     	; 0x1554 <EEPROM_readByte+0xae>

		/* WRITE THE SLAVE ADDRESS (DEVICE MEMORY ADDRESS) AGAIN THIS TIME WITH READ BIT 1
		   MEMORY ADDRESS =  1010 (A10 A9 A8)(R=1)          */
	    TWI_write((uint8)((0xA0) | ((u16address & 0x0700)>>7) | 1));
    1512:	89 81       	ldd	r24, Y+1	; 0x01
    1514:	9a 81       	ldd	r25, Y+2	; 0x02
    1516:	80 70       	andi	r24, 0x00	; 0
    1518:	97 70       	andi	r25, 0x07	; 7
    151a:	88 0f       	add	r24, r24
    151c:	89 2f       	mov	r24, r25
    151e:	88 1f       	adc	r24, r24
    1520:	99 0b       	sbc	r25, r25
    1522:	91 95       	neg	r25
    1524:	81 6a       	ori	r24, 0xA1	; 161
    1526:	0e 94 8b 11 	call	0x2316	; 0x2316 <TWI_write>
	    if (TWI_getStatus() != TW_MT_SLA_R_ACK)   return ERROR;
    152a:	0e 94 c8 11 	call	0x2390	; 0x2390 <TWI_getStatus>
    152e:	80 34       	cpi	r24, 0x40	; 64
    1530:	11 f0       	breq	.+4      	; 0x1536 <EEPROM_readByte+0x90>
    1532:	1d 82       	std	Y+5, r1	; 0x05
    1534:	0f c0       	rjmp	.+30     	; 0x1554 <EEPROM_readByte+0xae>

	    *u8data = TWI_read_NACK();      						// Read Byte from Memory without send ACK
    1536:	0e 94 b5 11 	call	0x236a	; 0x236a <TWI_read_NACK>
    153a:	eb 81       	ldd	r30, Y+3	; 0x03
    153c:	fc 81       	ldd	r31, Y+4	; 0x04
    153e:	80 83       	st	Z, r24
	    if (TWI_getStatus() != TW_MR_DATA_NACK) return ERROR;
    1540:	0e 94 c8 11 	call	0x2390	; 0x2390 <TWI_getStatus>
    1544:	88 35       	cpi	r24, 0x58	; 88
    1546:	11 f0       	breq	.+4      	; 0x154c <EEPROM_readByte+0xa6>
    1548:	1d 82       	std	Y+5, r1	; 0x05
    154a:	04 c0       	rjmp	.+8      	; 0x1554 <EEPROM_readByte+0xae>

	    TWI_stop();  										// SEND STOP BIT
    154c:	0e 94 80 11 	call	0x2300	; 0x2300 <TWI_stop>

	    return SUCCESS;
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	8d 83       	std	Y+5, r24	; 0x05
    1554:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1556:	0f 90       	pop	r0
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	cf 91       	pop	r28
    1562:	df 91       	pop	r29
    1564:	08 95       	ret

00001566 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    1566:	df 93       	push	r29
    1568:	cf 93       	push	r28
    156a:	cd b7       	in	r28, 0x3d	; 61
    156c:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    156e:	a1 e3       	ldi	r26, 0x31	; 49
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	e1 e3       	ldi	r30, 0x31	; 49
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	80 67       	ori	r24, 0x70	; 112
    157a:	8c 93       	st	X, r24
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    157c:	e4 e3       	ldi	r30, 0x34	; 52
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	8f ef       	ldi	r24, 0xFF	; 255
    1582:	80 83       	st	Z, r24
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1584:	88 e3       	ldi	r24, 0x38	; 56
    1586:	0e 94 ce 0a 	call	0x159c	; 0x159c <LCD_sendCommand>
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    158a:	8c e0       	ldi	r24, 0x0C	; 12
    158c:	0e 94 ce 0a 	call	0x159c	; 0x159c <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	0e 94 ce 0a 	call	0x159c	; 0x159c <LCD_sendCommand>
}
    1596:	cf 91       	pop	r28
    1598:	df 91       	pop	r29
    159a:	08 95       	ret

0000159c <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    159c:	df 93       	push	r29
    159e:	cf 93       	push	r28
    15a0:	cd b7       	in	r28, 0x3d	; 61
    15a2:	de b7       	in	r29, 0x3e	; 62
    15a4:	e9 97       	sbiw	r28, 0x39	; 57
    15a6:	0f b6       	in	r0, 0x3f	; 63
    15a8:	f8 94       	cli
    15aa:	de bf       	out	0x3e, r29	; 62
    15ac:	0f be       	out	0x3f, r0	; 63
    15ae:	cd bf       	out	0x3d, r28	; 61
    15b0:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    15b2:	a2 e3       	ldi	r26, 0x32	; 50
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	e2 e3       	ldi	r30, 0x32	; 50
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	8f 7e       	andi	r24, 0xEF	; 239
    15be:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    15c0:	a2 e3       	ldi	r26, 0x32	; 50
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	e2 e3       	ldi	r30, 0x32	; 50
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	8f 7d       	andi	r24, 0xDF	; 223
    15cc:	8c 93       	st	X, r24
    15ce:	80 e0       	ldi	r24, 0x00	; 0
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	a0 e8       	ldi	r26, 0x80	; 128
    15d4:	bf e3       	ldi	r27, 0x3F	; 63
    15d6:	8d ab       	std	Y+53, r24	; 0x35
    15d8:	9e ab       	std	Y+54, r25	; 0x36
    15da:	af ab       	std	Y+55, r26	; 0x37
    15dc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15de:	6d a9       	ldd	r22, Y+53	; 0x35
    15e0:	7e a9       	ldd	r23, Y+54	; 0x36
    15e2:	8f a9       	ldd	r24, Y+55	; 0x37
    15e4:	98 ad       	ldd	r25, Y+56	; 0x38
    15e6:	20 e0       	ldi	r18, 0x00	; 0
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	4a e7       	ldi	r20, 0x7A	; 122
    15ec:	53 e4       	ldi	r21, 0x43	; 67
    15ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15f2:	dc 01       	movw	r26, r24
    15f4:	cb 01       	movw	r24, r22
    15f6:	89 ab       	std	Y+49, r24	; 0x31
    15f8:	9a ab       	std	Y+50, r25	; 0x32
    15fa:	ab ab       	std	Y+51, r26	; 0x33
    15fc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    15fe:	69 a9       	ldd	r22, Y+49	; 0x31
    1600:	7a a9       	ldd	r23, Y+50	; 0x32
    1602:	8b a9       	ldd	r24, Y+51	; 0x33
    1604:	9c a9       	ldd	r25, Y+52	; 0x34
    1606:	20 e0       	ldi	r18, 0x00	; 0
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	40 e8       	ldi	r20, 0x80	; 128
    160c:	5f e3       	ldi	r21, 0x3F	; 63
    160e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1612:	88 23       	and	r24, r24
    1614:	2c f4       	brge	.+10     	; 0x1620 <LCD_sendCommand+0x84>
		__ticks = 1;
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	98 ab       	std	Y+48, r25	; 0x30
    161c:	8f a7       	std	Y+47, r24	; 0x2f
    161e:	3f c0       	rjmp	.+126    	; 0x169e <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    1620:	69 a9       	ldd	r22, Y+49	; 0x31
    1622:	7a a9       	ldd	r23, Y+50	; 0x32
    1624:	8b a9       	ldd	r24, Y+51	; 0x33
    1626:	9c a9       	ldd	r25, Y+52	; 0x34
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	3f ef       	ldi	r19, 0xFF	; 255
    162c:	4f e7       	ldi	r20, 0x7F	; 127
    162e:	57 e4       	ldi	r21, 0x47	; 71
    1630:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1634:	18 16       	cp	r1, r24
    1636:	4c f5       	brge	.+82     	; 0x168a <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1638:	6d a9       	ldd	r22, Y+53	; 0x35
    163a:	7e a9       	ldd	r23, Y+54	; 0x36
    163c:	8f a9       	ldd	r24, Y+55	; 0x37
    163e:	98 ad       	ldd	r25, Y+56	; 0x38
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	40 e2       	ldi	r20, 0x20	; 32
    1646:	51 e4       	ldi	r21, 0x41	; 65
    1648:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    164c:	dc 01       	movw	r26, r24
    164e:	cb 01       	movw	r24, r22
    1650:	bc 01       	movw	r22, r24
    1652:	cd 01       	movw	r24, r26
    1654:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1658:	dc 01       	movw	r26, r24
    165a:	cb 01       	movw	r24, r22
    165c:	98 ab       	std	Y+48, r25	; 0x30
    165e:	8f a7       	std	Y+47, r24	; 0x2f
    1660:	0f c0       	rjmp	.+30     	; 0x1680 <LCD_sendCommand+0xe4>
    1662:	89 e1       	ldi	r24, 0x19	; 25
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	9e a7       	std	Y+46, r25	; 0x2e
    1668:	8d a7       	std	Y+45, r24	; 0x2d
    166a:	8d a5       	ldd	r24, Y+45	; 0x2d
    166c:	9e a5       	ldd	r25, Y+46	; 0x2e
    166e:	01 97       	sbiw	r24, 0x01	; 1
    1670:	f1 f7       	brne	.-4      	; 0x166e <LCD_sendCommand+0xd2>
    1672:	9e a7       	std	Y+46, r25	; 0x2e
    1674:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1676:	8f a5       	ldd	r24, Y+47	; 0x2f
    1678:	98 a9       	ldd	r25, Y+48	; 0x30
    167a:	01 97       	sbiw	r24, 0x01	; 1
    167c:	98 ab       	std	Y+48, r25	; 0x30
    167e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1680:	8f a5       	ldd	r24, Y+47	; 0x2f
    1682:	98 a9       	ldd	r25, Y+48	; 0x30
    1684:	00 97       	sbiw	r24, 0x00	; 0
    1686:	69 f7       	brne	.-38     	; 0x1662 <LCD_sendCommand+0xc6>
    1688:	14 c0       	rjmp	.+40     	; 0x16b2 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    168a:	69 a9       	ldd	r22, Y+49	; 0x31
    168c:	7a a9       	ldd	r23, Y+50	; 0x32
    168e:	8b a9       	ldd	r24, Y+51	; 0x33
    1690:	9c a9       	ldd	r25, Y+52	; 0x34
    1692:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1696:	dc 01       	movw	r26, r24
    1698:	cb 01       	movw	r24, r22
    169a:	98 ab       	std	Y+48, r25	; 0x30
    169c:	8f a7       	std	Y+47, r24	; 0x2f
    169e:	8f a5       	ldd	r24, Y+47	; 0x2f
    16a0:	98 a9       	ldd	r25, Y+48	; 0x30
    16a2:	9c a7       	std	Y+44, r25	; 0x2c
    16a4:	8b a7       	std	Y+43, r24	; 0x2b
    16a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    16a8:	9c a5       	ldd	r25, Y+44	; 0x2c
    16aa:	01 97       	sbiw	r24, 0x01	; 1
    16ac:	f1 f7       	brne	.-4      	; 0x16aa <LCD_sendCommand+0x10e>
    16ae:	9c a7       	std	Y+44, r25	; 0x2c
    16b0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    16b2:	a2 e3       	ldi	r26, 0x32	; 50
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	e2 e3       	ldi	r30, 0x32	; 50
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	80 64       	ori	r24, 0x40	; 64
    16be:	8c 93       	st	X, r24
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	a0 e8       	ldi	r26, 0x80	; 128
    16c6:	bf e3       	ldi	r27, 0x3F	; 63
    16c8:	8f a3       	std	Y+39, r24	; 0x27
    16ca:	98 a7       	std	Y+40, r25	; 0x28
    16cc:	a9 a7       	std	Y+41, r26	; 0x29
    16ce:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16d0:	6f a1       	ldd	r22, Y+39	; 0x27
    16d2:	78 a5       	ldd	r23, Y+40	; 0x28
    16d4:	89 a5       	ldd	r24, Y+41	; 0x29
    16d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    16d8:	20 e0       	ldi	r18, 0x00	; 0
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	4a e7       	ldi	r20, 0x7A	; 122
    16de:	53 e4       	ldi	r21, 0x43	; 67
    16e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16e4:	dc 01       	movw	r26, r24
    16e6:	cb 01       	movw	r24, r22
    16e8:	8b a3       	std	Y+35, r24	; 0x23
    16ea:	9c a3       	std	Y+36, r25	; 0x24
    16ec:	ad a3       	std	Y+37, r26	; 0x25
    16ee:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    16f0:	6b a1       	ldd	r22, Y+35	; 0x23
    16f2:	7c a1       	ldd	r23, Y+36	; 0x24
    16f4:	8d a1       	ldd	r24, Y+37	; 0x25
    16f6:	9e a1       	ldd	r25, Y+38	; 0x26
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	40 e8       	ldi	r20, 0x80	; 128
    16fe:	5f e3       	ldi	r21, 0x3F	; 63
    1700:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1704:	88 23       	and	r24, r24
    1706:	2c f4       	brge	.+10     	; 0x1712 <LCD_sendCommand+0x176>
		__ticks = 1;
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	9a a3       	std	Y+34, r25	; 0x22
    170e:	89 a3       	std	Y+33, r24	; 0x21
    1710:	3f c0       	rjmp	.+126    	; 0x1790 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    1712:	6b a1       	ldd	r22, Y+35	; 0x23
    1714:	7c a1       	ldd	r23, Y+36	; 0x24
    1716:	8d a1       	ldd	r24, Y+37	; 0x25
    1718:	9e a1       	ldd	r25, Y+38	; 0x26
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	3f ef       	ldi	r19, 0xFF	; 255
    171e:	4f e7       	ldi	r20, 0x7F	; 127
    1720:	57 e4       	ldi	r21, 0x47	; 71
    1722:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1726:	18 16       	cp	r1, r24
    1728:	4c f5       	brge	.+82     	; 0x177c <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    172a:	6f a1       	ldd	r22, Y+39	; 0x27
    172c:	78 a5       	ldd	r23, Y+40	; 0x28
    172e:	89 a5       	ldd	r24, Y+41	; 0x29
    1730:	9a a5       	ldd	r25, Y+42	; 0x2a
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	40 e2       	ldi	r20, 0x20	; 32
    1738:	51 e4       	ldi	r21, 0x41	; 65
    173a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    173e:	dc 01       	movw	r26, r24
    1740:	cb 01       	movw	r24, r22
    1742:	bc 01       	movw	r22, r24
    1744:	cd 01       	movw	r24, r26
    1746:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    174a:	dc 01       	movw	r26, r24
    174c:	cb 01       	movw	r24, r22
    174e:	9a a3       	std	Y+34, r25	; 0x22
    1750:	89 a3       	std	Y+33, r24	; 0x21
    1752:	0f c0       	rjmp	.+30     	; 0x1772 <LCD_sendCommand+0x1d6>
    1754:	89 e1       	ldi	r24, 0x19	; 25
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	98 a3       	std	Y+32, r25	; 0x20
    175a:	8f 8f       	std	Y+31, r24	; 0x1f
    175c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    175e:	98 a1       	ldd	r25, Y+32	; 0x20
    1760:	01 97       	sbiw	r24, 0x01	; 1
    1762:	f1 f7       	brne	.-4      	; 0x1760 <LCD_sendCommand+0x1c4>
    1764:	98 a3       	std	Y+32, r25	; 0x20
    1766:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1768:	89 a1       	ldd	r24, Y+33	; 0x21
    176a:	9a a1       	ldd	r25, Y+34	; 0x22
    176c:	01 97       	sbiw	r24, 0x01	; 1
    176e:	9a a3       	std	Y+34, r25	; 0x22
    1770:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1772:	89 a1       	ldd	r24, Y+33	; 0x21
    1774:	9a a1       	ldd	r25, Y+34	; 0x22
    1776:	00 97       	sbiw	r24, 0x00	; 0
    1778:	69 f7       	brne	.-38     	; 0x1754 <LCD_sendCommand+0x1b8>
    177a:	14 c0       	rjmp	.+40     	; 0x17a4 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    177c:	6b a1       	ldd	r22, Y+35	; 0x23
    177e:	7c a1       	ldd	r23, Y+36	; 0x24
    1780:	8d a1       	ldd	r24, Y+37	; 0x25
    1782:	9e a1       	ldd	r25, Y+38	; 0x26
    1784:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	9a a3       	std	Y+34, r25	; 0x22
    178e:	89 a3       	std	Y+33, r24	; 0x21
    1790:	89 a1       	ldd	r24, Y+33	; 0x21
    1792:	9a a1       	ldd	r25, Y+34	; 0x22
    1794:	9e 8f       	std	Y+30, r25	; 0x1e
    1796:	8d 8f       	std	Y+29, r24	; 0x1d
    1798:	8d 8d       	ldd	r24, Y+29	; 0x1d
    179a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    179c:	01 97       	sbiw	r24, 0x01	; 1
    179e:	f1 f7       	brne	.-4      	; 0x179c <LCD_sendCommand+0x200>
    17a0:	9e 8f       	std	Y+30, r25	; 0x1e
    17a2:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    17a4:	e5 e3       	ldi	r30, 0x35	; 53
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	89 ad       	ldd	r24, Y+57	; 0x39
    17aa:	80 83       	st	Z, r24
    17ac:	80 e0       	ldi	r24, 0x00	; 0
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	a0 e8       	ldi	r26, 0x80	; 128
    17b2:	bf e3       	ldi	r27, 0x3F	; 63
    17b4:	89 8f       	std	Y+25, r24	; 0x19
    17b6:	9a 8f       	std	Y+26, r25	; 0x1a
    17b8:	ab 8f       	std	Y+27, r26	; 0x1b
    17ba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17bc:	69 8d       	ldd	r22, Y+25	; 0x19
    17be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	4a e7       	ldi	r20, 0x7A	; 122
    17ca:	53 e4       	ldi	r21, 0x43	; 67
    17cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d0:	dc 01       	movw	r26, r24
    17d2:	cb 01       	movw	r24, r22
    17d4:	8d 8b       	std	Y+21, r24	; 0x15
    17d6:	9e 8b       	std	Y+22, r25	; 0x16
    17d8:	af 8b       	std	Y+23, r26	; 0x17
    17da:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17dc:	6d 89       	ldd	r22, Y+21	; 0x15
    17de:	7e 89       	ldd	r23, Y+22	; 0x16
    17e0:	8f 89       	ldd	r24, Y+23	; 0x17
    17e2:	98 8d       	ldd	r25, Y+24	; 0x18
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	40 e8       	ldi	r20, 0x80	; 128
    17ea:	5f e3       	ldi	r21, 0x3F	; 63
    17ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17f0:	88 23       	and	r24, r24
    17f2:	2c f4       	brge	.+10     	; 0x17fe <LCD_sendCommand+0x262>
		__ticks = 1;
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	9c 8b       	std	Y+20, r25	; 0x14
    17fa:	8b 8b       	std	Y+19, r24	; 0x13
    17fc:	3f c0       	rjmp	.+126    	; 0x187c <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    17fe:	6d 89       	ldd	r22, Y+21	; 0x15
    1800:	7e 89       	ldd	r23, Y+22	; 0x16
    1802:	8f 89       	ldd	r24, Y+23	; 0x17
    1804:	98 8d       	ldd	r25, Y+24	; 0x18
    1806:	20 e0       	ldi	r18, 0x00	; 0
    1808:	3f ef       	ldi	r19, 0xFF	; 255
    180a:	4f e7       	ldi	r20, 0x7F	; 127
    180c:	57 e4       	ldi	r21, 0x47	; 71
    180e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1812:	18 16       	cp	r1, r24
    1814:	4c f5       	brge	.+82     	; 0x1868 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1816:	69 8d       	ldd	r22, Y+25	; 0x19
    1818:	7a 8d       	ldd	r23, Y+26	; 0x1a
    181a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    181c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    181e:	20 e0       	ldi	r18, 0x00	; 0
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	40 e2       	ldi	r20, 0x20	; 32
    1824:	51 e4       	ldi	r21, 0x41	; 65
    1826:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    182a:	dc 01       	movw	r26, r24
    182c:	cb 01       	movw	r24, r22
    182e:	bc 01       	movw	r22, r24
    1830:	cd 01       	movw	r24, r26
    1832:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1836:	dc 01       	movw	r26, r24
    1838:	cb 01       	movw	r24, r22
    183a:	9c 8b       	std	Y+20, r25	; 0x14
    183c:	8b 8b       	std	Y+19, r24	; 0x13
    183e:	0f c0       	rjmp	.+30     	; 0x185e <LCD_sendCommand+0x2c2>
    1840:	89 e1       	ldi	r24, 0x19	; 25
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	9a 8b       	std	Y+18, r25	; 0x12
    1846:	89 8b       	std	Y+17, r24	; 0x11
    1848:	89 89       	ldd	r24, Y+17	; 0x11
    184a:	9a 89       	ldd	r25, Y+18	; 0x12
    184c:	01 97       	sbiw	r24, 0x01	; 1
    184e:	f1 f7       	brne	.-4      	; 0x184c <LCD_sendCommand+0x2b0>
    1850:	9a 8b       	std	Y+18, r25	; 0x12
    1852:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1854:	8b 89       	ldd	r24, Y+19	; 0x13
    1856:	9c 89       	ldd	r25, Y+20	; 0x14
    1858:	01 97       	sbiw	r24, 0x01	; 1
    185a:	9c 8b       	std	Y+20, r25	; 0x14
    185c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    185e:	8b 89       	ldd	r24, Y+19	; 0x13
    1860:	9c 89       	ldd	r25, Y+20	; 0x14
    1862:	00 97       	sbiw	r24, 0x00	; 0
    1864:	69 f7       	brne	.-38     	; 0x1840 <LCD_sendCommand+0x2a4>
    1866:	14 c0       	rjmp	.+40     	; 0x1890 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1868:	6d 89       	ldd	r22, Y+21	; 0x15
    186a:	7e 89       	ldd	r23, Y+22	; 0x16
    186c:	8f 89       	ldd	r24, Y+23	; 0x17
    186e:	98 8d       	ldd	r25, Y+24	; 0x18
    1870:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	9c 8b       	std	Y+20, r25	; 0x14
    187a:	8b 8b       	std	Y+19, r24	; 0x13
    187c:	8b 89       	ldd	r24, Y+19	; 0x13
    187e:	9c 89       	ldd	r25, Y+20	; 0x14
    1880:	98 8b       	std	Y+16, r25	; 0x10
    1882:	8f 87       	std	Y+15, r24	; 0x0f
    1884:	8f 85       	ldd	r24, Y+15	; 0x0f
    1886:	98 89       	ldd	r25, Y+16	; 0x10
    1888:	01 97       	sbiw	r24, 0x01	; 1
    188a:	f1 f7       	brne	.-4      	; 0x1888 <LCD_sendCommand+0x2ec>
    188c:	98 8b       	std	Y+16, r25	; 0x10
    188e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1890:	a2 e3       	ldi	r26, 0x32	; 50
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	e2 e3       	ldi	r30, 0x32	; 50
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	8f 7b       	andi	r24, 0xBF	; 191
    189c:	8c 93       	st	X, r24
    189e:	80 e0       	ldi	r24, 0x00	; 0
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	a0 e8       	ldi	r26, 0x80	; 128
    18a4:	bf e3       	ldi	r27, 0x3F	; 63
    18a6:	8b 87       	std	Y+11, r24	; 0x0b
    18a8:	9c 87       	std	Y+12, r25	; 0x0c
    18aa:	ad 87       	std	Y+13, r26	; 0x0d
    18ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    18b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    18b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    18b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	4a e7       	ldi	r20, 0x7A	; 122
    18bc:	53 e4       	ldi	r21, 0x43	; 67
    18be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c2:	dc 01       	movw	r26, r24
    18c4:	cb 01       	movw	r24, r22
    18c6:	8f 83       	std	Y+7, r24	; 0x07
    18c8:	98 87       	std	Y+8, r25	; 0x08
    18ca:	a9 87       	std	Y+9, r26	; 0x09
    18cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18ce:	6f 81       	ldd	r22, Y+7	; 0x07
    18d0:	78 85       	ldd	r23, Y+8	; 0x08
    18d2:	89 85       	ldd	r24, Y+9	; 0x09
    18d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18d6:	20 e0       	ldi	r18, 0x00	; 0
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	40 e8       	ldi	r20, 0x80	; 128
    18dc:	5f e3       	ldi	r21, 0x3F	; 63
    18de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18e2:	88 23       	and	r24, r24
    18e4:	2c f4       	brge	.+10     	; 0x18f0 <LCD_sendCommand+0x354>
		__ticks = 1;
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	9e 83       	std	Y+6, r25	; 0x06
    18ec:	8d 83       	std	Y+5, r24	; 0x05
    18ee:	3f c0       	rjmp	.+126    	; 0x196e <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    18f0:	6f 81       	ldd	r22, Y+7	; 0x07
    18f2:	78 85       	ldd	r23, Y+8	; 0x08
    18f4:	89 85       	ldd	r24, Y+9	; 0x09
    18f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	3f ef       	ldi	r19, 0xFF	; 255
    18fc:	4f e7       	ldi	r20, 0x7F	; 127
    18fe:	57 e4       	ldi	r21, 0x47	; 71
    1900:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1904:	18 16       	cp	r1, r24
    1906:	4c f5       	brge	.+82     	; 0x195a <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1908:	6b 85       	ldd	r22, Y+11	; 0x0b
    190a:	7c 85       	ldd	r23, Y+12	; 0x0c
    190c:	8d 85       	ldd	r24, Y+13	; 0x0d
    190e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	40 e2       	ldi	r20, 0x20	; 32
    1916:	51 e4       	ldi	r21, 0x41	; 65
    1918:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	bc 01       	movw	r22, r24
    1922:	cd 01       	movw	r24, r26
    1924:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1928:	dc 01       	movw	r26, r24
    192a:	cb 01       	movw	r24, r22
    192c:	9e 83       	std	Y+6, r25	; 0x06
    192e:	8d 83       	std	Y+5, r24	; 0x05
    1930:	0f c0       	rjmp	.+30     	; 0x1950 <LCD_sendCommand+0x3b4>
    1932:	89 e1       	ldi	r24, 0x19	; 25
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	9c 83       	std	Y+4, r25	; 0x04
    1938:	8b 83       	std	Y+3, r24	; 0x03
    193a:	8b 81       	ldd	r24, Y+3	; 0x03
    193c:	9c 81       	ldd	r25, Y+4	; 0x04
    193e:	01 97       	sbiw	r24, 0x01	; 1
    1940:	f1 f7       	brne	.-4      	; 0x193e <LCD_sendCommand+0x3a2>
    1942:	9c 83       	std	Y+4, r25	; 0x04
    1944:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1946:	8d 81       	ldd	r24, Y+5	; 0x05
    1948:	9e 81       	ldd	r25, Y+6	; 0x06
    194a:	01 97       	sbiw	r24, 0x01	; 1
    194c:	9e 83       	std	Y+6, r25	; 0x06
    194e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1950:	8d 81       	ldd	r24, Y+5	; 0x05
    1952:	9e 81       	ldd	r25, Y+6	; 0x06
    1954:	00 97       	sbiw	r24, 0x00	; 0
    1956:	69 f7       	brne	.-38     	; 0x1932 <LCD_sendCommand+0x396>
    1958:	14 c0       	rjmp	.+40     	; 0x1982 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    195a:	6f 81       	ldd	r22, Y+7	; 0x07
    195c:	78 85       	ldd	r23, Y+8	; 0x08
    195e:	89 85       	ldd	r24, Y+9	; 0x09
    1960:	9a 85       	ldd	r25, Y+10	; 0x0a
    1962:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1966:	dc 01       	movw	r26, r24
    1968:	cb 01       	movw	r24, r22
    196a:	9e 83       	std	Y+6, r25	; 0x06
    196c:	8d 83       	std	Y+5, r24	; 0x05
    196e:	8d 81       	ldd	r24, Y+5	; 0x05
    1970:	9e 81       	ldd	r25, Y+6	; 0x06
    1972:	9a 83       	std	Y+2, r25	; 0x02
    1974:	89 83       	std	Y+1, r24	; 0x01
    1976:	89 81       	ldd	r24, Y+1	; 0x01
    1978:	9a 81       	ldd	r25, Y+2	; 0x02
    197a:	01 97       	sbiw	r24, 0x01	; 1
    197c:	f1 f7       	brne	.-4      	; 0x197a <LCD_sendCommand+0x3de>
    197e:	9a 83       	std	Y+2, r25	; 0x02
    1980:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1982:	e9 96       	adiw	r28, 0x39	; 57
    1984:	0f b6       	in	r0, 0x3f	; 63
    1986:	f8 94       	cli
    1988:	de bf       	out	0x3e, r29	; 62
    198a:	0f be       	out	0x3f, r0	; 63
    198c:	cd bf       	out	0x3d, r28	; 61
    198e:	cf 91       	pop	r28
    1990:	df 91       	pop	r29
    1992:	08 95       	ret

00001994 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1994:	df 93       	push	r29
    1996:	cf 93       	push	r28
    1998:	cd b7       	in	r28, 0x3d	; 61
    199a:	de b7       	in	r29, 0x3e	; 62
    199c:	e9 97       	sbiw	r28, 0x39	; 57
    199e:	0f b6       	in	r0, 0x3f	; 63
    19a0:	f8 94       	cli
    19a2:	de bf       	out	0x3e, r29	; 62
    19a4:	0f be       	out	0x3f, r0	; 63
    19a6:	cd bf       	out	0x3d, r28	; 61
    19a8:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    19aa:	a2 e3       	ldi	r26, 0x32	; 50
    19ac:	b0 e0       	ldi	r27, 0x00	; 0
    19ae:	e2 e3       	ldi	r30, 0x32	; 50
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	80 61       	ori	r24, 0x10	; 16
    19b6:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    19b8:	a2 e3       	ldi	r26, 0x32	; 50
    19ba:	b0 e0       	ldi	r27, 0x00	; 0
    19bc:	e2 e3       	ldi	r30, 0x32	; 50
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	8f 7d       	andi	r24, 0xDF	; 223
    19c4:	8c 93       	st	X, r24
    19c6:	80 e0       	ldi	r24, 0x00	; 0
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	a0 e8       	ldi	r26, 0x80	; 128
    19cc:	bf e3       	ldi	r27, 0x3F	; 63
    19ce:	8d ab       	std	Y+53, r24	; 0x35
    19d0:	9e ab       	std	Y+54, r25	; 0x36
    19d2:	af ab       	std	Y+55, r26	; 0x37
    19d4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19d6:	6d a9       	ldd	r22, Y+53	; 0x35
    19d8:	7e a9       	ldd	r23, Y+54	; 0x36
    19da:	8f a9       	ldd	r24, Y+55	; 0x37
    19dc:	98 ad       	ldd	r25, Y+56	; 0x38
    19de:	20 e0       	ldi	r18, 0x00	; 0
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	4a e7       	ldi	r20, 0x7A	; 122
    19e4:	53 e4       	ldi	r21, 0x43	; 67
    19e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ea:	dc 01       	movw	r26, r24
    19ec:	cb 01       	movw	r24, r22
    19ee:	89 ab       	std	Y+49, r24	; 0x31
    19f0:	9a ab       	std	Y+50, r25	; 0x32
    19f2:	ab ab       	std	Y+51, r26	; 0x33
    19f4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19f6:	69 a9       	ldd	r22, Y+49	; 0x31
    19f8:	7a a9       	ldd	r23, Y+50	; 0x32
    19fa:	8b a9       	ldd	r24, Y+51	; 0x33
    19fc:	9c a9       	ldd	r25, Y+52	; 0x34
    19fe:	20 e0       	ldi	r18, 0x00	; 0
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	40 e8       	ldi	r20, 0x80	; 128
    1a04:	5f e3       	ldi	r21, 0x3F	; 63
    1a06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a0a:	88 23       	and	r24, r24
    1a0c:	2c f4       	brge	.+10     	; 0x1a18 <LCD_displayCharacter+0x84>
		__ticks = 1;
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	98 ab       	std	Y+48, r25	; 0x30
    1a14:	8f a7       	std	Y+47, r24	; 0x2f
    1a16:	3f c0       	rjmp	.+126    	; 0x1a96 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    1a18:	69 a9       	ldd	r22, Y+49	; 0x31
    1a1a:	7a a9       	ldd	r23, Y+50	; 0x32
    1a1c:	8b a9       	ldd	r24, Y+51	; 0x33
    1a1e:	9c a9       	ldd	r25, Y+52	; 0x34
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	3f ef       	ldi	r19, 0xFF	; 255
    1a24:	4f e7       	ldi	r20, 0x7F	; 127
    1a26:	57 e4       	ldi	r21, 0x47	; 71
    1a28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a2c:	18 16       	cp	r1, r24
    1a2e:	4c f5       	brge	.+82     	; 0x1a82 <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a30:	6d a9       	ldd	r22, Y+53	; 0x35
    1a32:	7e a9       	ldd	r23, Y+54	; 0x36
    1a34:	8f a9       	ldd	r24, Y+55	; 0x37
    1a36:	98 ad       	ldd	r25, Y+56	; 0x38
    1a38:	20 e0       	ldi	r18, 0x00	; 0
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	40 e2       	ldi	r20, 0x20	; 32
    1a3e:	51 e4       	ldi	r21, 0x41	; 65
    1a40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	bc 01       	movw	r22, r24
    1a4a:	cd 01       	movw	r24, r26
    1a4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a50:	dc 01       	movw	r26, r24
    1a52:	cb 01       	movw	r24, r22
    1a54:	98 ab       	std	Y+48, r25	; 0x30
    1a56:	8f a7       	std	Y+47, r24	; 0x2f
    1a58:	0f c0       	rjmp	.+30     	; 0x1a78 <LCD_displayCharacter+0xe4>
    1a5a:	89 e1       	ldi	r24, 0x19	; 25
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	9e a7       	std	Y+46, r25	; 0x2e
    1a60:	8d a7       	std	Y+45, r24	; 0x2d
    1a62:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a64:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a66:	01 97       	sbiw	r24, 0x01	; 1
    1a68:	f1 f7       	brne	.-4      	; 0x1a66 <LCD_displayCharacter+0xd2>
    1a6a:	9e a7       	std	Y+46, r25	; 0x2e
    1a6c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a6e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a70:	98 a9       	ldd	r25, Y+48	; 0x30
    1a72:	01 97       	sbiw	r24, 0x01	; 1
    1a74:	98 ab       	std	Y+48, r25	; 0x30
    1a76:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a78:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a7a:	98 a9       	ldd	r25, Y+48	; 0x30
    1a7c:	00 97       	sbiw	r24, 0x00	; 0
    1a7e:	69 f7       	brne	.-38     	; 0x1a5a <LCD_displayCharacter+0xc6>
    1a80:	14 c0       	rjmp	.+40     	; 0x1aaa <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a82:	69 a9       	ldd	r22, Y+49	; 0x31
    1a84:	7a a9       	ldd	r23, Y+50	; 0x32
    1a86:	8b a9       	ldd	r24, Y+51	; 0x33
    1a88:	9c a9       	ldd	r25, Y+52	; 0x34
    1a8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	98 ab       	std	Y+48, r25	; 0x30
    1a94:	8f a7       	std	Y+47, r24	; 0x2f
    1a96:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a98:	98 a9       	ldd	r25, Y+48	; 0x30
    1a9a:	9c a7       	std	Y+44, r25	; 0x2c
    1a9c:	8b a7       	std	Y+43, r24	; 0x2b
    1a9e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1aa0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1aa2:	01 97       	sbiw	r24, 0x01	; 1
    1aa4:	f1 f7       	brne	.-4      	; 0x1aa2 <LCD_displayCharacter+0x10e>
    1aa6:	9c a7       	std	Y+44, r25	; 0x2c
    1aa8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1aaa:	a2 e3       	ldi	r26, 0x32	; 50
    1aac:	b0 e0       	ldi	r27, 0x00	; 0
    1aae:	e2 e3       	ldi	r30, 0x32	; 50
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	80 81       	ld	r24, Z
    1ab4:	80 64       	ori	r24, 0x40	; 64
    1ab6:	8c 93       	st	X, r24
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	a0 e8       	ldi	r26, 0x80	; 128
    1abe:	bf e3       	ldi	r27, 0x3F	; 63
    1ac0:	8f a3       	std	Y+39, r24	; 0x27
    1ac2:	98 a7       	std	Y+40, r25	; 0x28
    1ac4:	a9 a7       	std	Y+41, r26	; 0x29
    1ac6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ac8:	6f a1       	ldd	r22, Y+39	; 0x27
    1aca:	78 a5       	ldd	r23, Y+40	; 0x28
    1acc:	89 a5       	ldd	r24, Y+41	; 0x29
    1ace:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	4a e7       	ldi	r20, 0x7A	; 122
    1ad6:	53 e4       	ldi	r21, 0x43	; 67
    1ad8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1adc:	dc 01       	movw	r26, r24
    1ade:	cb 01       	movw	r24, r22
    1ae0:	8b a3       	std	Y+35, r24	; 0x23
    1ae2:	9c a3       	std	Y+36, r25	; 0x24
    1ae4:	ad a3       	std	Y+37, r26	; 0x25
    1ae6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ae8:	6b a1       	ldd	r22, Y+35	; 0x23
    1aea:	7c a1       	ldd	r23, Y+36	; 0x24
    1aec:	8d a1       	ldd	r24, Y+37	; 0x25
    1aee:	9e a1       	ldd	r25, Y+38	; 0x26
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	40 e8       	ldi	r20, 0x80	; 128
    1af6:	5f e3       	ldi	r21, 0x3F	; 63
    1af8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1afc:	88 23       	and	r24, r24
    1afe:	2c f4       	brge	.+10     	; 0x1b0a <LCD_displayCharacter+0x176>
		__ticks = 1;
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	9a a3       	std	Y+34, r25	; 0x22
    1b06:	89 a3       	std	Y+33, r24	; 0x21
    1b08:	3f c0       	rjmp	.+126    	; 0x1b88 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    1b0a:	6b a1       	ldd	r22, Y+35	; 0x23
    1b0c:	7c a1       	ldd	r23, Y+36	; 0x24
    1b0e:	8d a1       	ldd	r24, Y+37	; 0x25
    1b10:	9e a1       	ldd	r25, Y+38	; 0x26
    1b12:	20 e0       	ldi	r18, 0x00	; 0
    1b14:	3f ef       	ldi	r19, 0xFF	; 255
    1b16:	4f e7       	ldi	r20, 0x7F	; 127
    1b18:	57 e4       	ldi	r21, 0x47	; 71
    1b1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b1e:	18 16       	cp	r1, r24
    1b20:	4c f5       	brge	.+82     	; 0x1b74 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b22:	6f a1       	ldd	r22, Y+39	; 0x27
    1b24:	78 a5       	ldd	r23, Y+40	; 0x28
    1b26:	89 a5       	ldd	r24, Y+41	; 0x29
    1b28:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b2a:	20 e0       	ldi	r18, 0x00	; 0
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	40 e2       	ldi	r20, 0x20	; 32
    1b30:	51 e4       	ldi	r21, 0x41	; 65
    1b32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b36:	dc 01       	movw	r26, r24
    1b38:	cb 01       	movw	r24, r22
    1b3a:	bc 01       	movw	r22, r24
    1b3c:	cd 01       	movw	r24, r26
    1b3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b42:	dc 01       	movw	r26, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	9a a3       	std	Y+34, r25	; 0x22
    1b48:	89 a3       	std	Y+33, r24	; 0x21
    1b4a:	0f c0       	rjmp	.+30     	; 0x1b6a <LCD_displayCharacter+0x1d6>
    1b4c:	89 e1       	ldi	r24, 0x19	; 25
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	98 a3       	std	Y+32, r25	; 0x20
    1b52:	8f 8f       	std	Y+31, r24	; 0x1f
    1b54:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b56:	98 a1       	ldd	r25, Y+32	; 0x20
    1b58:	01 97       	sbiw	r24, 0x01	; 1
    1b5a:	f1 f7       	brne	.-4      	; 0x1b58 <LCD_displayCharacter+0x1c4>
    1b5c:	98 a3       	std	Y+32, r25	; 0x20
    1b5e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b60:	89 a1       	ldd	r24, Y+33	; 0x21
    1b62:	9a a1       	ldd	r25, Y+34	; 0x22
    1b64:	01 97       	sbiw	r24, 0x01	; 1
    1b66:	9a a3       	std	Y+34, r25	; 0x22
    1b68:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b6a:	89 a1       	ldd	r24, Y+33	; 0x21
    1b6c:	9a a1       	ldd	r25, Y+34	; 0x22
    1b6e:	00 97       	sbiw	r24, 0x00	; 0
    1b70:	69 f7       	brne	.-38     	; 0x1b4c <LCD_displayCharacter+0x1b8>
    1b72:	14 c0       	rjmp	.+40     	; 0x1b9c <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b74:	6b a1       	ldd	r22, Y+35	; 0x23
    1b76:	7c a1       	ldd	r23, Y+36	; 0x24
    1b78:	8d a1       	ldd	r24, Y+37	; 0x25
    1b7a:	9e a1       	ldd	r25, Y+38	; 0x26
    1b7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b80:	dc 01       	movw	r26, r24
    1b82:	cb 01       	movw	r24, r22
    1b84:	9a a3       	std	Y+34, r25	; 0x22
    1b86:	89 a3       	std	Y+33, r24	; 0x21
    1b88:	89 a1       	ldd	r24, Y+33	; 0x21
    1b8a:	9a a1       	ldd	r25, Y+34	; 0x22
    1b8c:	9e 8f       	std	Y+30, r25	; 0x1e
    1b8e:	8d 8f       	std	Y+29, r24	; 0x1d
    1b90:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b92:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b94:	01 97       	sbiw	r24, 0x01	; 1
    1b96:	f1 f7       	brne	.-4      	; 0x1b94 <LCD_displayCharacter+0x200>
    1b98:	9e 8f       	std	Y+30, r25	; 0x1e
    1b9a:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = data; /* out the required command to the data bus D0 --> D7 */
    1b9c:	e5 e3       	ldi	r30, 0x35	; 53
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	89 ad       	ldd	r24, Y+57	; 0x39
    1ba2:	80 83       	st	Z, r24
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	a0 e8       	ldi	r26, 0x80	; 128
    1baa:	bf e3       	ldi	r27, 0x3F	; 63
    1bac:	89 8f       	std	Y+25, r24	; 0x19
    1bae:	9a 8f       	std	Y+26, r25	; 0x1a
    1bb0:	ab 8f       	std	Y+27, r26	; 0x1b
    1bb2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb4:	69 8d       	ldd	r22, Y+25	; 0x19
    1bb6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bb8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	4a e7       	ldi	r20, 0x7A	; 122
    1bc2:	53 e4       	ldi	r21, 0x43	; 67
    1bc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	8d 8b       	std	Y+21, r24	; 0x15
    1bce:	9e 8b       	std	Y+22, r25	; 0x16
    1bd0:	af 8b       	std	Y+23, r26	; 0x17
    1bd2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bd4:	6d 89       	ldd	r22, Y+21	; 0x15
    1bd6:	7e 89       	ldd	r23, Y+22	; 0x16
    1bd8:	8f 89       	ldd	r24, Y+23	; 0x17
    1bda:	98 8d       	ldd	r25, Y+24	; 0x18
    1bdc:	20 e0       	ldi	r18, 0x00	; 0
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	40 e8       	ldi	r20, 0x80	; 128
    1be2:	5f e3       	ldi	r21, 0x3F	; 63
    1be4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1be8:	88 23       	and	r24, r24
    1bea:	2c f4       	brge	.+10     	; 0x1bf6 <LCD_displayCharacter+0x262>
		__ticks = 1;
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	9c 8b       	std	Y+20, r25	; 0x14
    1bf2:	8b 8b       	std	Y+19, r24	; 0x13
    1bf4:	3f c0       	rjmp	.+126    	; 0x1c74 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    1bf6:	6d 89       	ldd	r22, Y+21	; 0x15
    1bf8:	7e 89       	ldd	r23, Y+22	; 0x16
    1bfa:	8f 89       	ldd	r24, Y+23	; 0x17
    1bfc:	98 8d       	ldd	r25, Y+24	; 0x18
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	3f ef       	ldi	r19, 0xFF	; 255
    1c02:	4f e7       	ldi	r20, 0x7F	; 127
    1c04:	57 e4       	ldi	r21, 0x47	; 71
    1c06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c0a:	18 16       	cp	r1, r24
    1c0c:	4c f5       	brge	.+82     	; 0x1c60 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c0e:	69 8d       	ldd	r22, Y+25	; 0x19
    1c10:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c12:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c14:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	40 e2       	ldi	r20, 0x20	; 32
    1c1c:	51 e4       	ldi	r21, 0x41	; 65
    1c1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	bc 01       	movw	r22, r24
    1c28:	cd 01       	movw	r24, r26
    1c2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c2e:	dc 01       	movw	r26, r24
    1c30:	cb 01       	movw	r24, r22
    1c32:	9c 8b       	std	Y+20, r25	; 0x14
    1c34:	8b 8b       	std	Y+19, r24	; 0x13
    1c36:	0f c0       	rjmp	.+30     	; 0x1c56 <LCD_displayCharacter+0x2c2>
    1c38:	89 e1       	ldi	r24, 0x19	; 25
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	9a 8b       	std	Y+18, r25	; 0x12
    1c3e:	89 8b       	std	Y+17, r24	; 0x11
    1c40:	89 89       	ldd	r24, Y+17	; 0x11
    1c42:	9a 89       	ldd	r25, Y+18	; 0x12
    1c44:	01 97       	sbiw	r24, 0x01	; 1
    1c46:	f1 f7       	brne	.-4      	; 0x1c44 <LCD_displayCharacter+0x2b0>
    1c48:	9a 8b       	std	Y+18, r25	; 0x12
    1c4a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c4c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c4e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c50:	01 97       	sbiw	r24, 0x01	; 1
    1c52:	9c 8b       	std	Y+20, r25	; 0x14
    1c54:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c56:	8b 89       	ldd	r24, Y+19	; 0x13
    1c58:	9c 89       	ldd	r25, Y+20	; 0x14
    1c5a:	00 97       	sbiw	r24, 0x00	; 0
    1c5c:	69 f7       	brne	.-38     	; 0x1c38 <LCD_displayCharacter+0x2a4>
    1c5e:	14 c0       	rjmp	.+40     	; 0x1c88 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c60:	6d 89       	ldd	r22, Y+21	; 0x15
    1c62:	7e 89       	ldd	r23, Y+22	; 0x16
    1c64:	8f 89       	ldd	r24, Y+23	; 0x17
    1c66:	98 8d       	ldd	r25, Y+24	; 0x18
    1c68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	9c 8b       	std	Y+20, r25	; 0x14
    1c72:	8b 8b       	std	Y+19, r24	; 0x13
    1c74:	8b 89       	ldd	r24, Y+19	; 0x13
    1c76:	9c 89       	ldd	r25, Y+20	; 0x14
    1c78:	98 8b       	std	Y+16, r25	; 0x10
    1c7a:	8f 87       	std	Y+15, r24	; 0x0f
    1c7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c7e:	98 89       	ldd	r25, Y+16	; 0x10
    1c80:	01 97       	sbiw	r24, 0x01	; 1
    1c82:	f1 f7       	brne	.-4      	; 0x1c80 <LCD_displayCharacter+0x2ec>
    1c84:	98 8b       	std	Y+16, r25	; 0x10
    1c86:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1c88:	a2 e3       	ldi	r26, 0x32	; 50
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	e2 e3       	ldi	r30, 0x32	; 50
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	8f 7b       	andi	r24, 0xBF	; 191
    1c94:	8c 93       	st	X, r24
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	a0 e8       	ldi	r26, 0x80	; 128
    1c9c:	bf e3       	ldi	r27, 0x3F	; 63
    1c9e:	8b 87       	std	Y+11, r24	; 0x0b
    1ca0:	9c 87       	std	Y+12, r25	; 0x0c
    1ca2:	ad 87       	std	Y+13, r26	; 0x0d
    1ca4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ca8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1caa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cac:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	4a e7       	ldi	r20, 0x7A	; 122
    1cb4:	53 e4       	ldi	r21, 0x43	; 67
    1cb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cba:	dc 01       	movw	r26, r24
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	8f 83       	std	Y+7, r24	; 0x07
    1cc0:	98 87       	std	Y+8, r25	; 0x08
    1cc2:	a9 87       	std	Y+9, r26	; 0x09
    1cc4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cc6:	6f 81       	ldd	r22, Y+7	; 0x07
    1cc8:	78 85       	ldd	r23, Y+8	; 0x08
    1cca:	89 85       	ldd	r24, Y+9	; 0x09
    1ccc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	40 e8       	ldi	r20, 0x80	; 128
    1cd4:	5f e3       	ldi	r21, 0x3F	; 63
    1cd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cda:	88 23       	and	r24, r24
    1cdc:	2c f4       	brge	.+10     	; 0x1ce8 <LCD_displayCharacter+0x354>
		__ticks = 1;
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	9e 83       	std	Y+6, r25	; 0x06
    1ce4:	8d 83       	std	Y+5, r24	; 0x05
    1ce6:	3f c0       	rjmp	.+126    	; 0x1d66 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    1ce8:	6f 81       	ldd	r22, Y+7	; 0x07
    1cea:	78 85       	ldd	r23, Y+8	; 0x08
    1cec:	89 85       	ldd	r24, Y+9	; 0x09
    1cee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	3f ef       	ldi	r19, 0xFF	; 255
    1cf4:	4f e7       	ldi	r20, 0x7F	; 127
    1cf6:	57 e4       	ldi	r21, 0x47	; 71
    1cf8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cfc:	18 16       	cp	r1, r24
    1cfe:	4c f5       	brge	.+82     	; 0x1d52 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d00:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d02:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	40 e2       	ldi	r20, 0x20	; 32
    1d0e:	51 e4       	ldi	r21, 0x41	; 65
    1d10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d14:	dc 01       	movw	r26, r24
    1d16:	cb 01       	movw	r24, r22
    1d18:	bc 01       	movw	r22, r24
    1d1a:	cd 01       	movw	r24, r26
    1d1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	9e 83       	std	Y+6, r25	; 0x06
    1d26:	8d 83       	std	Y+5, r24	; 0x05
    1d28:	0f c0       	rjmp	.+30     	; 0x1d48 <LCD_displayCharacter+0x3b4>
    1d2a:	89 e1       	ldi	r24, 0x19	; 25
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	9c 83       	std	Y+4, r25	; 0x04
    1d30:	8b 83       	std	Y+3, r24	; 0x03
    1d32:	8b 81       	ldd	r24, Y+3	; 0x03
    1d34:	9c 81       	ldd	r25, Y+4	; 0x04
    1d36:	01 97       	sbiw	r24, 0x01	; 1
    1d38:	f1 f7       	brne	.-4      	; 0x1d36 <LCD_displayCharacter+0x3a2>
    1d3a:	9c 83       	std	Y+4, r25	; 0x04
    1d3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d40:	9e 81       	ldd	r25, Y+6	; 0x06
    1d42:	01 97       	sbiw	r24, 0x01	; 1
    1d44:	9e 83       	std	Y+6, r25	; 0x06
    1d46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d48:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4c:	00 97       	sbiw	r24, 0x00	; 0
    1d4e:	69 f7       	brne	.-38     	; 0x1d2a <LCD_displayCharacter+0x396>
    1d50:	14 c0       	rjmp	.+40     	; 0x1d7a <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d52:	6f 81       	ldd	r22, Y+7	; 0x07
    1d54:	78 85       	ldd	r23, Y+8	; 0x08
    1d56:	89 85       	ldd	r24, Y+9	; 0x09
    1d58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	9e 83       	std	Y+6, r25	; 0x06
    1d64:	8d 83       	std	Y+5, r24	; 0x05
    1d66:	8d 81       	ldd	r24, Y+5	; 0x05
    1d68:	9e 81       	ldd	r25, Y+6	; 0x06
    1d6a:	9a 83       	std	Y+2, r25	; 0x02
    1d6c:	89 83       	std	Y+1, r24	; 0x01
    1d6e:	89 81       	ldd	r24, Y+1	; 0x01
    1d70:	9a 81       	ldd	r25, Y+2	; 0x02
    1d72:	01 97       	sbiw	r24, 0x01	; 1
    1d74:	f1 f7       	brne	.-4      	; 0x1d72 <LCD_displayCharacter+0x3de>
    1d76:	9a 83       	std	Y+2, r25	; 0x02
    1d78:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1d7a:	e9 96       	adiw	r28, 0x39	; 57
    1d7c:	0f b6       	in	r0, 0x3f	; 63
    1d7e:	f8 94       	cli
    1d80:	de bf       	out	0x3e, r29	; 62
    1d82:	0f be       	out	0x3f, r0	; 63
    1d84:	cd bf       	out	0x3d, r28	; 61
    1d86:	cf 91       	pop	r28
    1d88:	df 91       	pop	r29
    1d8a:	08 95       	ret

00001d8c <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    1d8c:	df 93       	push	r29
    1d8e:	cf 93       	push	r28
    1d90:	00 d0       	rcall	.+0      	; 0x1d92 <LCD_displayString+0x6>
    1d92:	0f 92       	push	r0
    1d94:	cd b7       	in	r28, 0x3d	; 61
    1d96:	de b7       	in	r29, 0x3e	; 62
    1d98:	9b 83       	std	Y+3, r25	; 0x03
    1d9a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1d9c:	19 82       	std	Y+1, r1	; 0x01
    1d9e:	0e c0       	rjmp	.+28     	; 0x1dbc <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1da0:	89 81       	ldd	r24, Y+1	; 0x01
    1da2:	28 2f       	mov	r18, r24
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	8a 81       	ldd	r24, Y+2	; 0x02
    1da8:	9b 81       	ldd	r25, Y+3	; 0x03
    1daa:	fc 01       	movw	r30, r24
    1dac:	e2 0f       	add	r30, r18
    1dae:	f3 1f       	adc	r31, r19
    1db0:	80 81       	ld	r24, Z
    1db2:	0e 94 ca 0c 	call	0x1994	; 0x1994 <LCD_displayCharacter>
		i++;
    1db6:	89 81       	ldd	r24, Y+1	; 0x01
    1db8:	8f 5f       	subi	r24, 0xFF	; 255
    1dba:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1dbc:	89 81       	ldd	r24, Y+1	; 0x01
    1dbe:	28 2f       	mov	r18, r24
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc4:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc6:	fc 01       	movw	r30, r24
    1dc8:	e2 0f       	add	r30, r18
    1dca:	f3 1f       	adc	r31, r19
    1dcc:	80 81       	ld	r24, Z
    1dce:	88 23       	and	r24, r24
    1dd0:	39 f7       	brne	.-50     	; 0x1da0 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
    1dd2:	0f 90       	pop	r0
    1dd4:	0f 90       	pop	r0
    1dd6:	0f 90       	pop	r0
    1dd8:	cf 91       	pop	r28
    1dda:	df 91       	pop	r29
    1ddc:	08 95       	ret

00001dde <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    1dde:	df 93       	push	r29
    1de0:	cf 93       	push	r28
    1de2:	00 d0       	rcall	.+0      	; 0x1de4 <LCD_goToRowColumn+0x6>
    1de4:	00 d0       	rcall	.+0      	; 0x1de6 <LCD_goToRowColumn+0x8>
    1de6:	0f 92       	push	r0
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62
    1dec:	8a 83       	std	Y+2, r24	; 0x02
    1dee:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    1df0:	8a 81       	ldd	r24, Y+2	; 0x02
    1df2:	28 2f       	mov	r18, r24
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	3d 83       	std	Y+5, r19	; 0x05
    1df8:	2c 83       	std	Y+4, r18	; 0x04
    1dfa:	8c 81       	ldd	r24, Y+4	; 0x04
    1dfc:	9d 81       	ldd	r25, Y+5	; 0x05
    1dfe:	81 30       	cpi	r24, 0x01	; 1
    1e00:	91 05       	cpc	r25, r1
    1e02:	c1 f0       	breq	.+48     	; 0x1e34 <LCD_goToRowColumn+0x56>
    1e04:	2c 81       	ldd	r18, Y+4	; 0x04
    1e06:	3d 81       	ldd	r19, Y+5	; 0x05
    1e08:	22 30       	cpi	r18, 0x02	; 2
    1e0a:	31 05       	cpc	r19, r1
    1e0c:	2c f4       	brge	.+10     	; 0x1e18 <LCD_goToRowColumn+0x3a>
    1e0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e10:	9d 81       	ldd	r25, Y+5	; 0x05
    1e12:	00 97       	sbiw	r24, 0x00	; 0
    1e14:	61 f0       	breq	.+24     	; 0x1e2e <LCD_goToRowColumn+0x50>
    1e16:	19 c0       	rjmp	.+50     	; 0x1e4a <LCD_goToRowColumn+0x6c>
    1e18:	2c 81       	ldd	r18, Y+4	; 0x04
    1e1a:	3d 81       	ldd	r19, Y+5	; 0x05
    1e1c:	22 30       	cpi	r18, 0x02	; 2
    1e1e:	31 05       	cpc	r19, r1
    1e20:	69 f0       	breq	.+26     	; 0x1e3c <LCD_goToRowColumn+0x5e>
    1e22:	8c 81       	ldd	r24, Y+4	; 0x04
    1e24:	9d 81       	ldd	r25, Y+5	; 0x05
    1e26:	83 30       	cpi	r24, 0x03	; 3
    1e28:	91 05       	cpc	r25, r1
    1e2a:	61 f0       	breq	.+24     	; 0x1e44 <LCD_goToRowColumn+0x66>
    1e2c:	0e c0       	rjmp	.+28     	; 0x1e4a <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    1e2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e30:	89 83       	std	Y+1, r24	; 0x01
    1e32:	0b c0       	rjmp	.+22     	; 0x1e4a <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    1e34:	8b 81       	ldd	r24, Y+3	; 0x03
    1e36:	80 5c       	subi	r24, 0xC0	; 192
    1e38:	89 83       	std	Y+1, r24	; 0x01
    1e3a:	07 c0       	rjmp	.+14     	; 0x1e4a <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    1e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3e:	80 5f       	subi	r24, 0xF0	; 240
    1e40:	89 83       	std	Y+1, r24	; 0x01
    1e42:	03 c0       	rjmp	.+6      	; 0x1e4a <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    1e44:	8b 81       	ldd	r24, Y+3	; 0x03
    1e46:	80 5b       	subi	r24, 0xB0	; 176
    1e48:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    1e4a:	89 81       	ldd	r24, Y+1	; 0x01
    1e4c:	80 68       	ori	r24, 0x80	; 128
    1e4e:	0e 94 ce 0a 	call	0x159c	; 0x159c <LCD_sendCommand>
}
    1e52:	0f 90       	pop	r0
    1e54:	0f 90       	pop	r0
    1e56:	0f 90       	pop	r0
    1e58:	0f 90       	pop	r0
    1e5a:	0f 90       	pop	r0
    1e5c:	cf 91       	pop	r28
    1e5e:	df 91       	pop	r29
    1e60:	08 95       	ret

00001e62 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1e62:	df 93       	push	r29
    1e64:	cf 93       	push	r28
    1e66:	00 d0       	rcall	.+0      	; 0x1e68 <LCD_displayStringRowColumn+0x6>
    1e68:	00 d0       	rcall	.+0      	; 0x1e6a <LCD_displayStringRowColumn+0x8>
    1e6a:	cd b7       	in	r28, 0x3d	; 61
    1e6c:	de b7       	in	r29, 0x3e	; 62
    1e6e:	89 83       	std	Y+1, r24	; 0x01
    1e70:	6a 83       	std	Y+2, r22	; 0x02
    1e72:	5c 83       	std	Y+4, r21	; 0x04
    1e74:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    1e76:	89 81       	ldd	r24, Y+1	; 0x01
    1e78:	6a 81       	ldd	r22, Y+2	; 0x02
    1e7a:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    1e7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e80:	9c 81       	ldd	r25, Y+4	; 0x04
    1e82:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_displayString>
}
    1e86:	0f 90       	pop	r0
    1e88:	0f 90       	pop	r0
    1e8a:	0f 90       	pop	r0
    1e8c:	0f 90       	pop	r0
    1e8e:	cf 91       	pop	r28
    1e90:	df 91       	pop	r29
    1e92:	08 95       	ret

00001e94 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    1e94:	df 93       	push	r29
    1e96:	cf 93       	push	r28
    1e98:	cd b7       	in	r28, 0x3d	; 61
    1e9a:	de b7       	in	r29, 0x3e	; 62
    1e9c:	62 97       	sbiw	r28, 0x12	; 18
    1e9e:	0f b6       	in	r0, 0x3f	; 63
    1ea0:	f8 94       	cli
    1ea2:	de bf       	out	0x3e, r29	; 62
    1ea4:	0f be       	out	0x3f, r0	; 63
    1ea6:	cd bf       	out	0x3d, r28	; 61
    1ea8:	9a 8b       	std	Y+18, r25	; 0x12
    1eaa:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    1eac:	89 89       	ldd	r24, Y+17	; 0x11
    1eae:	9a 89       	ldd	r25, Y+18	; 0x12
    1eb0:	9e 01       	movw	r18, r28
    1eb2:	2f 5f       	subi	r18, 0xFF	; 255
    1eb4:	3f 4f       	sbci	r19, 0xFF	; 255
    1eb6:	b9 01       	movw	r22, r18
    1eb8:	4a e0       	ldi	r20, 0x0A	; 10
    1eba:	50 e0       	ldi	r21, 0x00	; 0
    1ebc:	0e 94 23 13 	call	0x2646	; 0x2646 <itoa>
   LCD_displayString(buff);
    1ec0:	ce 01       	movw	r24, r28
    1ec2:	01 96       	adiw	r24, 0x01	; 1
    1ec4:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_displayString>
}
    1ec8:	62 96       	adiw	r28, 0x12	; 18
    1eca:	0f b6       	in	r0, 0x3f	; 63
    1ecc:	f8 94       	cli
    1ece:	de bf       	out	0x3e, r29	; 62
    1ed0:	0f be       	out	0x3f, r0	; 63
    1ed2:	cd bf       	out	0x3d, r28	; 61
    1ed4:	cf 91       	pop	r28
    1ed6:	df 91       	pop	r29
    1ed8:	08 95       	ret

00001eda <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    1eda:	df 93       	push	r29
    1edc:	cf 93       	push	r28
    1ede:	cd b7       	in	r28, 0x3d	; 61
    1ee0:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	0e 94 ce 0a 	call	0x159c	; 0x159c <LCD_sendCommand>
}
    1ee8:	cf 91       	pop	r28
    1eea:	df 91       	pop	r29
    1eec:	08 95       	ret

00001eee <MOTOR_init>:

/**************************************Functions Definitions******************************************/


void MOTOR_init(void)
{
    1eee:	df 93       	push	r29
    1ef0:	cf 93       	push	r28
    1ef2:	cd b7       	in	r28, 0x3d	; 61
    1ef4:	de b7       	in	r29, 0x3e	; 62
	/* A , B Outputs of MICROCONTROLLER */
	SET_BIT(MOTOR_PORT_DIR,A);
    1ef6:	a4 e3       	ldi	r26, 0x34	; 52
    1ef8:	b0 e0       	ldi	r27, 0x00	; 0
    1efa:	e4 e3       	ldi	r30, 0x34	; 52
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	80 81       	ld	r24, Z
    1f00:	80 62       	ori	r24, 0x20	; 32
    1f02:	8c 93       	st	X, r24
	SET_BIT(MOTOR_PORT_DIR,B);
    1f04:	a4 e3       	ldi	r26, 0x34	; 52
    1f06:	b0 e0       	ldi	r27, 0x00	; 0
    1f08:	e4 e3       	ldi	r30, 0x34	; 52
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	80 81       	ld	r24, Z
    1f0e:	80 64       	ori	r24, 0x40	; 64
    1f10:	8c 93       	st	X, r24

	/* Motor Moves clockwise by default */
//	MOTOR_clockw;
}
    1f12:	cf 91       	pop	r28
    1f14:	df 91       	pop	r29
    1f16:	08 95       	ret

00001f18 <__vector_9>:



						       // ISR DEFINITIONS //

ISR (TIMER0_OVF_vect)   { 	    SECONDS_T0 ++;    }
    1f18:	1f 92       	push	r1
    1f1a:	0f 92       	push	r0
    1f1c:	0f b6       	in	r0, 0x3f	; 63
    1f1e:	0f 92       	push	r0
    1f20:	11 24       	eor	r1, r1
    1f22:	8f 93       	push	r24
    1f24:	9f 93       	push	r25
    1f26:	af 93       	push	r26
    1f28:	bf 93       	push	r27
    1f2a:	df 93       	push	r29
    1f2c:	cf 93       	push	r28
    1f2e:	cd b7       	in	r28, 0x3d	; 61
    1f30:	de b7       	in	r29, 0x3e	; 62
    1f32:	80 91 74 00 	lds	r24, 0x0074
    1f36:	90 91 75 00 	lds	r25, 0x0075
    1f3a:	a0 91 76 00 	lds	r26, 0x0076
    1f3e:	b0 91 77 00 	lds	r27, 0x0077
    1f42:	01 96       	adiw	r24, 0x01	; 1
    1f44:	a1 1d       	adc	r26, r1
    1f46:	b1 1d       	adc	r27, r1
    1f48:	80 93 74 00 	sts	0x0074, r24
    1f4c:	90 93 75 00 	sts	0x0075, r25
    1f50:	a0 93 76 00 	sts	0x0076, r26
    1f54:	b0 93 77 00 	sts	0x0077, r27
    1f58:	cf 91       	pop	r28
    1f5a:	df 91       	pop	r29
    1f5c:	bf 91       	pop	r27
    1f5e:	af 91       	pop	r26
    1f60:	9f 91       	pop	r25
    1f62:	8f 91       	pop	r24
    1f64:	0f 90       	pop	r0
    1f66:	0f be       	out	0x3f, r0	; 63
    1f68:	0f 90       	pop	r0
    1f6a:	1f 90       	pop	r1
    1f6c:	18 95       	reti

00001f6e <__vector_19>:

ISR (TIMER0_COMP_vect)  {		SECONDS_T0 ++;	  }
    1f6e:	1f 92       	push	r1
    1f70:	0f 92       	push	r0
    1f72:	0f b6       	in	r0, 0x3f	; 63
    1f74:	0f 92       	push	r0
    1f76:	11 24       	eor	r1, r1
    1f78:	8f 93       	push	r24
    1f7a:	9f 93       	push	r25
    1f7c:	af 93       	push	r26
    1f7e:	bf 93       	push	r27
    1f80:	df 93       	push	r29
    1f82:	cf 93       	push	r28
    1f84:	cd b7       	in	r28, 0x3d	; 61
    1f86:	de b7       	in	r29, 0x3e	; 62
    1f88:	80 91 74 00 	lds	r24, 0x0074
    1f8c:	90 91 75 00 	lds	r25, 0x0075
    1f90:	a0 91 76 00 	lds	r26, 0x0076
    1f94:	b0 91 77 00 	lds	r27, 0x0077
    1f98:	01 96       	adiw	r24, 0x01	; 1
    1f9a:	a1 1d       	adc	r26, r1
    1f9c:	b1 1d       	adc	r27, r1
    1f9e:	80 93 74 00 	sts	0x0074, r24
    1fa2:	90 93 75 00 	sts	0x0075, r25
    1fa6:	a0 93 76 00 	sts	0x0076, r26
    1faa:	b0 93 77 00 	sts	0x0077, r27
    1fae:	cf 91       	pop	r28
    1fb0:	df 91       	pop	r29
    1fb2:	bf 91       	pop	r27
    1fb4:	af 91       	pop	r26
    1fb6:	9f 91       	pop	r25
    1fb8:	8f 91       	pop	r24
    1fba:	0f 90       	pop	r0
    1fbc:	0f be       	out	0x3f, r0	; 63
    1fbe:	0f 90       	pop	r0
    1fc0:	1f 90       	pop	r1
    1fc2:	18 95       	reti

00001fc4 <__vector_8>:

ISR (TIMER1_OVF_vect)   {       SECONDS_T1_MC1 ++; SECONDS_T1_MC2 ++;     }
    1fc4:	1f 92       	push	r1
    1fc6:	0f 92       	push	r0
    1fc8:	0f b6       	in	r0, 0x3f	; 63
    1fca:	0f 92       	push	r0
    1fcc:	11 24       	eor	r1, r1
    1fce:	8f 93       	push	r24
    1fd0:	9f 93       	push	r25
    1fd2:	af 93       	push	r26
    1fd4:	bf 93       	push	r27
    1fd6:	df 93       	push	r29
    1fd8:	cf 93       	push	r28
    1fda:	cd b7       	in	r28, 0x3d	; 61
    1fdc:	de b7       	in	r29, 0x3e	; 62
    1fde:	80 91 78 00 	lds	r24, 0x0078
    1fe2:	90 91 79 00 	lds	r25, 0x0079
    1fe6:	a0 91 7a 00 	lds	r26, 0x007A
    1fea:	b0 91 7b 00 	lds	r27, 0x007B
    1fee:	01 96       	adiw	r24, 0x01	; 1
    1ff0:	a1 1d       	adc	r26, r1
    1ff2:	b1 1d       	adc	r27, r1
    1ff4:	80 93 78 00 	sts	0x0078, r24
    1ff8:	90 93 79 00 	sts	0x0079, r25
    1ffc:	a0 93 7a 00 	sts	0x007A, r26
    2000:	b0 93 7b 00 	sts	0x007B, r27
    2004:	80 91 7c 00 	lds	r24, 0x007C
    2008:	90 91 7d 00 	lds	r25, 0x007D
    200c:	a0 91 7e 00 	lds	r26, 0x007E
    2010:	b0 91 7f 00 	lds	r27, 0x007F
    2014:	01 96       	adiw	r24, 0x01	; 1
    2016:	a1 1d       	adc	r26, r1
    2018:	b1 1d       	adc	r27, r1
    201a:	80 93 7c 00 	sts	0x007C, r24
    201e:	90 93 7d 00 	sts	0x007D, r25
    2022:	a0 93 7e 00 	sts	0x007E, r26
    2026:	b0 93 7f 00 	sts	0x007F, r27
    202a:	cf 91       	pop	r28
    202c:	df 91       	pop	r29
    202e:	bf 91       	pop	r27
    2030:	af 91       	pop	r26
    2032:	9f 91       	pop	r25
    2034:	8f 91       	pop	r24
    2036:	0f 90       	pop	r0
    2038:	0f be       	out	0x3f, r0	; 63
    203a:	0f 90       	pop	r0
    203c:	1f 90       	pop	r1
    203e:	18 95       	reti

00002040 <__vector_6>:


ISR (TIMER1_COMPA_vect) { 	    SECONDS_T1_MC1 ++; SECONDS_T1_MC2 ++;     }
    2040:	1f 92       	push	r1
    2042:	0f 92       	push	r0
    2044:	0f b6       	in	r0, 0x3f	; 63
    2046:	0f 92       	push	r0
    2048:	11 24       	eor	r1, r1
    204a:	8f 93       	push	r24
    204c:	9f 93       	push	r25
    204e:	af 93       	push	r26
    2050:	bf 93       	push	r27
    2052:	df 93       	push	r29
    2054:	cf 93       	push	r28
    2056:	cd b7       	in	r28, 0x3d	; 61
    2058:	de b7       	in	r29, 0x3e	; 62
    205a:	80 91 78 00 	lds	r24, 0x0078
    205e:	90 91 79 00 	lds	r25, 0x0079
    2062:	a0 91 7a 00 	lds	r26, 0x007A
    2066:	b0 91 7b 00 	lds	r27, 0x007B
    206a:	01 96       	adiw	r24, 0x01	; 1
    206c:	a1 1d       	adc	r26, r1
    206e:	b1 1d       	adc	r27, r1
    2070:	80 93 78 00 	sts	0x0078, r24
    2074:	90 93 79 00 	sts	0x0079, r25
    2078:	a0 93 7a 00 	sts	0x007A, r26
    207c:	b0 93 7b 00 	sts	0x007B, r27
    2080:	80 91 7c 00 	lds	r24, 0x007C
    2084:	90 91 7d 00 	lds	r25, 0x007D
    2088:	a0 91 7e 00 	lds	r26, 0x007E
    208c:	b0 91 7f 00 	lds	r27, 0x007F
    2090:	01 96       	adiw	r24, 0x01	; 1
    2092:	a1 1d       	adc	r26, r1
    2094:	b1 1d       	adc	r27, r1
    2096:	80 93 7c 00 	sts	0x007C, r24
    209a:	90 93 7d 00 	sts	0x007D, r25
    209e:	a0 93 7e 00 	sts	0x007E, r26
    20a2:	b0 93 7f 00 	sts	0x007F, r27
    20a6:	cf 91       	pop	r28
    20a8:	df 91       	pop	r29
    20aa:	bf 91       	pop	r27
    20ac:	af 91       	pop	r26
    20ae:	9f 91       	pop	r25
    20b0:	8f 91       	pop	r24
    20b2:	0f 90       	pop	r0
    20b4:	0f be       	out	0x3f, r0	; 63
    20b6:	0f 90       	pop	r0
    20b8:	1f 90       	pop	r1
    20ba:	18 95       	reti

000020bc <Timer0_init>:


							// FUNCTIONS DEFINITION //

void Timer0_init(const TimerConfig *configuration)
{
    20bc:	df 93       	push	r29
    20be:	cf 93       	push	r28
    20c0:	00 d0       	rcall	.+0      	; 0x20c2 <Timer0_init+0x6>
    20c2:	cd b7       	in	r28, 0x3d	; 61
    20c4:	de b7       	in	r29, 0x3e	; 62
    20c6:	9a 83       	std	Y+2, r25	; 0x02
    20c8:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 = (TCCR0 & ~0x07) | configuration->clock;  //ADJUSTS PRESCALAR BITS
    20ca:	a3 e5       	ldi	r26, 0x53	; 83
    20cc:	b0 e0       	ldi	r27, 0x00	; 0
    20ce:	e3 e5       	ldi	r30, 0x53	; 83
    20d0:	f0 e0       	ldi	r31, 0x00	; 0
    20d2:	80 81       	ld	r24, Z
    20d4:	98 2f       	mov	r25, r24
    20d6:	98 7f       	andi	r25, 0xF8	; 248
    20d8:	e9 81       	ldd	r30, Y+1	; 0x01
    20da:	fa 81       	ldd	r31, Y+2	; 0x02
    20dc:	81 81       	ldd	r24, Z+1	; 0x01
    20de:	89 2b       	or	r24, r25
    20e0:	8c 93       	st	X, r24

	TCCR0 = (TCCR0 & ~0xC8) | configuration->mode;  //ADJUSTS MODE (FOC0,WGM00,WGM01 bits)
    20e2:	a3 e5       	ldi	r26, 0x53	; 83
    20e4:	b0 e0       	ldi	r27, 0x00	; 0
    20e6:	e3 e5       	ldi	r30, 0x53	; 83
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	80 81       	ld	r24, Z
    20ec:	98 2f       	mov	r25, r24
    20ee:	97 73       	andi	r25, 0x37	; 55
    20f0:	e9 81       	ldd	r30, Y+1	; 0x01
    20f2:	fa 81       	ldd	r31, Y+2	; 0x02
    20f4:	80 81       	ld	r24, Z
    20f6:	89 2b       	or	r24, r25
    20f8:	8c 93       	st	X, r24

	TCNT0=configuration->initial_value; 			// START COUNTING FROM INPUT INITIAL VALUE
    20fa:	a2 e5       	ldi	r26, 0x52	; 82
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	e9 81       	ldd	r30, Y+1	; 0x01
    2100:	fa 81       	ldd	r31, Y+2	; 0x02
    2102:	82 81       	ldd	r24, Z+2	; 0x02
    2104:	93 81       	ldd	r25, Z+3	; 0x03
    2106:	8c 93       	st	X, r24

	if (configuration->mode == NORMAL)
    2108:	e9 81       	ldd	r30, Y+1	; 0x01
    210a:	fa 81       	ldd	r31, Y+2	; 0x02
    210c:	80 81       	ld	r24, Z
    210e:	80 38       	cpi	r24, 0x80	; 128
    2110:	39 f4       	brne	.+14     	; 0x2120 <Timer0_init+0x64>
	{
		TIMSK|=(1<<TOIE0);							//TIMER OVERFLOW INTERRUPT ENABLE
    2112:	a9 e5       	ldi	r26, 0x59	; 89
    2114:	b0 e0       	ldi	r27, 0x00	; 0
    2116:	e9 e5       	ldi	r30, 0x59	; 89
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	80 81       	ld	r24, Z
    211c:	81 60       	ori	r24, 0x01	; 1
    211e:	8c 93       	st	X, r24
	}

	if (configuration->mode == CTC)
    2120:	e9 81       	ldd	r30, Y+1	; 0x01
    2122:	fa 81       	ldd	r31, Y+2	; 0x02
    2124:	80 81       	ld	r24, Z
    2126:	88 38       	cpi	r24, 0x88	; 136
    2128:	71 f4       	brne	.+28     	; 0x2146 <Timer0_init+0x8a>
	{
		TIMSK|=(1<<OCIE0);
    212a:	a9 e5       	ldi	r26, 0x59	; 89
    212c:	b0 e0       	ldi	r27, 0x00	; 0
    212e:	e9 e5       	ldi	r30, 0x59	; 89
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	80 81       	ld	r24, Z
    2134:	82 60       	ori	r24, 0x02	; 2
    2136:	8c 93       	st	X, r24
		OCR0= configuration->compare_value;        //SET COMPARE VALUE
    2138:	ac e5       	ldi	r26, 0x5C	; 92
    213a:	b0 e0       	ldi	r27, 0x00	; 0
    213c:	e9 81       	ldd	r30, Y+1	; 0x01
    213e:	fa 81       	ldd	r31, Y+2	; 0x02
    2140:	84 81       	ldd	r24, Z+4	; 0x04
    2142:	95 81       	ldd	r25, Z+5	; 0x05
    2144:	8c 93       	st	X, r24
	}
}
    2146:	0f 90       	pop	r0
    2148:	0f 90       	pop	r0
    214a:	cf 91       	pop	r28
    214c:	df 91       	pop	r29
    214e:	08 95       	ret

00002150 <Timer0_deinit>:

void Timer0_deinit()
{
    2150:	df 93       	push	r29
    2152:	cf 93       	push	r28
    2154:	cd b7       	in	r28, 0x3d	; 61
    2156:	de b7       	in	r29, 0x3e	; 62
	TCCR0=0; TCNT0=0; TIMSK &=~(1<<TOIE0) & ~(1<<OCIE0);
    2158:	e3 e5       	ldi	r30, 0x53	; 83
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	10 82       	st	Z, r1
    215e:	e2 e5       	ldi	r30, 0x52	; 82
    2160:	f0 e0       	ldi	r31, 0x00	; 0
    2162:	10 82       	st	Z, r1
    2164:	a9 e5       	ldi	r26, 0x59	; 89
    2166:	b0 e0       	ldi	r27, 0x00	; 0
    2168:	e9 e5       	ldi	r30, 0x59	; 89
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	80 81       	ld	r24, Z
    216e:	8c 7f       	andi	r24, 0xFC	; 252
    2170:	8c 93       	st	X, r24
}
    2172:	cf 91       	pop	r28
    2174:	df 91       	pop	r29
    2176:	08 95       	ret

00002178 <Timer0_stop>:

void Timer0_stop()
{
    2178:	df 93       	push	r29
    217a:	cf 93       	push	r28
    217c:	cd b7       	in	r28, 0x3d	; 61
    217e:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = (TCCR0 & ~0x07);							//CLEAR PRESCALE BITS
    2180:	a3 e5       	ldi	r26, 0x53	; 83
    2182:	b0 e0       	ldi	r27, 0x00	; 0
    2184:	e3 e5       	ldi	r30, 0x53	; 83
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	80 81       	ld	r24, Z
    218a:	88 7f       	andi	r24, 0xF8	; 248
    218c:	8c 93       	st	X, r24
}
    218e:	cf 91       	pop	r28
    2190:	df 91       	pop	r29
    2192:	08 95       	ret

00002194 <Timer1_init>:


void Timer1_init(const TimerConfig *configuration)
{
    2194:	df 93       	push	r29
    2196:	cf 93       	push	r28
    2198:	00 d0       	rcall	.+0      	; 0x219a <Timer1_init+0x6>
    219a:	cd b7       	in	r28, 0x3d	; 61
    219c:	de b7       	in	r29, 0x3e	; 62
    219e:	9a 83       	std	Y+2, r25	; 0x02
    21a0:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = (TCCR1B & ~0x07) | configuration->clock; //ADJUSTS PRESACALAR BITS
    21a2:	ae e4       	ldi	r26, 0x4E	; 78
    21a4:	b0 e0       	ldi	r27, 0x00	; 0
    21a6:	ee e4       	ldi	r30, 0x4E	; 78
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	80 81       	ld	r24, Z
    21ac:	98 2f       	mov	r25, r24
    21ae:	98 7f       	andi	r25, 0xF8	; 248
    21b0:	e9 81       	ldd	r30, Y+1	; 0x01
    21b2:	fa 81       	ldd	r31, Y+2	; 0x02
    21b4:	81 81       	ldd	r24, Z+1	; 0x01
    21b6:	89 2b       	or	r24, r25
    21b8:	8c 93       	st	X, r24

	TCCR1B = (TCCR1B & ~0x08) | (0x08 & configuration->mode); //FOR WGM12 IF CTC MODE 1 / NORMAL MODE 0
    21ba:	ae e4       	ldi	r26, 0x4E	; 78
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	ee e4       	ldi	r30, 0x4E	; 78
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	98 2f       	mov	r25, r24
    21c6:	97 7f       	andi	r25, 0xF7	; 247
    21c8:	e9 81       	ldd	r30, Y+1	; 0x01
    21ca:	fa 81       	ldd	r31, Y+2	; 0x02
    21cc:	80 81       	ld	r24, Z
    21ce:	88 70       	andi	r24, 0x08	; 8
    21d0:	89 2b       	or	r24, r25
    21d2:	8c 93       	st	X, r24

	TCCR1A = (1<<FOC1A);  							  //TIMER1 ONLY SUPPORTS CTC MODE AND NORMAL MODE
    21d4:	ef e4       	ldi	r30, 0x4F	; 79
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	88 e0       	ldi	r24, 0x08	; 8
    21da:	80 83       	st	Z, r24

    TCNT1 = configuration->initial_value;
    21dc:	ac e4       	ldi	r26, 0x4C	; 76
    21de:	b0 e0       	ldi	r27, 0x00	; 0
    21e0:	e9 81       	ldd	r30, Y+1	; 0x01
    21e2:	fa 81       	ldd	r31, Y+2	; 0x02
    21e4:	82 81       	ldd	r24, Z+2	; 0x02
    21e6:	93 81       	ldd	r25, Z+3	; 0x03
    21e8:	11 96       	adiw	r26, 0x01	; 1
    21ea:	9c 93       	st	X, r25
    21ec:	8e 93       	st	-X, r24

	if (configuration->mode == NORMAL)
    21ee:	e9 81       	ldd	r30, Y+1	; 0x01
    21f0:	fa 81       	ldd	r31, Y+2	; 0x02
    21f2:	80 81       	ld	r24, Z
    21f4:	80 38       	cpi	r24, 0x80	; 128
    21f6:	39 f4       	brne	.+14     	; 0x2206 <Timer1_init+0x72>
	{
		TIMSK|=(1<<TOIE1);							//TIMER OVERFLOW INTERRUPT ENABLE
    21f8:	a9 e5       	ldi	r26, 0x59	; 89
    21fa:	b0 e0       	ldi	r27, 0x00	; 0
    21fc:	e9 e5       	ldi	r30, 0x59	; 89
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	80 81       	ld	r24, Z
    2202:	84 60       	ori	r24, 0x04	; 4
    2204:	8c 93       	st	X, r24
	}

	if (configuration->mode == CTC)
    2206:	e9 81       	ldd	r30, Y+1	; 0x01
    2208:	fa 81       	ldd	r31, Y+2	; 0x02
    220a:	80 81       	ld	r24, Z
    220c:	88 38       	cpi	r24, 0x88	; 136
    220e:	81 f4       	brne	.+32     	; 0x2230 <Timer1_init+0x9c>
	{
		OCR1A= configuration->compare_value;        //SET COMPARE VALUE
    2210:	aa e4       	ldi	r26, 0x4A	; 74
    2212:	b0 e0       	ldi	r27, 0x00	; 0
    2214:	e9 81       	ldd	r30, Y+1	; 0x01
    2216:	fa 81       	ldd	r31, Y+2	; 0x02
    2218:	84 81       	ldd	r24, Z+4	; 0x04
    221a:	95 81       	ldd	r25, Z+5	; 0x05
    221c:	11 96       	adiw	r26, 0x01	; 1
    221e:	9c 93       	st	X, r25
    2220:	8e 93       	st	-X, r24
		TIMSK|=(1<<OCIE1A);
    2222:	a9 e5       	ldi	r26, 0x59	; 89
    2224:	b0 e0       	ldi	r27, 0x00	; 0
    2226:	e9 e5       	ldi	r30, 0x59	; 89
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	80 81       	ld	r24, Z
    222c:	80 61       	ori	r24, 0x10	; 16
    222e:	8c 93       	st	X, r24
	}
}
    2230:	0f 90       	pop	r0
    2232:	0f 90       	pop	r0
    2234:	cf 91       	pop	r28
    2236:	df 91       	pop	r29
    2238:	08 95       	ret

0000223a <Timer1_deinit>:

void Timer1_deinit()
{
    223a:	df 93       	push	r29
    223c:	cf 93       	push	r28
    223e:	cd b7       	in	r28, 0x3d	; 61
    2240:	de b7       	in	r29, 0x3e	; 62
	TCCR1B=0; TCCR1A=0; TCNT0=0; TIMSK &=~(1<<TOIE1) & ~(1<<OCIE1A);
    2242:	ee e4       	ldi	r30, 0x4E	; 78
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	10 82       	st	Z, r1
    2248:	ef e4       	ldi	r30, 0x4F	; 79
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	10 82       	st	Z, r1
    224e:	e2 e5       	ldi	r30, 0x52	; 82
    2250:	f0 e0       	ldi	r31, 0x00	; 0
    2252:	10 82       	st	Z, r1
    2254:	a9 e5       	ldi	r26, 0x59	; 89
    2256:	b0 e0       	ldi	r27, 0x00	; 0
    2258:	e9 e5       	ldi	r30, 0x59	; 89
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	80 81       	ld	r24, Z
    225e:	8b 7e       	andi	r24, 0xEB	; 235
    2260:	8c 93       	st	X, r24
}
    2262:	cf 91       	pop	r28
    2264:	df 91       	pop	r29
    2266:	08 95       	ret

00002268 <Timer1_stop>:



void Timer1_stop()
{
    2268:	df 93       	push	r29
    226a:	cf 93       	push	r28
    226c:	cd b7       	in	r28, 0x3d	; 61
    226e:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = (TCCR1B & ~0x07);
    2270:	ae e4       	ldi	r26, 0x4E	; 78
    2272:	b0 e0       	ldi	r27, 0x00	; 0
    2274:	ee e4       	ldi	r30, 0x4E	; 78
    2276:	f0 e0       	ldi	r31, 0x00	; 0
    2278:	80 81       	ld	r24, Z
    227a:	88 7f       	andi	r24, 0xF8	; 248
    227c:	8c 93       	st	X, r24
}
    227e:	cf 91       	pop	r28
    2280:	df 91       	pop	r29
    2282:	08 95       	ret

00002284 <TWI_init>:

#include "twi.h"


void TWI_init( const I2C_Config *configuration )
{
    2284:	df 93       	push	r29
    2286:	cf 93       	push	r28
    2288:	00 d0       	rcall	.+0      	; 0x228a <TWI_init+0x6>
    228a:	cd b7       	in	r28, 0x3d	; 61
    228c:	de b7       	in	r29, 0x3e	; 62
    228e:	9a 83       	std	Y+2, r25	; 0x02
    2290:	89 83       	std	Y+1, r24	; 0x01

	TWSR |= ( (TWSR & ~ 0X03) | configuration->clock );			 //ADJUSTS PRESCALE
    2292:	a1 e2       	ldi	r26, 0x21	; 33
    2294:	b0 e0       	ldi	r27, 0x00	; 0
    2296:	e1 e2       	ldi	r30, 0x21	; 33
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	80 81       	ld	r24, Z
    229c:	28 2f       	mov	r18, r24
    229e:	e1 e2       	ldi	r30, 0x21	; 33
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	80 81       	ld	r24, Z
    22a4:	98 2f       	mov	r25, r24
    22a6:	9c 7f       	andi	r25, 0xFC	; 252
    22a8:	e9 81       	ldd	r30, Y+1	; 0x01
    22aa:	fa 81       	ldd	r31, Y+2	; 0x02
    22ac:	80 81       	ld	r24, Z
    22ae:	89 2b       	or	r24, r25
    22b0:	82 2b       	or	r24, r18
    22b2:	8c 93       	st	X, r24

	TWAR = 	  (~0X01 & configuration->slave_address );			//SLAVE ADDRESS FROM BIT 1 TO BIT 7
    22b4:	a2 e2       	ldi	r26, 0x22	; 34
    22b6:	b0 e0       	ldi	r27, 0x00	; 0
    22b8:	e9 81       	ldd	r30, Y+1	; 0x01
    22ba:	fa 81       	ldd	r31, Y+2	; 0x02
    22bc:	82 81       	ldd	r24, Z+2	; 0x02
    22be:	8e 7f       	andi	r24, 0xFE	; 254
    22c0:	8c 93       	st	X, r24

	TWBR = configuration->BitRate;
    22c2:	a0 e2       	ldi	r26, 0x20	; 32
    22c4:	b0 e0       	ldi	r27, 0x00	; 0
    22c6:	e9 81       	ldd	r30, Y+1	; 0x01
    22c8:	fa 81       	ldd	r31, Y+2	; 0x02
    22ca:	81 81       	ldd	r24, Z+1	; 0x01
    22cc:	8c 93       	st	X, r24

	TWCR = (1<<TWEN);  // TWI ENABLE BIT
    22ce:	e6 e5       	ldi	r30, 0x56	; 86
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	84 e0       	ldi	r24, 0x04	; 4
    22d4:	80 83       	st	Z, r24

}
    22d6:	0f 90       	pop	r0
    22d8:	0f 90       	pop	r0
    22da:	cf 91       	pop	r28
    22dc:	df 91       	pop	r29
    22de:	08 95       	ret

000022e0 <TWI_start>:

void TWI_start()
{
    22e0:	df 93       	push	r29
    22e2:	cf 93       	push	r28
    22e4:	cd b7       	in	r28, 0x3d	; 61
    22e6:	de b7       	in	r29, 0x3e	; 62
    /*
     * START BIT SEND BY ENABLING TWSTA
	 * CLEAR TWINT FLAG BEFORE SENDING START BIT (CLEARED BY WRITING LOGIC 1 TO IT TWINT=1 )
	 * Enable TWI Module
	 */
	TWCR = (1 <<TWSTA) | (1 <<TWEN) | (1 <<TWINT);
    22e8:	e6 e5       	ldi	r30, 0x56	; 86
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	84 ea       	ldi	r24, 0xA4	; 164
    22ee:	80 83       	st	Z, r24

    while(BIT_IS_CLEAR(TWCR,TWINT));  //KEEP POLLING UNTIL INT FLAG IS SET (START BIT SENT SUCCESFULLY)
    22f0:	e6 e5       	ldi	r30, 0x56	; 86
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	80 81       	ld	r24, Z
    22f6:	88 23       	and	r24, r24
    22f8:	dc f7       	brge	.-10     	; 0x22f0 <TWI_start+0x10>
}
    22fa:	cf 91       	pop	r28
    22fc:	df 91       	pop	r29
    22fe:	08 95       	ret

00002300 <TWI_stop>:

void TWI_stop()
{
    2300:	df 93       	push	r29
    2302:	cf 93       	push	r28
    2304:	cd b7       	in	r28, 0x3d	; 61
    2306:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2308:	e6 e5       	ldi	r30, 0x56	; 86
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	84 e9       	ldi	r24, 0x94	; 148
    230e:	80 83       	st	Z, r24
}
    2310:	cf 91       	pop	r28
    2312:	df 91       	pop	r29
    2314:	08 95       	ret

00002316 <TWI_write>:

void TWI_write(uint8 data)
{
    2316:	df 93       	push	r29
    2318:	cf 93       	push	r28
    231a:	0f 92       	push	r0
    231c:	cd b7       	in	r28, 0x3d	; 61
    231e:	de b7       	in	r29, 0x3e	; 62
    2320:	89 83       	std	Y+1, r24	; 0x01
	TWDR=data; 						// TRANSFER DATA
    2322:	e3 e2       	ldi	r30, 0x23	; 35
    2324:	f0 e0       	ldi	r31, 0x00	; 0
    2326:	89 81       	ldd	r24, Y+1	; 0x01
    2328:	80 83       	st	Z, r24
	TWCR = (1 <<TWINT)| (1 <<TWEN); // RESET TWINT FLAG BY WRITING LOGIC 1 TO IT | ENABLE TWI
    232a:	e6 e5       	ldi	r30, 0x56	; 86
    232c:	f0 e0       	ldi	r31, 0x00	; 0
    232e:	84 e8       	ldi	r24, 0x84	; 132
    2330:	80 83       	st	Z, r24
    while(BIT_IS_CLEAR(TWCR,TWINT));  //KEEP POLLING UNTIL INT FLAG IS SET (DATA SENT SUCCESSFULY)
    2332:	e6 e5       	ldi	r30, 0x56	; 86
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	80 81       	ld	r24, Z
    2338:	88 23       	and	r24, r24
    233a:	dc f7       	brge	.-10     	; 0x2332 <TWI_write+0x1c>
}
    233c:	0f 90       	pop	r0
    233e:	cf 91       	pop	r28
    2340:	df 91       	pop	r29
    2342:	08 95       	ret

00002344 <TWI_read_ACK>:

uint8 TWI_read_ACK()
{
    2344:	df 93       	push	r29
    2346:	cf 93       	push	r28
    2348:	cd b7       	in	r28, 0x3d	; 61
    234a:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWEN) | (1<<TWEA) | (1<<TWINT);
    234c:	e6 e5       	ldi	r30, 0x56	; 86
    234e:	f0 e0       	ldi	r31, 0x00	; 0
    2350:	84 ec       	ldi	r24, 0xC4	; 196
    2352:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(TWCR,TWINT));  //KEEP POLLING UNTIL INT FLAG IS SET (DATA RECIEVED SUCCESSFULY)
    2354:	e6 e5       	ldi	r30, 0x56	; 86
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	80 81       	ld	r24, Z
    235a:	88 23       	and	r24, r24
    235c:	dc f7       	brge	.-10     	; 0x2354 <TWI_read_ACK+0x10>
	return TWDR;
    235e:	e3 e2       	ldi	r30, 0x23	; 35
    2360:	f0 e0       	ldi	r31, 0x00	; 0
    2362:	80 81       	ld	r24, Z
}
    2364:	cf 91       	pop	r28
    2366:	df 91       	pop	r29
    2368:	08 95       	ret

0000236a <TWI_read_NACK>:

uint8 TWI_read_NACK()
{
    236a:	df 93       	push	r29
    236c:	cf 93       	push	r28
    236e:	cd b7       	in	r28, 0x3d	; 61
    2370:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWEN) | (1<<TWINT);
    2372:	e6 e5       	ldi	r30, 0x56	; 86
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	84 e8       	ldi	r24, 0x84	; 132
    2378:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(TWCR,TWINT));  //KEEP POLLING UNTIL INT FLAG IS SET (DATA RECIEVED SUCCESSFULY)
    237a:	e6 e5       	ldi	r30, 0x56	; 86
    237c:	f0 e0       	ldi	r31, 0x00	; 0
    237e:	80 81       	ld	r24, Z
    2380:	88 23       	and	r24, r24
    2382:	dc f7       	brge	.-10     	; 0x237a <TWI_read_NACK+0x10>
	return TWDR; 					  //READ DATA
    2384:	e3 e2       	ldi	r30, 0x23	; 35
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	80 81       	ld	r24, Z
}
    238a:	cf 91       	pop	r28
    238c:	df 91       	pop	r29
    238e:	08 95       	ret

00002390 <TWI_getStatus>:

uint8 TWI_getStatus()
{
    2390:	df 93       	push	r29
    2392:	cf 93       	push	r28
    2394:	0f 92       	push	r0
    2396:	cd b7       	in	r28, 0x3d	; 61
    2398:	de b7       	in	r29, 0x3e	; 62
	uint8 status= ( (0XF8) & TWSR );
    239a:	e1 e2       	ldi	r30, 0x21	; 33
    239c:	f0 e0       	ldi	r31, 0x00	; 0
    239e:	80 81       	ld	r24, Z
    23a0:	88 7f       	andi	r24, 0xF8	; 248
    23a2:	89 83       	std	Y+1, r24	; 0x01
	return status;
    23a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    23a6:	0f 90       	pop	r0
    23a8:	cf 91       	pop	r28
    23aa:	df 91       	pop	r29
    23ac:	08 95       	ret

000023ae <UART_init>:

#define BAUD_PRESCALE_U2X (((F_CPU / (USART_BAUDRATE * 8UL))) - 1)      // 8 -> DOUBLE SPEED ASYNCHRONOUS
#define BAUD_PRESCALE_SYNCH (((F_CPU / (USART_BAUDRATE * 16UL))) - 1)  // 16 -> ASYNCHRONOUS

void UART_init( UART_Config *config )
{
    23ae:	df 93       	push	r29
    23b0:	cf 93       	push	r28
    23b2:	00 d0       	rcall	.+0      	; 0x23b4 <UART_init+0x6>
    23b4:	cd b7       	in	r28, 0x3d	; 61
    23b6:	de b7       	in	r29, 0x3e	; 62
    23b8:	9a 83       	std	Y+2, r25	; 0x02
    23ba:	89 83       	std	Y+1, r24	; 0x01
	/*  UCSRB REGISTER
	 *  RXC,TXC,UDR INTERRUPT ENABLE = 0,  T/R DATA BIT 8 = 0
	 */

	UCSRB|= (1<<RXEN) | (1<<TXEN) ;    // TRANSMITER ENABLE AND RECIEVER ENABLE
    23bc:	aa e2       	ldi	r26, 0x2A	; 42
    23be:	b0 e0       	ldi	r27, 0x00	; 0
    23c0:	ea e2       	ldi	r30, 0x2A	; 42
    23c2:	f0 e0       	ldi	r31, 0x00	; 0
    23c4:	80 81       	ld	r24, Z
    23c6:	88 61       	ori	r24, 0x18	; 24
    23c8:	8c 93       	st	X, r24
	/* UCSRC REGISTER
	 * USBS=0 -> 1 STOP BIT
	 * UPM0 =0 ,UPM1=1 -> EVEN PARITY BIT
	 */

	UCSRC|= (1<<URSEL); // SELECTING UCSRC BY SETTING 1 TO 'URSEL'
    23ca:	a0 e4       	ldi	r26, 0x40	; 64
    23cc:	b0 e0       	ldi	r27, 0x00	; 0
    23ce:	e0 e4       	ldi	r30, 0x40	; 64
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	80 81       	ld	r24, Z
    23d4:	80 68       	ori	r24, 0x80	; 128
    23d6:	8c 93       	st	X, r24
	UCSRC|= (1<<UCSZ0) | (1<<UCSZ1);   //CHARCTER SIZE 8 BITS IN FRAME TRANSFERED
    23d8:	a0 e4       	ldi	r26, 0x40	; 64
    23da:	b0 e0       	ldi	r27, 0x00	; 0
    23dc:	e0 e4       	ldi	r30, 0x40	; 64
    23de:	f0 e0       	ldi	r31, 0x00	; 0
    23e0:	80 81       	ld	r24, Z
    23e2:	86 60       	ori	r24, 0x06	; 6
    23e4:	8c 93       	st	X, r24

	UCSRC|= ( (config->ParityBits) << 4); //CHOOSE PARITY BITS
    23e6:	a0 e4       	ldi	r26, 0x40	; 64
    23e8:	b0 e0       	ldi	r27, 0x00	; 0
    23ea:	e0 e4       	ldi	r30, 0x40	; 64
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	80 81       	ld	r24, Z
    23f0:	28 2f       	mov	r18, r24
    23f2:	e9 81       	ldd	r30, Y+1	; 0x01
    23f4:	fa 81       	ldd	r31, Y+2	; 0x02
    23f6:	81 81       	ldd	r24, Z+1	; 0x01
    23f8:	88 2f       	mov	r24, r24
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	82 95       	swap	r24
    23fe:	92 95       	swap	r25
    2400:	90 7f       	andi	r25, 0xF0	; 240
    2402:	98 27       	eor	r25, r24
    2404:	80 7f       	andi	r24, 0xF0	; 240
    2406:	98 27       	eor	r25, r24
    2408:	82 2b       	or	r24, r18
    240a:	8c 93       	st	X, r24



		if (config->mode) //1 IF SYNCH
    240c:	e9 81       	ldd	r30, Y+1	; 0x01
    240e:	fa 81       	ldd	r31, Y+2	; 0x02
    2410:	80 81       	ld	r24, Z
    2412:	88 23       	and	r24, r24
    2414:	29 f1       	breq	.+74     	; 0x2460 <UART_init+0xb2>
		{
			UCSRC |= ((config->mode) << 6);  // SYNCHRONOUS OPERATION
    2416:	a0 e4       	ldi	r26, 0x40	; 64
    2418:	b0 e0       	ldi	r27, 0x00	; 0
    241a:	e0 e4       	ldi	r30, 0x40	; 64
    241c:	f0 e0       	ldi	r31, 0x00	; 0
    241e:	80 81       	ld	r24, Z
    2420:	28 2f       	mov	r18, r24
    2422:	e9 81       	ldd	r30, Y+1	; 0x01
    2424:	fa 81       	ldd	r31, Y+2	; 0x02
    2426:	80 81       	ld	r24, Z
    2428:	88 2f       	mov	r24, r24
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	00 24       	eor	r0, r0
    242e:	96 95       	lsr	r25
    2430:	87 95       	ror	r24
    2432:	07 94       	ror	r0
    2434:	96 95       	lsr	r25
    2436:	87 95       	ror	r24
    2438:	07 94       	ror	r0
    243a:	98 2f       	mov	r25, r24
    243c:	80 2d       	mov	r24, r0
    243e:	82 2b       	or	r24, r18
    2440:	8c 93       	st	X, r24

			UCSRC |= (1<<UCPOL); // DATA TRANSMITTED ON FALLING EDGE , AND SAMPLED ON POSITIVE EDGE
    2442:	a0 e4       	ldi	r26, 0x40	; 64
    2444:	b0 e0       	ldi	r27, 0x00	; 0
    2446:	e0 e4       	ldi	r30, 0x40	; 64
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	80 81       	ld	r24, Z
    244c:	81 60       	ori	r24, 0x01	; 1
    244e:	8c 93       	st	X, r24

			UBRRH = (BAUD_PRESCALE_SYNCH>>8);
    2450:	e0 e4       	ldi	r30, 0x40	; 64
    2452:	f0 e0       	ldi	r31, 0x00	; 0
    2454:	10 82       	st	Z, r1
			UBRRL =  BAUD_PRESCALE_SYNCH;
    2456:	e9 e2       	ldi	r30, 0x29	; 41
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	85 e0       	ldi	r24, 0x05	; 5
    245c:	80 83       	st	Z, r24
    245e:	25 c0       	rjmp	.+74     	; 0x24aa <UART_init+0xfc>
		}

		else
		{							/* UMSEL =0 -> ASYNCHRONOUS OPERATION
		 	 	 	 	 	 	 	 * U2X =1 DOUBLE TRANSMISSION SPEED FOR ASYNCHRONOUS */
			UCSRC &= ~((config->mode) << 6);
    2460:	a0 e4       	ldi	r26, 0x40	; 64
    2462:	b0 e0       	ldi	r27, 0x00	; 0
    2464:	e0 e4       	ldi	r30, 0x40	; 64
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	80 81       	ld	r24, Z
    246a:	28 2f       	mov	r18, r24
    246c:	e9 81       	ldd	r30, Y+1	; 0x01
    246e:	fa 81       	ldd	r31, Y+2	; 0x02
    2470:	80 81       	ld	r24, Z
    2472:	88 2f       	mov	r24, r24
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	00 24       	eor	r0, r0
    2478:	96 95       	lsr	r25
    247a:	87 95       	ror	r24
    247c:	07 94       	ror	r0
    247e:	96 95       	lsr	r25
    2480:	87 95       	ror	r24
    2482:	07 94       	ror	r0
    2484:	98 2f       	mov	r25, r24
    2486:	80 2d       	mov	r24, r0
    2488:	80 95       	com	r24
    248a:	82 23       	and	r24, r18
    248c:	8c 93       	st	X, r24
			UCSRA |= (1<<U2X);
    248e:	ab e2       	ldi	r26, 0x2B	; 43
    2490:	b0 e0       	ldi	r27, 0x00	; 0
    2492:	eb e2       	ldi	r30, 0x2B	; 43
    2494:	f0 e0       	ldi	r31, 0x00	; 0
    2496:	80 81       	ld	r24, Z
    2498:	82 60       	ori	r24, 0x02	; 2
    249a:	8c 93       	st	X, r24
			UBRRH = (BAUD_PRESCALE_U2X>>8);
    249c:	e0 e4       	ldi	r30, 0x40	; 64
    249e:	f0 e0       	ldi	r31, 0x00	; 0
    24a0:	10 82       	st	Z, r1
			UBRRL =  BAUD_PRESCALE_U2X;
    24a2:	e9 e2       	ldi	r30, 0x29	; 41
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	8c e0       	ldi	r24, 0x0C	; 12
    24a8:	80 83       	st	Z, r24
		}
}
    24aa:	0f 90       	pop	r0
    24ac:	0f 90       	pop	r0
    24ae:	cf 91       	pop	r28
    24b0:	df 91       	pop	r29
    24b2:	08 95       	ret

000024b4 <UART_sendByte>:

void UART_sendByte(uint8 data)
{
    24b4:	df 93       	push	r29
    24b6:	cf 93       	push	r28
    24b8:	0f 92       	push	r0
    24ba:	cd b7       	in	r28, 0x3d	; 61
    24bc:	de b7       	in	r29, 0x3e	; 62
    24be:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    24c0:	eb e2       	ldi	r30, 0x2B	; 43
    24c2:	f0 e0       	ldi	r31, 0x00	; 0
    24c4:	80 81       	ld	r24, Z
    24c6:	88 2f       	mov	r24, r24
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	80 72       	andi	r24, 0x20	; 32
    24cc:	90 70       	andi	r25, 0x00	; 0
    24ce:	00 97       	sbiw	r24, 0x00	; 0
    24d0:	b9 f3       	breq	.-18     	; 0x24c0 <UART_sendByte+0xc>
	UDR=data;
    24d2:	ec e2       	ldi	r30, 0x2C	; 44
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	89 81       	ldd	r24, Y+1	; 0x01
    24d8:	80 83       	st	Z, r24
}
    24da:	0f 90       	pop	r0
    24dc:	cf 91       	pop	r28
    24de:	df 91       	pop	r29
    24e0:	08 95       	ret

000024e2 <UART_receiveByte>:

uint8 UART_receiveByte()
{
    24e2:	df 93       	push	r29
    24e4:	cf 93       	push	r28
    24e6:	cd b7       	in	r28, 0x3d	; 61
    24e8:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC));
    24ea:	eb e2       	ldi	r30, 0x2B	; 43
    24ec:	f0 e0       	ldi	r31, 0x00	; 0
    24ee:	80 81       	ld	r24, Z
    24f0:	88 23       	and	r24, r24
    24f2:	dc f7       	brge	.-10     	; 0x24ea <UART_receiveByte+0x8>
	return UDR;
    24f4:	ec e2       	ldi	r30, 0x2C	; 44
    24f6:	f0 e0       	ldi	r31, 0x00	; 0
    24f8:	80 81       	ld	r24, Z
}
    24fa:	cf 91       	pop	r28
    24fc:	df 91       	pop	r29
    24fe:	08 95       	ret

00002500 <UART_sendString>:

void UART_sendString(const char *str)
{
    2500:	df 93       	push	r29
    2502:	cf 93       	push	r28
    2504:	00 d0       	rcall	.+0      	; 0x2506 <UART_sendString+0x6>
    2506:	0f 92       	push	r0
    2508:	cd b7       	in	r28, 0x3d	; 61
    250a:	de b7       	in	r29, 0x3e	; 62
    250c:	9b 83       	std	Y+3, r25	; 0x03
    250e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2510:	19 82       	std	Y+1, r1	; 0x01
    2512:	0e c0       	rjmp	.+28     	; 0x2530 <UART_sendString+0x30>
	while(str[i] != '\0')
	{
		UART_sendByte(str[i]);
    2514:	89 81       	ldd	r24, Y+1	; 0x01
    2516:	28 2f       	mov	r18, r24
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	8a 81       	ldd	r24, Y+2	; 0x02
    251c:	9b 81       	ldd	r25, Y+3	; 0x03
    251e:	fc 01       	movw	r30, r24
    2520:	e2 0f       	add	r30, r18
    2522:	f3 1f       	adc	r31, r19
    2524:	80 81       	ld	r24, Z
    2526:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <UART_sendByte>
		i++;
    252a:	89 81       	ldd	r24, Y+1	; 0x01
    252c:	8f 5f       	subi	r24, 0xFF	; 255
    252e:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const char *str)
{
	uint8 i = 0;
	while(str[i] != '\0')
    2530:	89 81       	ldd	r24, Y+1	; 0x01
    2532:	28 2f       	mov	r18, r24
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	8a 81       	ldd	r24, Y+2	; 0x02
    2538:	9b 81       	ldd	r25, Y+3	; 0x03
    253a:	fc 01       	movw	r30, r24
    253c:	e2 0f       	add	r30, r18
    253e:	f3 1f       	adc	r31, r19
    2540:	80 81       	ld	r24, Z
    2542:	88 23       	and	r24, r24
    2544:	39 f7       	brne	.-50     	; 0x2514 <UART_sendString+0x14>
	{
		UART_sendByte(str[i]);
		i++;
	}

}
    2546:	0f 90       	pop	r0
    2548:	0f 90       	pop	r0
    254a:	0f 90       	pop	r0
    254c:	cf 91       	pop	r28
    254e:	df 91       	pop	r29
    2550:	08 95       	ret

00002552 <UART_receiveString>:

void UART_receiveString(char *str)
{
    2552:	0f 93       	push	r16
    2554:	1f 93       	push	r17
    2556:	df 93       	push	r29
    2558:	cf 93       	push	r28
    255a:	00 d0       	rcall	.+0      	; 0x255c <UART_receiveString+0xa>
    255c:	0f 92       	push	r0
    255e:	cd b7       	in	r28, 0x3d	; 61
    2560:	de b7       	in	r29, 0x3e	; 62
    2562:	9b 83       	std	Y+3, r25	; 0x03
    2564:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2566:	19 82       	std	Y+1, r1	; 0x01
	str[i] = UART_receiveByte();
    2568:	89 81       	ldd	r24, Y+1	; 0x01
    256a:	28 2f       	mov	r18, r24
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	8a 81       	ldd	r24, Y+2	; 0x02
    2570:	9b 81       	ldd	r25, Y+3	; 0x03
    2572:	8c 01       	movw	r16, r24
    2574:	02 0f       	add	r16, r18
    2576:	13 1f       	adc	r17, r19
    2578:	0e 94 71 12 	call	0x24e2	; 0x24e2 <UART_receiveByte>
    257c:	f8 01       	movw	r30, r16
    257e:	80 83       	st	Z, r24
    2580:	0f c0       	rjmp	.+30     	; 0x25a0 <UART_receiveString+0x4e>
	while(str[i] != '#')   // keep receiving until #
	{
		i++;
    2582:	89 81       	ldd	r24, Y+1	; 0x01
    2584:	8f 5f       	subi	r24, 0xFF	; 255
    2586:	89 83       	std	Y+1, r24	; 0x01
		str[i] = UART_receiveByte();
    2588:	89 81       	ldd	r24, Y+1	; 0x01
    258a:	28 2f       	mov	r18, r24
    258c:	30 e0       	ldi	r19, 0x00	; 0
    258e:	8a 81       	ldd	r24, Y+2	; 0x02
    2590:	9b 81       	ldd	r25, Y+3	; 0x03
    2592:	8c 01       	movw	r16, r24
    2594:	02 0f       	add	r16, r18
    2596:	13 1f       	adc	r17, r19
    2598:	0e 94 71 12 	call	0x24e2	; 0x24e2 <UART_receiveByte>
    259c:	f8 01       	movw	r30, r16
    259e:	80 83       	st	Z, r24

void UART_receiveString(char *str)
{
	uint8 i = 0;
	str[i] = UART_receiveByte();
	while(str[i] != '#')   // keep receiving until #
    25a0:	89 81       	ldd	r24, Y+1	; 0x01
    25a2:	28 2f       	mov	r18, r24
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	8a 81       	ldd	r24, Y+2	; 0x02
    25a8:	9b 81       	ldd	r25, Y+3	; 0x03
    25aa:	fc 01       	movw	r30, r24
    25ac:	e2 0f       	add	r30, r18
    25ae:	f3 1f       	adc	r31, r19
    25b0:	80 81       	ld	r24, Z
    25b2:	83 32       	cpi	r24, 0x23	; 35
    25b4:	31 f7       	brne	.-52     	; 0x2582 <UART_receiveString+0x30>
	{
		i++;
		str[i] = UART_receiveByte();
	}
	str[i] = '\0';
    25b6:	89 81       	ldd	r24, Y+1	; 0x01
    25b8:	28 2f       	mov	r18, r24
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	8a 81       	ldd	r24, Y+2	; 0x02
    25be:	9b 81       	ldd	r25, Y+3	; 0x03
    25c0:	fc 01       	movw	r30, r24
    25c2:	e2 0f       	add	r30, r18
    25c4:	f3 1f       	adc	r31, r19
    25c6:	10 82       	st	Z, r1
}
    25c8:	0f 90       	pop	r0
    25ca:	0f 90       	pop	r0
    25cc:	0f 90       	pop	r0
    25ce:	cf 91       	pop	r28
    25d0:	df 91       	pop	r29
    25d2:	1f 91       	pop	r17
    25d4:	0f 91       	pop	r16
    25d6:	08 95       	ret

000025d8 <__prologue_saves__>:
    25d8:	2f 92       	push	r2
    25da:	3f 92       	push	r3
    25dc:	4f 92       	push	r4
    25de:	5f 92       	push	r5
    25e0:	6f 92       	push	r6
    25e2:	7f 92       	push	r7
    25e4:	8f 92       	push	r8
    25e6:	9f 92       	push	r9
    25e8:	af 92       	push	r10
    25ea:	bf 92       	push	r11
    25ec:	cf 92       	push	r12
    25ee:	df 92       	push	r13
    25f0:	ef 92       	push	r14
    25f2:	ff 92       	push	r15
    25f4:	0f 93       	push	r16
    25f6:	1f 93       	push	r17
    25f8:	cf 93       	push	r28
    25fa:	df 93       	push	r29
    25fc:	cd b7       	in	r28, 0x3d	; 61
    25fe:	de b7       	in	r29, 0x3e	; 62
    2600:	ca 1b       	sub	r28, r26
    2602:	db 0b       	sbc	r29, r27
    2604:	0f b6       	in	r0, 0x3f	; 63
    2606:	f8 94       	cli
    2608:	de bf       	out	0x3e, r29	; 62
    260a:	0f be       	out	0x3f, r0	; 63
    260c:	cd bf       	out	0x3d, r28	; 61
    260e:	09 94       	ijmp

00002610 <__epilogue_restores__>:
    2610:	2a 88       	ldd	r2, Y+18	; 0x12
    2612:	39 88       	ldd	r3, Y+17	; 0x11
    2614:	48 88       	ldd	r4, Y+16	; 0x10
    2616:	5f 84       	ldd	r5, Y+15	; 0x0f
    2618:	6e 84       	ldd	r6, Y+14	; 0x0e
    261a:	7d 84       	ldd	r7, Y+13	; 0x0d
    261c:	8c 84       	ldd	r8, Y+12	; 0x0c
    261e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2620:	aa 84       	ldd	r10, Y+10	; 0x0a
    2622:	b9 84       	ldd	r11, Y+9	; 0x09
    2624:	c8 84       	ldd	r12, Y+8	; 0x08
    2626:	df 80       	ldd	r13, Y+7	; 0x07
    2628:	ee 80       	ldd	r14, Y+6	; 0x06
    262a:	fd 80       	ldd	r15, Y+5	; 0x05
    262c:	0c 81       	ldd	r16, Y+4	; 0x04
    262e:	1b 81       	ldd	r17, Y+3	; 0x03
    2630:	aa 81       	ldd	r26, Y+2	; 0x02
    2632:	b9 81       	ldd	r27, Y+1	; 0x01
    2634:	ce 0f       	add	r28, r30
    2636:	d1 1d       	adc	r29, r1
    2638:	0f b6       	in	r0, 0x3f	; 63
    263a:	f8 94       	cli
    263c:	de bf       	out	0x3e, r29	; 62
    263e:	0f be       	out	0x3f, r0	; 63
    2640:	cd bf       	out	0x3d, r28	; 61
    2642:	ed 01       	movw	r28, r26
    2644:	08 95       	ret

00002646 <itoa>:
    2646:	fb 01       	movw	r30, r22
    2648:	9f 01       	movw	r18, r30
    264a:	e8 94       	clt
    264c:	42 30       	cpi	r20, 0x02	; 2
    264e:	c4 f0       	brlt	.+48     	; 0x2680 <itoa+0x3a>
    2650:	45 32       	cpi	r20, 0x25	; 37
    2652:	b4 f4       	brge	.+44     	; 0x2680 <itoa+0x3a>
    2654:	4a 30       	cpi	r20, 0x0A	; 10
    2656:	29 f4       	brne	.+10     	; 0x2662 <itoa+0x1c>
    2658:	97 fb       	bst	r25, 7
    265a:	1e f4       	brtc	.+6      	; 0x2662 <itoa+0x1c>
    265c:	90 95       	com	r25
    265e:	81 95       	neg	r24
    2660:	9f 4f       	sbci	r25, 0xFF	; 255
    2662:	64 2f       	mov	r22, r20
    2664:	77 27       	eor	r23, r23
    2666:	0e 94 54 13 	call	0x26a8	; 0x26a8 <__udivmodhi4>
    266a:	80 5d       	subi	r24, 0xD0	; 208
    266c:	8a 33       	cpi	r24, 0x3A	; 58
    266e:	0c f0       	brlt	.+2      	; 0x2672 <itoa+0x2c>
    2670:	89 5d       	subi	r24, 0xD9	; 217
    2672:	81 93       	st	Z+, r24
    2674:	cb 01       	movw	r24, r22
    2676:	00 97       	sbiw	r24, 0x00	; 0
    2678:	a1 f7       	brne	.-24     	; 0x2662 <itoa+0x1c>
    267a:	16 f4       	brtc	.+4      	; 0x2680 <itoa+0x3a>
    267c:	5d e2       	ldi	r21, 0x2D	; 45
    267e:	51 93       	st	Z+, r21
    2680:	10 82       	st	Z, r1
    2682:	c9 01       	movw	r24, r18
    2684:	0c 94 44 13 	jmp	0x2688	; 0x2688 <strrev>

00002688 <strrev>:
    2688:	dc 01       	movw	r26, r24
    268a:	fc 01       	movw	r30, r24
    268c:	67 2f       	mov	r22, r23
    268e:	71 91       	ld	r23, Z+
    2690:	77 23       	and	r23, r23
    2692:	e1 f7       	brne	.-8      	; 0x268c <strrev+0x4>
    2694:	32 97       	sbiw	r30, 0x02	; 2
    2696:	04 c0       	rjmp	.+8      	; 0x26a0 <strrev+0x18>
    2698:	7c 91       	ld	r23, X
    269a:	6d 93       	st	X+, r22
    269c:	70 83       	st	Z, r23
    269e:	62 91       	ld	r22, -Z
    26a0:	ae 17       	cp	r26, r30
    26a2:	bf 07       	cpc	r27, r31
    26a4:	c8 f3       	brcs	.-14     	; 0x2698 <strrev+0x10>
    26a6:	08 95       	ret

000026a8 <__udivmodhi4>:
    26a8:	aa 1b       	sub	r26, r26
    26aa:	bb 1b       	sub	r27, r27
    26ac:	51 e1       	ldi	r21, 0x11	; 17
    26ae:	07 c0       	rjmp	.+14     	; 0x26be <__udivmodhi4_ep>

000026b0 <__udivmodhi4_loop>:
    26b0:	aa 1f       	adc	r26, r26
    26b2:	bb 1f       	adc	r27, r27
    26b4:	a6 17       	cp	r26, r22
    26b6:	b7 07       	cpc	r27, r23
    26b8:	10 f0       	brcs	.+4      	; 0x26be <__udivmodhi4_ep>
    26ba:	a6 1b       	sub	r26, r22
    26bc:	b7 0b       	sbc	r27, r23

000026be <__udivmodhi4_ep>:
    26be:	88 1f       	adc	r24, r24
    26c0:	99 1f       	adc	r25, r25
    26c2:	5a 95       	dec	r21
    26c4:	a9 f7       	brne	.-22     	; 0x26b0 <__udivmodhi4_loop>
    26c6:	80 95       	com	r24
    26c8:	90 95       	com	r25
    26ca:	bc 01       	movw	r22, r24
    26cc:	cd 01       	movw	r24, r26
    26ce:	08 95       	ret

000026d0 <_exit>:
    26d0:	f8 94       	cli

000026d2 <__stop_program>:
    26d2:	ff cf       	rjmp	.-2      	; 0x26d2 <__stop_program>
